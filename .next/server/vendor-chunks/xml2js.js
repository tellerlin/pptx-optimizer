/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/xml2js";
exports.ids = ["vendor-chunks/xml2js"];
exports.modules = {

/***/ "(ssr)/./node_modules/xml2js/lib/bom.js":
/*!****************************************!*\
  !*** ./node_modules/xml2js/lib/bom.js ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    \"use strict\";\n    exports.stripBOM = function(str) {\n        if (str[0] === \"\\uFEFF\") {\n            return str.substring(1);\n        } else {\n            return str;\n        }\n    };\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveG1sMmpzL2xpYi9ib20uanMiLCJtYXBwaW5ncyI6IkFBQUEsbUNBQW1DO0FBQ2xDO0lBQ0M7SUFDQUEsZ0JBQWdCLEdBQUcsU0FBU0UsR0FBRztRQUM3QixJQUFJQSxHQUFHLENBQUMsRUFBRSxLQUFLLFVBQVU7WUFDdkIsT0FBT0EsSUFBSUMsU0FBUyxDQUFDO1FBQ3ZCLE9BQU87WUFDTCxPQUFPRDtRQUNUO0lBQ0Y7QUFFRixHQUFHRSxJQUFJLENBQUMsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL3BwdHgtb3B0aW1pemVyLy4vbm9kZV9tb2R1bGVzL3htbDJqcy9saWIvYm9tLmpzP2QzOGUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIGV4cG9ydHMuc3RyaXBCT00gPSBmdW5jdGlvbihzdHIpIHtcbiAgICBpZiAoc3RyWzBdID09PSAnXFx1RkVGRicpIHtcbiAgICAgIHJldHVybiBzdHIuc3Vic3RyaW5nKDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgfTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6WyJleHBvcnRzIiwic3RyaXBCT00iLCJzdHIiLCJzdWJzdHJpbmciLCJjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/lib/bom.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/lib/builder.js":
/*!********************************************!*\
  !*** ./node_modules/xml2js/lib/builder.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    \"use strict\";\n    var builder, defaults, escapeCDATA, requiresCDATA, wrapCDATA, hasProp = {}.hasOwnProperty;\n    builder = __webpack_require__(/*! xmlbuilder */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/index.js\");\n    defaults = (__webpack_require__(/*! ./defaults */ \"(ssr)/./node_modules/xml2js/lib/defaults.js\").defaults);\n    requiresCDATA = function(entry) {\n        return typeof entry === \"string\" && (entry.indexOf(\"&\") >= 0 || entry.indexOf(\">\") >= 0 || entry.indexOf(\"<\") >= 0);\n    };\n    wrapCDATA = function(entry) {\n        return \"<![CDATA[\" + escapeCDATA(entry) + \"]]>\";\n    };\n    escapeCDATA = function(entry) {\n        return entry.replace(\"]]>\", \"]]]]><![CDATA[>\");\n    };\n    exports.Builder = function() {\n        function Builder(opts) {\n            var key, ref, value;\n            this.options = {};\n            ref = defaults[\"0.2\"];\n            for(key in ref){\n                if (!hasProp.call(ref, key)) continue;\n                value = ref[key];\n                this.options[key] = value;\n            }\n            for(key in opts){\n                if (!hasProp.call(opts, key)) continue;\n                value = opts[key];\n                this.options[key] = value;\n            }\n        }\n        Builder.prototype.buildObject = function(rootObj) {\n            var attrkey, charkey, render, rootElement, rootName;\n            attrkey = this.options.attrkey;\n            charkey = this.options.charkey;\n            if (Object.keys(rootObj).length === 1 && this.options.rootName === defaults[\"0.2\"].rootName) {\n                rootName = Object.keys(rootObj)[0];\n                rootObj = rootObj[rootName];\n            } else {\n                rootName = this.options.rootName;\n            }\n            render = function(_this) {\n                return function(element, obj) {\n                    var attr, child, entry, index, key, value;\n                    if (typeof obj !== \"object\") {\n                        if (_this.options.cdata && requiresCDATA(obj)) {\n                            element.raw(wrapCDATA(obj));\n                        } else {\n                            element.txt(obj);\n                        }\n                    } else if (Array.isArray(obj)) {\n                        for(index in obj){\n                            if (!hasProp.call(obj, index)) continue;\n                            child = obj[index];\n                            for(key in child){\n                                entry = child[key];\n                                element = render(element.ele(key), entry).up();\n                            }\n                        }\n                    } else {\n                        for(key in obj){\n                            if (!hasProp.call(obj, key)) continue;\n                            child = obj[key];\n                            if (key === attrkey) {\n                                if (typeof child === \"object\") {\n                                    for(attr in child){\n                                        value = child[attr];\n                                        element = element.att(attr, value);\n                                    }\n                                }\n                            } else if (key === charkey) {\n                                if (_this.options.cdata && requiresCDATA(child)) {\n                                    element = element.raw(wrapCDATA(child));\n                                } else {\n                                    element = element.txt(child);\n                                }\n                            } else if (Array.isArray(child)) {\n                                for(index in child){\n                                    if (!hasProp.call(child, index)) continue;\n                                    entry = child[index];\n                                    if (typeof entry === \"string\") {\n                                        if (_this.options.cdata && requiresCDATA(entry)) {\n                                            element = element.ele(key).raw(wrapCDATA(entry)).up();\n                                        } else {\n                                            element = element.ele(key, entry).up();\n                                        }\n                                    } else {\n                                        element = render(element.ele(key), entry).up();\n                                    }\n                                }\n                            } else if (typeof child === \"object\") {\n                                element = render(element.ele(key), child).up();\n                            } else {\n                                if (typeof child === \"string\" && _this.options.cdata && requiresCDATA(child)) {\n                                    element = element.ele(key).raw(wrapCDATA(child)).up();\n                                } else {\n                                    if (child == null) {\n                                        child = \"\";\n                                    }\n                                    element = element.ele(key, child.toString()).up();\n                                }\n                            }\n                        }\n                    }\n                    return element;\n                };\n            }(this);\n            rootElement = builder.create(rootName, this.options.xmldec, this.options.doctype, {\n                headless: this.options.headless,\n                allowSurrogateChars: this.options.allowSurrogateChars\n            });\n            return render(rootElement, rootObj).end(this.options.renderOpts);\n        };\n        return Builder;\n    }();\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveG1sMmpzL2xpYi9idWlsZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLG1DQUFtQztBQUNsQztJQUNDO0lBQ0EsSUFBSUEsU0FBU0MsVUFBVUMsYUFBYUMsZUFBZUMsV0FDakRDLFVBQVUsQ0FBQyxFQUFFQyxjQUFjO0lBRTdCTixVQUFVTyxtQkFBT0EsQ0FBQztJQUVsQk4sV0FBV00sK0ZBQThCO0lBRXpDSixnQkFBZ0IsU0FBU0ssS0FBSztRQUM1QixPQUFPLE9BQU9BLFVBQVUsWUFBYUEsQ0FBQUEsTUFBTUMsT0FBTyxDQUFDLFFBQVEsS0FBS0QsTUFBTUMsT0FBTyxDQUFDLFFBQVEsS0FBS0QsTUFBTUMsT0FBTyxDQUFDLFFBQVE7SUFDbkg7SUFFQUwsWUFBWSxTQUFTSSxLQUFLO1FBQ3hCLE9BQU8sY0FBZU4sWUFBWU0sU0FBVTtJQUM5QztJQUVBTixjQUFjLFNBQVNNLEtBQUs7UUFDMUIsT0FBT0EsTUFBTUUsT0FBTyxDQUFDLE9BQU87SUFDOUI7SUFFQUMsZUFBZSxHQUFHO1FBQ2hCLFNBQVNDLFFBQVFDLElBQUk7WUFDbkIsSUFBSUMsS0FBS0MsS0FBS0M7WUFDZCxJQUFJLENBQUNDLE9BQU8sR0FBRyxDQUFDO1lBQ2hCRixNQUFNZCxRQUFRLENBQUMsTUFBTTtZQUNyQixJQUFLYSxPQUFPQyxJQUFLO2dCQUNmLElBQUksQ0FBQ1YsUUFBUWEsSUFBSSxDQUFDSCxLQUFLRCxNQUFNO2dCQUM3QkUsUUFBUUQsR0FBRyxDQUFDRCxJQUFJO2dCQUNoQixJQUFJLENBQUNHLE9BQU8sQ0FBQ0gsSUFBSSxHQUFHRTtZQUN0QjtZQUNBLElBQUtGLE9BQU9ELEtBQU07Z0JBQ2hCLElBQUksQ0FBQ1IsUUFBUWEsSUFBSSxDQUFDTCxNQUFNQyxNQUFNO2dCQUM5QkUsUUFBUUgsSUFBSSxDQUFDQyxJQUFJO2dCQUNqQixJQUFJLENBQUNHLE9BQU8sQ0FBQ0gsSUFBSSxHQUFHRTtZQUN0QjtRQUNGO1FBRUFKLFFBQVFPLFNBQVMsQ0FBQ0MsV0FBVyxHQUFHLFNBQVNDLE9BQU87WUFDOUMsSUFBSUMsU0FBU0MsU0FBU0MsUUFBUUMsYUFBYUM7WUFDM0NKLFVBQVUsSUFBSSxDQUFDTCxPQUFPLENBQUNLLE9BQU87WUFDOUJDLFVBQVUsSUFBSSxDQUFDTixPQUFPLENBQUNNLE9BQU87WUFDOUIsSUFBSSxPQUFRSyxJQUFJLENBQUNQLFNBQVNRLE1BQU0sS0FBSyxLQUFPLElBQUksQ0FBQ1osT0FBTyxDQUFDUyxRQUFRLEtBQUt6QixRQUFRLENBQUMsTUFBTSxDQUFDeUIsUUFBUSxFQUFHO2dCQUMvRkEsV0FBV0MsT0FBT0MsSUFBSSxDQUFDUCxRQUFRLENBQUMsRUFBRTtnQkFDbENBLFVBQVVBLE9BQU8sQ0FBQ0ssU0FBUztZQUM3QixPQUFPO2dCQUNMQSxXQUFXLElBQUksQ0FBQ1QsT0FBTyxDQUFDUyxRQUFRO1lBQ2xDO1lBQ0FGLFNBQVMsU0FBVU0sS0FBSztnQkFDdEIsT0FBTyxTQUFTQyxPQUFPLEVBQUVDLEdBQUc7b0JBQzFCLElBQUlDLE1BQU1DLE9BQU8xQixPQUFPMkIsT0FBT3JCLEtBQUtFO29CQUNwQyxJQUFJLE9BQU9nQixRQUFRLFVBQVU7d0JBQzNCLElBQUlGLE1BQU1iLE9BQU8sQ0FBQ21CLEtBQUssSUFBSWpDLGNBQWM2QixNQUFNOzRCQUM3Q0QsUUFBUU0sR0FBRyxDQUFDakMsVUFBVTRCO3dCQUN4QixPQUFPOzRCQUNMRCxRQUFRTyxHQUFHLENBQUNOO3dCQUNkO29CQUNGLE9BQU8sSUFBSU8sTUFBTUMsT0FBTyxDQUFDUixNQUFNO3dCQUM3QixJQUFLRyxTQUFTSCxJQUFLOzRCQUNqQixJQUFJLENBQUMzQixRQUFRYSxJQUFJLENBQUNjLEtBQUtHLFFBQVE7NEJBQy9CRCxRQUFRRixHQUFHLENBQUNHLE1BQU07NEJBQ2xCLElBQUtyQixPQUFPb0IsTUFBTztnQ0FDakIxQixRQUFRMEIsS0FBSyxDQUFDcEIsSUFBSTtnQ0FDbEJpQixVQUFVUCxPQUFPTyxRQUFRVSxHQUFHLENBQUMzQixNQUFNTixPQUFPa0MsRUFBRTs0QkFDOUM7d0JBQ0Y7b0JBQ0YsT0FBTzt3QkFDTCxJQUFLNUIsT0FBT2tCLElBQUs7NEJBQ2YsSUFBSSxDQUFDM0IsUUFBUWEsSUFBSSxDQUFDYyxLQUFLbEIsTUFBTTs0QkFDN0JvQixRQUFRRixHQUFHLENBQUNsQixJQUFJOzRCQUNoQixJQUFJQSxRQUFRUSxTQUFTO2dDQUNuQixJQUFJLE9BQU9ZLFVBQVUsVUFBVTtvQ0FDN0IsSUFBS0QsUUFBUUMsTUFBTzt3Q0FDbEJsQixRQUFRa0IsS0FBSyxDQUFDRCxLQUFLO3dDQUNuQkYsVUFBVUEsUUFBUVksR0FBRyxDQUFDVixNQUFNakI7b0NBQzlCO2dDQUNGOzRCQUNGLE9BQU8sSUFBSUYsUUFBUVMsU0FBUztnQ0FDMUIsSUFBSU8sTUFBTWIsT0FBTyxDQUFDbUIsS0FBSyxJQUFJakMsY0FBYytCLFFBQVE7b0NBQy9DSCxVQUFVQSxRQUFRTSxHQUFHLENBQUNqQyxVQUFVOEI7Z0NBQ2xDLE9BQU87b0NBQ0xILFVBQVVBLFFBQVFPLEdBQUcsQ0FBQ0o7Z0NBQ3hCOzRCQUNGLE9BQU8sSUFBSUssTUFBTUMsT0FBTyxDQUFDTixRQUFRO2dDQUMvQixJQUFLQyxTQUFTRCxNQUFPO29DQUNuQixJQUFJLENBQUM3QixRQUFRYSxJQUFJLENBQUNnQixPQUFPQyxRQUFRO29DQUNqQzNCLFFBQVEwQixLQUFLLENBQUNDLE1BQU07b0NBQ3BCLElBQUksT0FBTzNCLFVBQVUsVUFBVTt3Q0FDN0IsSUFBSXNCLE1BQU1iLE9BQU8sQ0FBQ21CLEtBQUssSUFBSWpDLGNBQWNLLFFBQVE7NENBQy9DdUIsVUFBVUEsUUFBUVUsR0FBRyxDQUFDM0IsS0FBS3VCLEdBQUcsQ0FBQ2pDLFVBQVVJLFFBQVFrQyxFQUFFO3dDQUNyRCxPQUFPOzRDQUNMWCxVQUFVQSxRQUFRVSxHQUFHLENBQUMzQixLQUFLTixPQUFPa0MsRUFBRTt3Q0FDdEM7b0NBQ0YsT0FBTzt3Q0FDTFgsVUFBVVAsT0FBT08sUUFBUVUsR0FBRyxDQUFDM0IsTUFBTU4sT0FBT2tDLEVBQUU7b0NBQzlDO2dDQUNGOzRCQUNGLE9BQU8sSUFBSSxPQUFPUixVQUFVLFVBQVU7Z0NBQ3BDSCxVQUFVUCxPQUFPTyxRQUFRVSxHQUFHLENBQUMzQixNQUFNb0IsT0FBT1EsRUFBRTs0QkFDOUMsT0FBTztnQ0FDTCxJQUFJLE9BQU9SLFVBQVUsWUFBWUosTUFBTWIsT0FBTyxDQUFDbUIsS0FBSyxJQUFJakMsY0FBYytCLFFBQVE7b0NBQzVFSCxVQUFVQSxRQUFRVSxHQUFHLENBQUMzQixLQUFLdUIsR0FBRyxDQUFDakMsVUFBVThCLFFBQVFRLEVBQUU7Z0NBQ3JELE9BQU87b0NBQ0wsSUFBSVIsU0FBUyxNQUFNO3dDQUNqQkEsUUFBUTtvQ0FDVjtvQ0FDQUgsVUFBVUEsUUFBUVUsR0FBRyxDQUFDM0IsS0FBS29CLE1BQU1VLFFBQVEsSUFBSUYsRUFBRTtnQ0FDakQ7NEJBQ0Y7d0JBQ0Y7b0JBQ0Y7b0JBQ0EsT0FBT1g7Z0JBQ1Q7WUFDRixFQUFHLElBQUk7WUFDUE4sY0FBY3pCLFFBQVE2QyxNQUFNLENBQUNuQixVQUFVLElBQUksQ0FBQ1QsT0FBTyxDQUFDNkIsTUFBTSxFQUFFLElBQUksQ0FBQzdCLE9BQU8sQ0FBQzhCLE9BQU8sRUFBRTtnQkFDaEZDLFVBQVUsSUFBSSxDQUFDL0IsT0FBTyxDQUFDK0IsUUFBUTtnQkFDL0JDLHFCQUFxQixJQUFJLENBQUNoQyxPQUFPLENBQUNnQyxtQkFBbUI7WUFDdkQ7WUFDQSxPQUFPekIsT0FBT0MsYUFBYUosU0FBUzZCLEdBQUcsQ0FBQyxJQUFJLENBQUNqQyxPQUFPLENBQUNrQyxVQUFVO1FBQ2pFO1FBRUEsT0FBT3ZDO0lBRVQ7QUFFRixHQUFHTSxJQUFJLENBQUMsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL3BwdHgtb3B0aW1pemVyLy4vbm9kZV9tb2R1bGVzL3htbDJqcy9saWIvYnVpbGRlci5qcz83ZjliIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICB2YXIgYnVpbGRlciwgZGVmYXVsdHMsIGVzY2FwZUNEQVRBLCByZXF1aXJlc0NEQVRBLCB3cmFwQ0RBVEEsXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIGJ1aWxkZXIgPSByZXF1aXJlKCd4bWxidWlsZGVyJyk7XG5cbiAgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJykuZGVmYXVsdHM7XG5cbiAgcmVxdWlyZXNDREFUQSA9IGZ1bmN0aW9uKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gXCJzdHJpbmdcIiAmJiAoZW50cnkuaW5kZXhPZignJicpID49IDAgfHwgZW50cnkuaW5kZXhPZignPicpID49IDAgfHwgZW50cnkuaW5kZXhPZignPCcpID49IDApO1xuICB9O1xuXG4gIHdyYXBDREFUQSA9IGZ1bmN0aW9uKGVudHJ5KSB7XG4gICAgcmV0dXJuIFwiPCFbQ0RBVEFbXCIgKyAoZXNjYXBlQ0RBVEEoZW50cnkpKSArIFwiXV0+XCI7XG4gIH07XG5cbiAgZXNjYXBlQ0RBVEEgPSBmdW5jdGlvbihlbnRyeSkge1xuICAgIHJldHVybiBlbnRyeS5yZXBsYWNlKCddXT4nLCAnXV1dXT48IVtDREFUQVs+Jyk7XG4gIH07XG5cbiAgZXhwb3J0cy5CdWlsZGVyID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIEJ1aWxkZXIob3B0cykge1xuICAgICAgdmFyIGtleSwgcmVmLCB2YWx1ZTtcbiAgICAgIHRoaXMub3B0aW9ucyA9IHt9O1xuICAgICAgcmVmID0gZGVmYXVsdHNbXCIwLjJcIl07XG4gICAgICBmb3IgKGtleSBpbiByZWYpIHtcbiAgICAgICAgaWYgKCFoYXNQcm9wLmNhbGwocmVmLCBrZXkpKSBjb250aW51ZTtcbiAgICAgICAgdmFsdWUgPSByZWZba2V5XTtcbiAgICAgICAgdGhpcy5vcHRpb25zW2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGZvciAoa2V5IGluIG9wdHMpIHtcbiAgICAgICAgaWYgKCFoYXNQcm9wLmNhbGwob3B0cywga2V5KSkgY29udGludWU7XG4gICAgICAgIHZhbHVlID0gb3B0c1trZXldO1xuICAgICAgICB0aGlzLm9wdGlvbnNba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIEJ1aWxkZXIucHJvdG90eXBlLmJ1aWxkT2JqZWN0ID0gZnVuY3Rpb24ocm9vdE9iaikge1xuICAgICAgdmFyIGF0dHJrZXksIGNoYXJrZXksIHJlbmRlciwgcm9vdEVsZW1lbnQsIHJvb3ROYW1lO1xuICAgICAgYXR0cmtleSA9IHRoaXMub3B0aW9ucy5hdHRya2V5O1xuICAgICAgY2hhcmtleSA9IHRoaXMub3B0aW9ucy5jaGFya2V5O1xuICAgICAgaWYgKChPYmplY3Qua2V5cyhyb290T2JqKS5sZW5ndGggPT09IDEpICYmICh0aGlzLm9wdGlvbnMucm9vdE5hbWUgPT09IGRlZmF1bHRzWycwLjInXS5yb290TmFtZSkpIHtcbiAgICAgICAgcm9vdE5hbWUgPSBPYmplY3Qua2V5cyhyb290T2JqKVswXTtcbiAgICAgICAgcm9vdE9iaiA9IHJvb3RPYmpbcm9vdE5hbWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm9vdE5hbWUgPSB0aGlzLm9wdGlvbnMucm9vdE5hbWU7XG4gICAgICB9XG4gICAgICByZW5kZXIgPSAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGVsZW1lbnQsIG9iaikge1xuICAgICAgICAgIHZhciBhdHRyLCBjaGlsZCwgZW50cnksIGluZGV4LCBrZXksIHZhbHVlO1xuICAgICAgICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuY2RhdGEgJiYgcmVxdWlyZXNDREFUQShvYmopKSB7XG4gICAgICAgICAgICAgIGVsZW1lbnQucmF3KHdyYXBDREFUQShvYmopKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGVsZW1lbnQudHh0KG9iaik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICAgICAgICAgIGZvciAoaW5kZXggaW4gb2JqKSB7XG4gICAgICAgICAgICAgIGlmICghaGFzUHJvcC5jYWxsKG9iaiwgaW5kZXgpKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgY2hpbGQgPSBvYmpbaW5kZXhdO1xuICAgICAgICAgICAgICBmb3IgKGtleSBpbiBjaGlsZCkge1xuICAgICAgICAgICAgICAgIGVudHJ5ID0gY2hpbGRba2V5XTtcbiAgICAgICAgICAgICAgICBlbGVtZW50ID0gcmVuZGVyKGVsZW1lbnQuZWxlKGtleSksIGVudHJ5KS51cCgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoa2V5IGluIG9iaikge1xuICAgICAgICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChvYmosIGtleSkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICBjaGlsZCA9IG9ialtrZXldO1xuICAgICAgICAgICAgICBpZiAoa2V5ID09PSBhdHRya2V5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjaGlsZCA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgICAgZm9yIChhdHRyIGluIGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gY2hpbGRbYXR0cl07XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LmF0dChhdHRyLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gY2hhcmtleSkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLmNkYXRhICYmIHJlcXVpcmVzQ0RBVEEoY2hpbGQpKSB7XG4gICAgICAgICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5yYXcod3JhcENEQVRBKGNoaWxkKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnR4dChjaGlsZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGQpKSB7XG4gICAgICAgICAgICAgICAgZm9yIChpbmRleCBpbiBjaGlsZCkge1xuICAgICAgICAgICAgICAgICAgaWYgKCFoYXNQcm9wLmNhbGwoY2hpbGQsIGluZGV4KSkgY29udGludWU7XG4gICAgICAgICAgICAgICAgICBlbnRyeSA9IGNoaWxkW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLmNkYXRhICYmIHJlcXVpcmVzQ0RBVEEoZW50cnkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQuZWxlKGtleSkucmF3KHdyYXBDREFUQShlbnRyeSkpLnVwKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQuZWxlKGtleSwgZW50cnkpLnVwKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQgPSByZW5kZXIoZWxlbWVudC5lbGUoa2V5KSwgZW50cnkpLnVwKCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjaGlsZCA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQgPSByZW5kZXIoZWxlbWVudC5lbGUoa2V5KSwgY2hpbGQpLnVwKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjaGlsZCA9PT0gJ3N0cmluZycgJiYgX3RoaXMub3B0aW9ucy5jZGF0YSAmJiByZXF1aXJlc0NEQVRBKGNoaWxkKSkge1xuICAgICAgICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQuZWxlKGtleSkucmF3KHdyYXBDREFUQShjaGlsZCkpLnVwKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGlmIChjaGlsZCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkID0gJyc7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5lbGUoa2V5LCBjaGlsZC50b1N0cmluZygpKS51cCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpO1xuICAgICAgcm9vdEVsZW1lbnQgPSBidWlsZGVyLmNyZWF0ZShyb290TmFtZSwgdGhpcy5vcHRpb25zLnhtbGRlYywgdGhpcy5vcHRpb25zLmRvY3R5cGUsIHtcbiAgICAgICAgaGVhZGxlc3M6IHRoaXMub3B0aW9ucy5oZWFkbGVzcyxcbiAgICAgICAgYWxsb3dTdXJyb2dhdGVDaGFyczogdGhpcy5vcHRpb25zLmFsbG93U3Vycm9nYXRlQ2hhcnNcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlbmRlcihyb290RWxlbWVudCwgcm9vdE9iaikuZW5kKHRoaXMub3B0aW9ucy5yZW5kZXJPcHRzKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEJ1aWxkZXI7XG5cbiAgfSkoKTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6WyJidWlsZGVyIiwiZGVmYXVsdHMiLCJlc2NhcGVDREFUQSIsInJlcXVpcmVzQ0RBVEEiLCJ3cmFwQ0RBVEEiLCJoYXNQcm9wIiwiaGFzT3duUHJvcGVydHkiLCJyZXF1aXJlIiwiZW50cnkiLCJpbmRleE9mIiwicmVwbGFjZSIsImV4cG9ydHMiLCJCdWlsZGVyIiwib3B0cyIsImtleSIsInJlZiIsInZhbHVlIiwib3B0aW9ucyIsImNhbGwiLCJwcm90b3R5cGUiLCJidWlsZE9iamVjdCIsInJvb3RPYmoiLCJhdHRya2V5IiwiY2hhcmtleSIsInJlbmRlciIsInJvb3RFbGVtZW50Iiwicm9vdE5hbWUiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwiX3RoaXMiLCJlbGVtZW50Iiwib2JqIiwiYXR0ciIsImNoaWxkIiwiaW5kZXgiLCJjZGF0YSIsInJhdyIsInR4dCIsIkFycmF5IiwiaXNBcnJheSIsImVsZSIsInVwIiwiYXR0IiwidG9TdHJpbmciLCJjcmVhdGUiLCJ4bWxkZWMiLCJkb2N0eXBlIiwiaGVhZGxlc3MiLCJhbGxvd1N1cnJvZ2F0ZUNoYXJzIiwiZW5kIiwicmVuZGVyT3B0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/lib/builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/lib/defaults.js":
/*!*********************************************!*\
  !*** ./node_modules/xml2js/lib/defaults.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    exports.defaults = {\n        \"0.1\": {\n            explicitCharkey: false,\n            trim: true,\n            normalize: true,\n            normalizeTags: false,\n            attrkey: \"@\",\n            charkey: \"#\",\n            explicitArray: false,\n            ignoreAttrs: false,\n            mergeAttrs: false,\n            explicitRoot: false,\n            validator: null,\n            xmlns: false,\n            explicitChildren: false,\n            childkey: \"@@\",\n            charsAsChildren: false,\n            includeWhiteChars: false,\n            async: false,\n            strict: true,\n            attrNameProcessors: null,\n            attrValueProcessors: null,\n            tagNameProcessors: null,\n            valueProcessors: null,\n            emptyTag: \"\"\n        },\n        \"0.2\": {\n            explicitCharkey: false,\n            trim: false,\n            normalize: false,\n            normalizeTags: false,\n            attrkey: \"$\",\n            charkey: \"_\",\n            explicitArray: true,\n            ignoreAttrs: false,\n            mergeAttrs: false,\n            explicitRoot: true,\n            validator: null,\n            xmlns: false,\n            explicitChildren: false,\n            preserveChildrenOrder: false,\n            childkey: \"$$\",\n            charsAsChildren: false,\n            includeWhiteChars: false,\n            async: false,\n            strict: true,\n            attrNameProcessors: null,\n            attrValueProcessors: null,\n            tagNameProcessors: null,\n            valueProcessors: null,\n            rootName: \"root\",\n            xmldec: {\n                \"version\": \"1.0\",\n                \"encoding\": \"UTF-8\",\n                \"standalone\": true\n            },\n            doctype: null,\n            renderOpts: {\n                \"pretty\": true,\n                \"indent\": \"  \",\n                \"newline\": \"\\n\"\n            },\n            headless: false,\n            chunkSize: 10000,\n            emptyTag: \"\",\n            cdata: false\n        }\n    };\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveG1sMmpzL2xpYi9kZWZhdWx0cy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxtQ0FBbUM7QUFDbEM7SUFDQ0EsZ0JBQWdCLEdBQUc7UUFDakIsT0FBTztZQUNMRSxpQkFBaUI7WUFDakJDLE1BQU07WUFDTkMsV0FBVztZQUNYQyxlQUFlO1lBQ2ZDLFNBQVM7WUFDVEMsU0FBUztZQUNUQyxlQUFlO1lBQ2ZDLGFBQWE7WUFDYkMsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFdBQVc7WUFDWEMsT0FBTztZQUNQQyxrQkFBa0I7WUFDbEJDLFVBQVU7WUFDVkMsaUJBQWlCO1lBQ2pCQyxtQkFBbUI7WUFDbkJDLE9BQU87WUFDUEMsUUFBUTtZQUNSQyxvQkFBb0I7WUFDcEJDLHFCQUFxQjtZQUNyQkMsbUJBQW1CO1lBQ25CQyxpQkFBaUI7WUFDakJDLFVBQVU7UUFDWjtRQUNBLE9BQU87WUFDTHRCLGlCQUFpQjtZQUNqQkMsTUFBTTtZQUNOQyxXQUFXO1lBQ1hDLGVBQWU7WUFDZkMsU0FBUztZQUNUQyxTQUFTO1lBQ1RDLGVBQWU7WUFDZkMsYUFBYTtZQUNiQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsV0FBVztZQUNYQyxPQUFPO1lBQ1BDLGtCQUFrQjtZQUNsQlcsdUJBQXVCO1lBQ3ZCVixVQUFVO1lBQ1ZDLGlCQUFpQjtZQUNqQkMsbUJBQW1CO1lBQ25CQyxPQUFPO1lBQ1BDLFFBQVE7WUFDUkMsb0JBQW9CO1lBQ3BCQyxxQkFBcUI7WUFDckJDLG1CQUFtQjtZQUNuQkMsaUJBQWlCO1lBQ2pCRyxVQUFVO1lBQ1ZDLFFBQVE7Z0JBQ04sV0FBVztnQkFDWCxZQUFZO2dCQUNaLGNBQWM7WUFDaEI7WUFDQUMsU0FBUztZQUNUQyxZQUFZO2dCQUNWLFVBQVU7Z0JBQ1YsVUFBVTtnQkFDVixXQUFXO1lBQ2I7WUFDQUMsVUFBVTtZQUNWQyxXQUFXO1lBQ1hQLFVBQVU7WUFDVlEsT0FBTztRQUNUO0lBQ0Y7QUFFRixHQUFHQyxJQUFJLENBQUMsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL3BwdHgtb3B0aW1pemVyLy4vbm9kZV9tb2R1bGVzL3htbDJqcy9saWIvZGVmYXVsdHMuanM/ZTQ4YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICBleHBvcnRzLmRlZmF1bHRzID0ge1xuICAgIFwiMC4xXCI6IHtcbiAgICAgIGV4cGxpY2l0Q2hhcmtleTogZmFsc2UsXG4gICAgICB0cmltOiB0cnVlLFxuICAgICAgbm9ybWFsaXplOiB0cnVlLFxuICAgICAgbm9ybWFsaXplVGFnczogZmFsc2UsXG4gICAgICBhdHRya2V5OiBcIkBcIixcbiAgICAgIGNoYXJrZXk6IFwiI1wiLFxuICAgICAgZXhwbGljaXRBcnJheTogZmFsc2UsXG4gICAgICBpZ25vcmVBdHRyczogZmFsc2UsXG4gICAgICBtZXJnZUF0dHJzOiBmYWxzZSxcbiAgICAgIGV4cGxpY2l0Um9vdDogZmFsc2UsXG4gICAgICB2YWxpZGF0b3I6IG51bGwsXG4gICAgICB4bWxuczogZmFsc2UsXG4gICAgICBleHBsaWNpdENoaWxkcmVuOiBmYWxzZSxcbiAgICAgIGNoaWxka2V5OiAnQEAnLFxuICAgICAgY2hhcnNBc0NoaWxkcmVuOiBmYWxzZSxcbiAgICAgIGluY2x1ZGVXaGl0ZUNoYXJzOiBmYWxzZSxcbiAgICAgIGFzeW5jOiBmYWxzZSxcbiAgICAgIHN0cmljdDogdHJ1ZSxcbiAgICAgIGF0dHJOYW1lUHJvY2Vzc29yczogbnVsbCxcbiAgICAgIGF0dHJWYWx1ZVByb2Nlc3NvcnM6IG51bGwsXG4gICAgICB0YWdOYW1lUHJvY2Vzc29yczogbnVsbCxcbiAgICAgIHZhbHVlUHJvY2Vzc29yczogbnVsbCxcbiAgICAgIGVtcHR5VGFnOiAnJ1xuICAgIH0sXG4gICAgXCIwLjJcIjoge1xuICAgICAgZXhwbGljaXRDaGFya2V5OiBmYWxzZSxcbiAgICAgIHRyaW06IGZhbHNlLFxuICAgICAgbm9ybWFsaXplOiBmYWxzZSxcbiAgICAgIG5vcm1hbGl6ZVRhZ3M6IGZhbHNlLFxuICAgICAgYXR0cmtleTogXCIkXCIsXG4gICAgICBjaGFya2V5OiBcIl9cIixcbiAgICAgIGV4cGxpY2l0QXJyYXk6IHRydWUsXG4gICAgICBpZ25vcmVBdHRyczogZmFsc2UsXG4gICAgICBtZXJnZUF0dHJzOiBmYWxzZSxcbiAgICAgIGV4cGxpY2l0Um9vdDogdHJ1ZSxcbiAgICAgIHZhbGlkYXRvcjogbnVsbCxcbiAgICAgIHhtbG5zOiBmYWxzZSxcbiAgICAgIGV4cGxpY2l0Q2hpbGRyZW46IGZhbHNlLFxuICAgICAgcHJlc2VydmVDaGlsZHJlbk9yZGVyOiBmYWxzZSxcbiAgICAgIGNoaWxka2V5OiAnJCQnLFxuICAgICAgY2hhcnNBc0NoaWxkcmVuOiBmYWxzZSxcbiAgICAgIGluY2x1ZGVXaGl0ZUNoYXJzOiBmYWxzZSxcbiAgICAgIGFzeW5jOiBmYWxzZSxcbiAgICAgIHN0cmljdDogdHJ1ZSxcbiAgICAgIGF0dHJOYW1lUHJvY2Vzc29yczogbnVsbCxcbiAgICAgIGF0dHJWYWx1ZVByb2Nlc3NvcnM6IG51bGwsXG4gICAgICB0YWdOYW1lUHJvY2Vzc29yczogbnVsbCxcbiAgICAgIHZhbHVlUHJvY2Vzc29yczogbnVsbCxcbiAgICAgIHJvb3ROYW1lOiAncm9vdCcsXG4gICAgICB4bWxkZWM6IHtcbiAgICAgICAgJ3ZlcnNpb24nOiAnMS4wJyxcbiAgICAgICAgJ2VuY29kaW5nJzogJ1VURi04JyxcbiAgICAgICAgJ3N0YW5kYWxvbmUnOiB0cnVlXG4gICAgICB9LFxuICAgICAgZG9jdHlwZTogbnVsbCxcbiAgICAgIHJlbmRlck9wdHM6IHtcbiAgICAgICAgJ3ByZXR0eSc6IHRydWUsXG4gICAgICAgICdpbmRlbnQnOiAnICAnLFxuICAgICAgICAnbmV3bGluZSc6ICdcXG4nXG4gICAgICB9LFxuICAgICAgaGVhZGxlc3M6IGZhbHNlLFxuICAgICAgY2h1bmtTaXplOiAxMDAwMCxcbiAgICAgIGVtcHR5VGFnOiAnJyxcbiAgICAgIGNkYXRhOiBmYWxzZVxuICAgIH1cbiAgfTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6WyJleHBvcnRzIiwiZGVmYXVsdHMiLCJleHBsaWNpdENoYXJrZXkiLCJ0cmltIiwibm9ybWFsaXplIiwibm9ybWFsaXplVGFncyIsImF0dHJrZXkiLCJjaGFya2V5IiwiZXhwbGljaXRBcnJheSIsImlnbm9yZUF0dHJzIiwibWVyZ2VBdHRycyIsImV4cGxpY2l0Um9vdCIsInZhbGlkYXRvciIsInhtbG5zIiwiZXhwbGljaXRDaGlsZHJlbiIsImNoaWxka2V5IiwiY2hhcnNBc0NoaWxkcmVuIiwiaW5jbHVkZVdoaXRlQ2hhcnMiLCJhc3luYyIsInN0cmljdCIsImF0dHJOYW1lUHJvY2Vzc29ycyIsImF0dHJWYWx1ZVByb2Nlc3NvcnMiLCJ0YWdOYW1lUHJvY2Vzc29ycyIsInZhbHVlUHJvY2Vzc29ycyIsImVtcHR5VGFnIiwicHJlc2VydmVDaGlsZHJlbk9yZGVyIiwicm9vdE5hbWUiLCJ4bWxkZWMiLCJkb2N0eXBlIiwicmVuZGVyT3B0cyIsImhlYWRsZXNzIiwiY2h1bmtTaXplIiwiY2RhdGEiLCJjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/lib/defaults.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/lib/parser.js":
/*!*******************************************!*\
  !*** ./node_modules/xml2js/lib/parser.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    \"use strict\";\n    var bom, defaults, defineProperty, events, isEmpty, processItem, processors, sax, setImmediate, bind = function(fn, me) {\n        return function() {\n            return fn.apply(me, arguments);\n        };\n    }, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    sax = __webpack_require__(/*! sax */ \"(ssr)/./node_modules/sax/lib/sax.js\");\n    events = __webpack_require__(/*! events */ \"events\");\n    bom = __webpack_require__(/*! ./bom */ \"(ssr)/./node_modules/xml2js/lib/bom.js\");\n    processors = __webpack_require__(/*! ./processors */ \"(ssr)/./node_modules/xml2js/lib/processors.js\");\n    setImmediate = (__webpack_require__(/*! timers */ \"timers\").setImmediate);\n    defaults = (__webpack_require__(/*! ./defaults */ \"(ssr)/./node_modules/xml2js/lib/defaults.js\").defaults);\n    isEmpty = function(thing) {\n        return typeof thing === \"object\" && thing != null && Object.keys(thing).length === 0;\n    };\n    processItem = function(processors, item, key) {\n        var i, len, process;\n        for(i = 0, len = processors.length; i < len; i++){\n            process = processors[i];\n            item = process(item, key);\n        }\n        return item;\n    };\n    defineProperty = function(obj, key, value) {\n        var descriptor;\n        descriptor = Object.create(null);\n        descriptor.value = value;\n        descriptor.writable = true;\n        descriptor.enumerable = true;\n        descriptor.configurable = true;\n        return Object.defineProperty(obj, key, descriptor);\n    };\n    exports.Parser = function(superClass) {\n        extend(Parser, superClass);\n        function Parser(opts) {\n            this.parseStringPromise = bind(this.parseStringPromise, this);\n            this.parseString = bind(this.parseString, this);\n            this.reset = bind(this.reset, this);\n            this.assignOrPush = bind(this.assignOrPush, this);\n            this.processAsync = bind(this.processAsync, this);\n            var key, ref, value;\n            if (!(this instanceof exports.Parser)) {\n                return new exports.Parser(opts);\n            }\n            this.options = {};\n            ref = defaults[\"0.2\"];\n            for(key in ref){\n                if (!hasProp.call(ref, key)) continue;\n                value = ref[key];\n                this.options[key] = value;\n            }\n            for(key in opts){\n                if (!hasProp.call(opts, key)) continue;\n                value = opts[key];\n                this.options[key] = value;\n            }\n            if (this.options.xmlns) {\n                this.options.xmlnskey = this.options.attrkey + \"ns\";\n            }\n            if (this.options.normalizeTags) {\n                if (!this.options.tagNameProcessors) {\n                    this.options.tagNameProcessors = [];\n                }\n                this.options.tagNameProcessors.unshift(processors.normalize);\n            }\n            this.reset();\n        }\n        Parser.prototype.processAsync = function() {\n            var chunk, err;\n            try {\n                if (this.remaining.length <= this.options.chunkSize) {\n                    chunk = this.remaining;\n                    this.remaining = \"\";\n                    this.saxParser = this.saxParser.write(chunk);\n                    return this.saxParser.close();\n                } else {\n                    chunk = this.remaining.substr(0, this.options.chunkSize);\n                    this.remaining = this.remaining.substr(this.options.chunkSize, this.remaining.length);\n                    this.saxParser = this.saxParser.write(chunk);\n                    return setImmediate(this.processAsync);\n                }\n            } catch (error1) {\n                err = error1;\n                if (!this.saxParser.errThrown) {\n                    this.saxParser.errThrown = true;\n                    return this.emit(err);\n                }\n            }\n        };\n        Parser.prototype.assignOrPush = function(obj, key, newValue) {\n            if (!(key in obj)) {\n                if (!this.options.explicitArray) {\n                    return defineProperty(obj, key, newValue);\n                } else {\n                    return defineProperty(obj, key, [\n                        newValue\n                    ]);\n                }\n            } else {\n                if (!(obj[key] instanceof Array)) {\n                    defineProperty(obj, key, [\n                        obj[key]\n                    ]);\n                }\n                return obj[key].push(newValue);\n            }\n        };\n        Parser.prototype.reset = function() {\n            var attrkey, charkey, ontext, stack;\n            this.removeAllListeners();\n            this.saxParser = sax.parser(this.options.strict, {\n                trim: false,\n                normalize: false,\n                xmlns: this.options.xmlns\n            });\n            this.saxParser.errThrown = false;\n            this.saxParser.onerror = function(_this) {\n                return function(error) {\n                    _this.saxParser.resume();\n                    if (!_this.saxParser.errThrown) {\n                        _this.saxParser.errThrown = true;\n                        return _this.emit(\"error\", error);\n                    }\n                };\n            }(this);\n            this.saxParser.onend = function(_this) {\n                return function() {\n                    if (!_this.saxParser.ended) {\n                        _this.saxParser.ended = true;\n                        return _this.emit(\"end\", _this.resultObject);\n                    }\n                };\n            }(this);\n            this.saxParser.ended = false;\n            this.EXPLICIT_CHARKEY = this.options.explicitCharkey;\n            this.resultObject = null;\n            stack = [];\n            attrkey = this.options.attrkey;\n            charkey = this.options.charkey;\n            this.saxParser.onopentag = function(_this) {\n                return function(node) {\n                    var key, newValue, obj, processedKey, ref;\n                    obj = {};\n                    obj[charkey] = \"\";\n                    if (!_this.options.ignoreAttrs) {\n                        ref = node.attributes;\n                        for(key in ref){\n                            if (!hasProp.call(ref, key)) continue;\n                            if (!(attrkey in obj) && !_this.options.mergeAttrs) {\n                                obj[attrkey] = {};\n                            }\n                            newValue = _this.options.attrValueProcessors ? processItem(_this.options.attrValueProcessors, node.attributes[key], key) : node.attributes[key];\n                            processedKey = _this.options.attrNameProcessors ? processItem(_this.options.attrNameProcessors, key) : key;\n                            if (_this.options.mergeAttrs) {\n                                _this.assignOrPush(obj, processedKey, newValue);\n                            } else {\n                                defineProperty(obj[attrkey], processedKey, newValue);\n                            }\n                        }\n                    }\n                    obj[\"#name\"] = _this.options.tagNameProcessors ? processItem(_this.options.tagNameProcessors, node.name) : node.name;\n                    if (_this.options.xmlns) {\n                        obj[_this.options.xmlnskey] = {\n                            uri: node.uri,\n                            local: node.local\n                        };\n                    }\n                    return stack.push(obj);\n                };\n            }(this);\n            this.saxParser.onclosetag = function(_this) {\n                return function() {\n                    var cdata, emptyStr, key, node, nodeName, obj, objClone, old, s, xpath;\n                    obj = stack.pop();\n                    nodeName = obj[\"#name\"];\n                    if (!_this.options.explicitChildren || !_this.options.preserveChildrenOrder) {\n                        delete obj[\"#name\"];\n                    }\n                    if (obj.cdata === true) {\n                        cdata = obj.cdata;\n                        delete obj.cdata;\n                    }\n                    s = stack[stack.length - 1];\n                    if (obj[charkey].match(/^\\s*$/) && !cdata) {\n                        emptyStr = obj[charkey];\n                        delete obj[charkey];\n                    } else {\n                        if (_this.options.trim) {\n                            obj[charkey] = obj[charkey].trim();\n                        }\n                        if (_this.options.normalize) {\n                            obj[charkey] = obj[charkey].replace(/\\s{2,}/g, \" \").trim();\n                        }\n                        obj[charkey] = _this.options.valueProcessors ? processItem(_this.options.valueProcessors, obj[charkey], nodeName) : obj[charkey];\n                        if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {\n                            obj = obj[charkey];\n                        }\n                    }\n                    if (isEmpty(obj)) {\n                        if (typeof _this.options.emptyTag === \"function\") {\n                            obj = _this.options.emptyTag();\n                        } else {\n                            obj = _this.options.emptyTag !== \"\" ? _this.options.emptyTag : emptyStr;\n                        }\n                    }\n                    if (_this.options.validator != null) {\n                        xpath = \"/\" + (function() {\n                            var i, len, results;\n                            results = [];\n                            for(i = 0, len = stack.length; i < len; i++){\n                                node = stack[i];\n                                results.push(node[\"#name\"]);\n                            }\n                            return results;\n                        })().concat(nodeName).join(\"/\");\n                        (function() {\n                            var err;\n                            try {\n                                return obj = _this.options.validator(xpath, s && s[nodeName], obj);\n                            } catch (error1) {\n                                err = error1;\n                                return _this.emit(\"error\", err);\n                            }\n                        })();\n                    }\n                    if (_this.options.explicitChildren && !_this.options.mergeAttrs && typeof obj === \"object\") {\n                        if (!_this.options.preserveChildrenOrder) {\n                            node = {};\n                            if (_this.options.attrkey in obj) {\n                                node[_this.options.attrkey] = obj[_this.options.attrkey];\n                                delete obj[_this.options.attrkey];\n                            }\n                            if (!_this.options.charsAsChildren && _this.options.charkey in obj) {\n                                node[_this.options.charkey] = obj[_this.options.charkey];\n                                delete obj[_this.options.charkey];\n                            }\n                            if (Object.getOwnPropertyNames(obj).length > 0) {\n                                node[_this.options.childkey] = obj;\n                            }\n                            obj = node;\n                        } else if (s) {\n                            s[_this.options.childkey] = s[_this.options.childkey] || [];\n                            objClone = {};\n                            for(key in obj){\n                                if (!hasProp.call(obj, key)) continue;\n                                defineProperty(objClone, key, obj[key]);\n                            }\n                            s[_this.options.childkey].push(objClone);\n                            delete obj[\"#name\"];\n                            if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {\n                                obj = obj[charkey];\n                            }\n                        }\n                    }\n                    if (stack.length > 0) {\n                        return _this.assignOrPush(s, nodeName, obj);\n                    } else {\n                        if (_this.options.explicitRoot) {\n                            old = obj;\n                            obj = {};\n                            defineProperty(obj, nodeName, old);\n                        }\n                        _this.resultObject = obj;\n                        _this.saxParser.ended = true;\n                        return _this.emit(\"end\", _this.resultObject);\n                    }\n                };\n            }(this);\n            ontext = function(_this) {\n                return function(text) {\n                    var charChild, s;\n                    s = stack[stack.length - 1];\n                    if (s) {\n                        s[charkey] += text;\n                        if (_this.options.explicitChildren && _this.options.preserveChildrenOrder && _this.options.charsAsChildren && (_this.options.includeWhiteChars || text.replace(/\\\\n/g, \"\").trim() !== \"\")) {\n                            s[_this.options.childkey] = s[_this.options.childkey] || [];\n                            charChild = {\n                                \"#name\": \"__text__\"\n                            };\n                            charChild[charkey] = text;\n                            if (_this.options.normalize) {\n                                charChild[charkey] = charChild[charkey].replace(/\\s{2,}/g, \" \").trim();\n                            }\n                            s[_this.options.childkey].push(charChild);\n                        }\n                        return s;\n                    }\n                };\n            }(this);\n            this.saxParser.ontext = ontext;\n            return this.saxParser.oncdata = function(_this) {\n                return function(text) {\n                    var s;\n                    s = ontext(text);\n                    if (s) {\n                        return s.cdata = true;\n                    }\n                };\n            }(this);\n        };\n        Parser.prototype.parseString = function(str, cb) {\n            var err;\n            if (cb != null && typeof cb === \"function\") {\n                this.on(\"end\", function(result) {\n                    this.reset();\n                    return cb(null, result);\n                });\n                this.on(\"error\", function(err) {\n                    this.reset();\n                    return cb(err);\n                });\n            }\n            try {\n                str = str.toString();\n                if (str.trim() === \"\") {\n                    this.emit(\"end\", null);\n                    return true;\n                }\n                str = bom.stripBOM(str);\n                if (this.options.async) {\n                    this.remaining = str;\n                    setImmediate(this.processAsync);\n                    return this.saxParser;\n                }\n                return this.saxParser.write(str).close();\n            } catch (error1) {\n                err = error1;\n                if (!(this.saxParser.errThrown || this.saxParser.ended)) {\n                    this.emit(\"error\", err);\n                    return this.saxParser.errThrown = true;\n                } else if (this.saxParser.ended) {\n                    throw err;\n                }\n            }\n        };\n        Parser.prototype.parseStringPromise = function(str) {\n            return new Promise(function(_this) {\n                return function(resolve, reject) {\n                    return _this.parseString(str, function(err, value) {\n                        if (err) {\n                            return reject(err);\n                        } else {\n                            return resolve(value);\n                        }\n                    });\n                };\n            }(this));\n        };\n        return Parser;\n    }(events);\n    exports.parseString = function(str, a, b) {\n        var cb, options, parser;\n        if (b != null) {\n            if (typeof b === \"function\") {\n                cb = b;\n            }\n            if (typeof a === \"object\") {\n                options = a;\n            }\n        } else {\n            if (typeof a === \"function\") {\n                cb = a;\n            }\n            options = {};\n        }\n        parser = new exports.Parser(options);\n        return parser.parseString(str, cb);\n    };\n    exports.parseStringPromise = function(str, a) {\n        var options, parser;\n        if (typeof a === \"object\") {\n            options = a;\n        }\n        parser = new exports.Parser(options);\n        return parser.parseStringPromise(str);\n    };\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/lib/parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/lib/processors.js":
/*!***********************************************!*\
  !*** ./node_modules/xml2js/lib/processors.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    \"use strict\";\n    var prefixMatch;\n    prefixMatch = new RegExp(/(?!xmlns)^.*:/);\n    exports.normalize = function(str) {\n        return str.toLowerCase();\n    };\n    exports.firstCharLowerCase = function(str) {\n        return str.charAt(0).toLowerCase() + str.slice(1);\n    };\n    exports.stripPrefix = function(str) {\n        return str.replace(prefixMatch, \"\");\n    };\n    exports.parseNumbers = function(str) {\n        if (!isNaN(str)) {\n            str = str % 1 === 0 ? parseInt(str, 10) : parseFloat(str);\n        }\n        return str;\n    };\n    exports.parseBooleans = function(str) {\n        if (/^(?:true|false)$/i.test(str)) {\n            str = str.toLowerCase() === \"true\";\n        }\n        return str;\n    };\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveG1sMmpzL2xpYi9wcm9jZXNzb3JzLmpzIiwibWFwcGluZ3MiOiJBQUFBLG1DQUFtQztBQUNsQztJQUNDO0lBQ0EsSUFBSUE7SUFFSkEsY0FBYyxJQUFJQyxPQUFPO0lBRXpCQyxpQkFBaUIsR0FBRyxTQUFTRSxHQUFHO1FBQzlCLE9BQU9BLElBQUlDLFdBQVc7SUFDeEI7SUFFQUgsMEJBQTBCLEdBQUcsU0FBU0UsR0FBRztRQUN2QyxPQUFPQSxJQUFJRyxNQUFNLENBQUMsR0FBR0YsV0FBVyxLQUFLRCxJQUFJSSxLQUFLLENBQUM7SUFDakQ7SUFFQU4sbUJBQW1CLEdBQUcsU0FBU0UsR0FBRztRQUNoQyxPQUFPQSxJQUFJTSxPQUFPLENBQUNWLGFBQWE7SUFDbEM7SUFFQUUsb0JBQW9CLEdBQUcsU0FBU0UsR0FBRztRQUNqQyxJQUFJLENBQUNRLE1BQU1SLE1BQU07WUFDZkEsTUFBTUEsTUFBTSxNQUFNLElBQUlTLFNBQVNULEtBQUssTUFBTVUsV0FBV1Y7UUFDdkQ7UUFDQSxPQUFPQTtJQUNUO0lBRUFGLHFCQUFxQixHQUFHLFNBQVNFLEdBQUc7UUFDbEMsSUFBSSxvQkFBb0JZLElBQUksQ0FBQ1osTUFBTTtZQUNqQ0EsTUFBTUEsSUFBSUMsV0FBVyxPQUFPO1FBQzlCO1FBQ0EsT0FBT0Q7SUFDVDtBQUVGLEdBQUdhLElBQUksQ0FBQyxJQUFJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHB0eC1vcHRpbWl6ZXIvLi9ub2RlX21vZHVsZXMveG1sMmpzL2xpYi9wcm9jZXNzb3JzLmpzP2ExOWQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIHZhciBwcmVmaXhNYXRjaDtcblxuICBwcmVmaXhNYXRjaCA9IG5ldyBSZWdFeHAoLyg/IXhtbG5zKV4uKjovKTtcblxuICBleHBvcnRzLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHJldHVybiBzdHIudG9Mb3dlckNhc2UoKTtcbiAgfTtcblxuICBleHBvcnRzLmZpcnN0Q2hhckxvd2VyQ2FzZSA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHJldHVybiBzdHIuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSk7XG4gIH07XG5cbiAgZXhwb3J0cy5zdHJpcFByZWZpeCA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZShwcmVmaXhNYXRjaCwgJycpO1xuICB9O1xuXG4gIGV4cG9ydHMucGFyc2VOdW1iZXJzID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgaWYgKCFpc05hTihzdHIpKSB7XG4gICAgICBzdHIgPSBzdHIgJSAxID09PSAwID8gcGFyc2VJbnQoc3RyLCAxMCkgOiBwYXJzZUZsb2F0KHN0cik7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG4gIH07XG5cbiAgZXhwb3J0cy5wYXJzZUJvb2xlYW5zID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgaWYgKC9eKD86dHJ1ZXxmYWxzZSkkL2kudGVzdChzdHIpKSB7XG4gICAgICBzdHIgPSBzdHIudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xuICB9O1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm5hbWVzIjpbInByZWZpeE1hdGNoIiwiUmVnRXhwIiwiZXhwb3J0cyIsIm5vcm1hbGl6ZSIsInN0ciIsInRvTG93ZXJDYXNlIiwiZmlyc3RDaGFyTG93ZXJDYXNlIiwiY2hhckF0Iiwic2xpY2UiLCJzdHJpcFByZWZpeCIsInJlcGxhY2UiLCJwYXJzZU51bWJlcnMiLCJpc05hTiIsInBhcnNlSW50IiwicGFyc2VGbG9hdCIsInBhcnNlQm9vbGVhbnMiLCJ0ZXN0IiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/lib/processors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/lib/xml2js.js":
/*!*******************************************!*\
  !*** ./node_modules/xml2js/lib/xml2js.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    \"use strict\";\n    var builder, defaults, parser, processors, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    defaults = __webpack_require__(/*! ./defaults */ \"(ssr)/./node_modules/xml2js/lib/defaults.js\");\n    builder = __webpack_require__(/*! ./builder */ \"(ssr)/./node_modules/xml2js/lib/builder.js\");\n    parser = __webpack_require__(/*! ./parser */ \"(ssr)/./node_modules/xml2js/lib/parser.js\");\n    processors = __webpack_require__(/*! ./processors */ \"(ssr)/./node_modules/xml2js/lib/processors.js\");\n    exports.defaults = defaults.defaults;\n    exports.processors = processors;\n    exports.ValidationError = function(superClass) {\n        extend(ValidationError, superClass);\n        function ValidationError(message) {\n            this.message = message;\n        }\n        return ValidationError;\n    }(Error);\n    exports.Builder = builder.Builder;\n    exports.Parser = parser.Parser;\n    exports.parseString = parser.parseString;\n    exports.parseStringPromise = parser.parseStringPromise;\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveG1sMmpzL2xpYi94bWwyanMuanMiLCJtYXBwaW5ncyI6IkFBQUEsbUNBQW1DO0FBQ2xDO0lBQ0M7SUFDQSxJQUFJQSxTQUFTQyxVQUFVQyxRQUFRQyxZQUM3QkMsU0FBUyxTQUFTQyxLQUFLLEVBQUVDLE1BQU07UUFBSSxJQUFLLElBQUlDLE9BQU9ELE9BQVE7WUFBRSxJQUFJRSxRQUFRQyxJQUFJLENBQUNILFFBQVFDLE1BQU1GLEtBQUssQ0FBQ0UsSUFBSSxHQUFHRCxNQUFNLENBQUNDLElBQUk7UUFBRTtRQUFFLFNBQVNHO1lBQVMsSUFBSSxDQUFDQyxXQUFXLEdBQUdOO1FBQU87UUFBRUssS0FBS0UsU0FBUyxHQUFHTixPQUFPTSxTQUFTO1FBQUVQLE1BQU1PLFNBQVMsR0FBRyxJQUFJRjtRQUFRTCxNQUFNUSxTQUFTLEdBQUdQLE9BQU9NLFNBQVM7UUFBRSxPQUFPUDtJQUFPLEdBQ3pSRyxVQUFVLENBQUMsRUFBRU0sY0FBYztJQUU3QmIsV0FBV2MsbUJBQU9BLENBQUM7SUFFbkJmLFVBQVVlLG1CQUFPQSxDQUFDO0lBRWxCYixTQUFTYSxtQkFBT0EsQ0FBQztJQUVqQlosYUFBYVksbUJBQU9BLENBQUM7SUFFckJDLGdCQUFnQixHQUFHZixTQUFTQSxRQUFRO0lBRXBDZSxrQkFBa0IsR0FBR2I7SUFFckJhLHVCQUF1QixHQUFHLFNBQVVFLFVBQVU7UUFDNUNkLE9BQU9hLGlCQUFpQkM7UUFFeEIsU0FBU0QsZ0JBQWdCRSxPQUFPO1lBQzlCLElBQUksQ0FBQ0EsT0FBTyxHQUFHQTtRQUNqQjtRQUVBLE9BQU9GO0lBRVQsRUFBR0c7SUFFSEosZUFBZSxHQUFHaEIsUUFBUXFCLE9BQU87SUFFakNMLGNBQWMsR0FBR2QsT0FBT29CLE1BQU07SUFFOUJOLG1CQUFtQixHQUFHZCxPQUFPcUIsV0FBVztJQUV4Q1AsMEJBQTBCLEdBQUdkLE9BQU9zQixrQkFBa0I7QUFFeEQsR0FBR2YsSUFBSSxDQUFDLElBQUkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcHR4LW9wdGltaXplci8uL25vZGVfbW9kdWxlcy94bWwyanMvbGliL3htbDJqcy5qcz9lOTJlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICB2YXIgYnVpbGRlciwgZGVmYXVsdHMsIHBhcnNlciwgcHJvY2Vzc29ycyxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4gIGJ1aWxkZXIgPSByZXF1aXJlKCcuL2J1aWxkZXInKTtcblxuICBwYXJzZXIgPSByZXF1aXJlKCcuL3BhcnNlcicpO1xuXG4gIHByb2Nlc3NvcnMgPSByZXF1aXJlKCcuL3Byb2Nlc3NvcnMnKTtcblxuICBleHBvcnRzLmRlZmF1bHRzID0gZGVmYXVsdHMuZGVmYXVsdHM7XG5cbiAgZXhwb3J0cy5wcm9jZXNzb3JzID0gcHJvY2Vzc29ycztcblxuICBleHBvcnRzLlZhbGlkYXRpb25FcnJvciA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFZhbGlkYXRpb25FcnJvciwgc3VwZXJDbGFzcyk7XG5cbiAgICBmdW5jdGlvbiBWYWxpZGF0aW9uRXJyb3IobWVzc2FnZSkge1xuICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICB9XG5cbiAgICByZXR1cm4gVmFsaWRhdGlvbkVycm9yO1xuXG4gIH0pKEVycm9yKTtcblxuICBleHBvcnRzLkJ1aWxkZXIgPSBidWlsZGVyLkJ1aWxkZXI7XG5cbiAgZXhwb3J0cy5QYXJzZXIgPSBwYXJzZXIuUGFyc2VyO1xuXG4gIGV4cG9ydHMucGFyc2VTdHJpbmcgPSBwYXJzZXIucGFyc2VTdHJpbmc7XG5cbiAgZXhwb3J0cy5wYXJzZVN0cmluZ1Byb21pc2UgPSBwYXJzZXIucGFyc2VTdHJpbmdQcm9taXNlO1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm5hbWVzIjpbImJ1aWxkZXIiLCJkZWZhdWx0cyIsInBhcnNlciIsInByb2Nlc3NvcnMiLCJleHRlbmQiLCJjaGlsZCIsInBhcmVudCIsImtleSIsImhhc1Byb3AiLCJjYWxsIiwiY3RvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiX19zdXBlcl9fIiwiaGFzT3duUHJvcGVydHkiLCJyZXF1aXJlIiwiZXhwb3J0cyIsIlZhbGlkYXRpb25FcnJvciIsInN1cGVyQ2xhc3MiLCJtZXNzYWdlIiwiRXJyb3IiLCJCdWlsZGVyIiwiUGFyc2VyIiwicGFyc2VTdHJpbmciLCJwYXJzZVN0cmluZ1Byb21pc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/lib/xml2js.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/DocumentPosition.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/xml2js/node_modules/xmlbuilder/lib/DocumentPosition.js ***!
  \*****************************************************************************/
/***/ (function(module) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    module.exports = {\n        Disconnected: 1,\n        Preceding: 2,\n        Following: 4,\n        Contains: 8,\n        ContainedBy: 16,\n        ImplementationSpecific: 32\n    };\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcHR4LW9wdGltaXplci8uL25vZGVfbW9kdWxlcy94bWwyanMvbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL0RvY3VtZW50UG9zaXRpb24uanM/OWNkYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBEaXNjb25uZWN0ZWQ6IDEsXG4gICAgUHJlY2VkaW5nOiAyLFxuICAgIEZvbGxvd2luZzogNCxcbiAgICBDb250YWluczogOCxcbiAgICBDb250YWluZWRCeTogMTYsXG4gICAgSW1wbGVtZW50YXRpb25TcGVjaWZpYzogMzJcbiAgfTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiRGlzY29ubmVjdGVkIiwiUHJlY2VkaW5nIiwiRm9sbG93aW5nIiwiQ29udGFpbnMiLCJDb250YWluZWRCeSIsIkltcGxlbWVudGF0aW9uU3BlY2lmaWMiLCJjYWxsIl0sIm1hcHBpbmdzIjoiQUFBQSxtQ0FBbUM7QUFDbEMsQ0FBQTtJQUNDQSxPQUFPQyxPQUFPLEdBQUc7UUFDZkMsY0FBYztRQUNkQyxXQUFXO1FBQ1hDLFdBQVc7UUFDWEMsVUFBVTtRQUNWQyxhQUFhO1FBQ2JDLHdCQUF3QjtJQUMxQjtBQUVGLENBQUEsRUFBR0MsSUFBSSxDQUFDLElBQUkiLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveG1sMmpzL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9Eb2N1bWVudFBvc2l0aW9uLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/DocumentPosition.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/NodeType.js":
/*!*********************************************************************!*\
  !*** ./node_modules/xml2js/node_modules/xmlbuilder/lib/NodeType.js ***!
  \*********************************************************************/
/***/ (function(module) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    module.exports = {\n        Element: 1,\n        Attribute: 2,\n        Text: 3,\n        CData: 4,\n        EntityReference: 5,\n        EntityDeclaration: 6,\n        ProcessingInstruction: 7,\n        Comment: 8,\n        Document: 9,\n        DocType: 10,\n        DocumentFragment: 11,\n        NotationDeclaration: 12,\n        Declaration: 201,\n        Raw: 202,\n        AttributeDeclaration: 203,\n        ElementDeclaration: 204,\n        Dummy: 205\n    };\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcHR4LW9wdGltaXplci8uL25vZGVfbW9kdWxlcy94bWwyanMvbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL05vZGVUeXBlLmpzPzU4ZWYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgRWxlbWVudDogMSxcbiAgICBBdHRyaWJ1dGU6IDIsXG4gICAgVGV4dDogMyxcbiAgICBDRGF0YTogNCxcbiAgICBFbnRpdHlSZWZlcmVuY2U6IDUsXG4gICAgRW50aXR5RGVjbGFyYXRpb246IDYsXG4gICAgUHJvY2Vzc2luZ0luc3RydWN0aW9uOiA3LFxuICAgIENvbW1lbnQ6IDgsXG4gICAgRG9jdW1lbnQ6IDksXG4gICAgRG9jVHlwZTogMTAsXG4gICAgRG9jdW1lbnRGcmFnbWVudDogMTEsXG4gICAgTm90YXRpb25EZWNsYXJhdGlvbjogMTIsXG4gICAgRGVjbGFyYXRpb246IDIwMSxcbiAgICBSYXc6IDIwMixcbiAgICBBdHRyaWJ1dGVEZWNsYXJhdGlvbjogMjAzLFxuICAgIEVsZW1lbnREZWNsYXJhdGlvbjogMjA0LFxuICAgIER1bW15OiAyMDVcbiAgfTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiRWxlbWVudCIsIkF0dHJpYnV0ZSIsIlRleHQiLCJDRGF0YSIsIkVudGl0eVJlZmVyZW5jZSIsIkVudGl0eURlY2xhcmF0aW9uIiwiUHJvY2Vzc2luZ0luc3RydWN0aW9uIiwiQ29tbWVudCIsIkRvY3VtZW50IiwiRG9jVHlwZSIsIkRvY3VtZW50RnJhZ21lbnQiLCJOb3RhdGlvbkRlY2xhcmF0aW9uIiwiRGVjbGFyYXRpb24iLCJSYXciLCJBdHRyaWJ1dGVEZWNsYXJhdGlvbiIsIkVsZW1lbnREZWNsYXJhdGlvbiIsIkR1bW15IiwiY2FsbCJdLCJtYXBwaW5ncyI6IkFBQUEsbUNBQW1DO0FBQ2xDLENBQUE7SUFDQ0EsT0FBT0MsT0FBTyxHQUFHO1FBQ2ZDLFNBQVM7UUFDVEMsV0FBVztRQUNYQyxNQUFNO1FBQ05DLE9BQU87UUFDUEMsaUJBQWlCO1FBQ2pCQyxtQkFBbUI7UUFDbkJDLHVCQUF1QjtRQUN2QkMsU0FBUztRQUNUQyxVQUFVO1FBQ1ZDLFNBQVM7UUFDVEMsa0JBQWtCO1FBQ2xCQyxxQkFBcUI7UUFDckJDLGFBQWE7UUFDYkMsS0FBSztRQUNMQyxzQkFBc0I7UUFDdEJDLG9CQUFvQjtRQUNwQkMsT0FBTztJQUNUO0FBRUYsQ0FBQSxFQUFHQyxJQUFJLENBQUMsSUFBSSIsImZpbGUiOiIoc3NyKS8uL25vZGVfbW9kdWxlcy94bWwyanMvbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL05vZGVUeXBlLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/NodeType.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/Utility.js":
/*!********************************************************************!*\
  !*** ./node_modules/xml2js/node_modules/xmlbuilder/lib/Utility.js ***!
  \********************************************************************/
/***/ (function(module) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    var assign, getValue, isArray, isEmpty, isFunction, isObject, isPlainObject, slice = [].slice, hasProp = {}.hasOwnProperty;\n    assign = function() {\n        var i, key, len, source, sources, target;\n        target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n        if (isFunction(Object.assign)) {\n            Object.assign.apply(null, arguments);\n        } else {\n            for(i = 0, len = sources.length; i < len; i++){\n                source = sources[i];\n                if (source != null) {\n                    for(key in source){\n                        if (!hasProp.call(source, key)) continue;\n                        target[key] = source[key];\n                    }\n                }\n            }\n        }\n        return target;\n    };\n    isFunction = function(val) {\n        return !!val && Object.prototype.toString.call(val) === \"[object Function]\";\n    };\n    isObject = function(val) {\n        var ref;\n        return !!val && ((ref = typeof val) === \"function\" || ref === \"object\");\n    };\n    isArray = function(val) {\n        if (isFunction(Array.isArray)) {\n            return Array.isArray(val);\n        } else {\n            return Object.prototype.toString.call(val) === \"[object Array]\";\n        }\n    };\n    isEmpty = function(val) {\n        var key;\n        if (isArray(val)) {\n            return !val.length;\n        } else {\n            for(key in val){\n                if (!hasProp.call(val, key)) continue;\n                return false;\n            }\n            return true;\n        }\n    };\n    isPlainObject = function(val) {\n        var ctor, proto;\n        return isObject(val) && (proto = Object.getPrototypeOf(val)) && (ctor = proto.constructor) && typeof ctor === \"function\" && ctor instanceof ctor && Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object);\n    };\n    getValue = function(obj) {\n        if (isFunction(obj.valueOf)) {\n            return obj.valueOf();\n        } else {\n            return obj;\n        }\n    };\n    module.exports.assign = assign;\n    module.exports.isFunction = isFunction;\n    module.exports.isObject = isObject;\n    module.exports.isArray = isArray;\n    module.exports.isEmpty = isEmpty;\n    module.exports.isPlainObject = isPlainObject;\n    module.exports.getValue = getValue;\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveG1sMmpzL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9VdGlsaXR5LmpzIiwibWFwcGluZ3MiOiJBQUFBLG1DQUFtQztBQUNsQztJQUNDLElBQUlBLFFBQVFDLFVBQVVDLFNBQVNDLFNBQVNDLFlBQVlDLFVBQVVDLGVBQzVEQyxRQUFRLEVBQUUsQ0FBQ0EsS0FBSyxFQUNoQkMsVUFBVSxDQUFDLEVBQUVDLGNBQWM7SUFFN0JULFNBQVM7UUFDUCxJQUFJVSxHQUFHQyxLQUFLQyxLQUFLQyxRQUFRQyxTQUFTQztRQUNsQ0EsU0FBU0MsU0FBUyxDQUFDLEVBQUUsRUFBRUYsVUFBVSxLQUFLRSxVQUFVQyxNQUFNLEdBQUdWLE1BQU1XLElBQUksQ0FBQ0YsV0FBVyxLQUFLLEVBQUU7UUFDdEYsSUFBSVosV0FBV2UsT0FBT25CLE1BQU0sR0FBRztZQUM3Qm1CLE9BQU9uQixNQUFNLENBQUNvQixLQUFLLENBQUMsTUFBTUo7UUFDNUIsT0FBTztZQUNMLElBQUtOLElBQUksR0FBR0UsTUFBTUUsUUFBUUcsTUFBTSxFQUFFUCxJQUFJRSxLQUFLRixJQUFLO2dCQUM5Q0csU0FBU0MsT0FBTyxDQUFDSixFQUFFO2dCQUNuQixJQUFJRyxVQUFVLE1BQU07b0JBQ2xCLElBQUtGLE9BQU9FLE9BQVE7d0JBQ2xCLElBQUksQ0FBQ0wsUUFBUVUsSUFBSSxDQUFDTCxRQUFRRixNQUFNO3dCQUNoQ0ksTUFBTSxDQUFDSixJQUFJLEdBQUdFLE1BQU0sQ0FBQ0YsSUFBSTtvQkFDM0I7Z0JBQ0Y7WUFDRjtRQUNGO1FBQ0EsT0FBT0k7SUFDVDtJQUVBWCxhQUFhLFNBQVNpQixHQUFHO1FBQ3ZCLE9BQU8sQ0FBQyxDQUFDQSxPQUFPRixPQUFPRyxTQUFTLENBQUNDLFFBQVEsQ0FBQ0wsSUFBSSxDQUFDRyxTQUFTO0lBQzFEO0lBRUFoQixXQUFXLFNBQVNnQixHQUFHO1FBQ3JCLElBQUlHO1FBQ0osT0FBTyxDQUFDLENBQUNILE9BQVEsRUFBQ0csTUFBTSxPQUFPSCxHQUFFLE1BQU8sY0FBY0csUUFBUSxRQUFPO0lBQ3ZFO0lBRUF0QixVQUFVLFNBQVNtQixHQUFHO1FBQ3BCLElBQUlqQixXQUFXcUIsTUFBTXZCLE9BQU8sR0FBRztZQUM3QixPQUFPdUIsTUFBTXZCLE9BQU8sQ0FBQ21CO1FBQ3ZCLE9BQU87WUFDTCxPQUFPRixPQUFPRyxTQUFTLENBQUNDLFFBQVEsQ0FBQ0wsSUFBSSxDQUFDRyxTQUFTO1FBQ2pEO0lBQ0Y7SUFFQWxCLFVBQVUsU0FBU2tCLEdBQUc7UUFDcEIsSUFBSVY7UUFDSixJQUFJVCxRQUFRbUIsTUFBTTtZQUNoQixPQUFPLENBQUNBLElBQUlKLE1BQU07UUFDcEIsT0FBTztZQUNMLElBQUtOLE9BQU9VLElBQUs7Z0JBQ2YsSUFBSSxDQUFDYixRQUFRVSxJQUFJLENBQUNHLEtBQUtWLE1BQU07Z0JBQzdCLE9BQU87WUFDVDtZQUNBLE9BQU87UUFDVDtJQUNGO0lBRUFMLGdCQUFnQixTQUFTZSxHQUFHO1FBQzFCLElBQUlLLE1BQU1DO1FBQ1YsT0FBT3RCLFNBQVNnQixRQUFTTSxDQUFBQSxRQUFRUixPQUFPUyxjQUFjLENBQUNQLElBQUcsS0FBT0ssQ0FBQUEsT0FBT0MsTUFBTUUsV0FBVyxLQUFNLE9BQU9ILFNBQVMsY0FBZ0JBLGdCQUFnQkEsUUFBVUksU0FBU1IsU0FBUyxDQUFDQyxRQUFRLENBQUNMLElBQUksQ0FBQ1EsVUFBVUksU0FBU1IsU0FBUyxDQUFDQyxRQUFRLENBQUNMLElBQUksQ0FBQ0M7SUFDdk87SUFFQWxCLFdBQVcsU0FBUzhCLEdBQUc7UUFDckIsSUFBSTNCLFdBQVcyQixJQUFJQyxPQUFPLEdBQUc7WUFDM0IsT0FBT0QsSUFBSUMsT0FBTztRQUNwQixPQUFPO1lBQ0wsT0FBT0Q7UUFDVDtJQUNGO0lBRUFFLHFCQUFxQixHQUFHakM7SUFFeEJpQyx5QkFBeUIsR0FBRzdCO0lBRTVCNkIsdUJBQXVCLEdBQUc1QjtJQUUxQjRCLHNCQUFzQixHQUFHL0I7SUFFekIrQixzQkFBc0IsR0FBRzlCO0lBRXpCOEIsNEJBQTRCLEdBQUczQjtJQUUvQjJCLHVCQUF1QixHQUFHaEM7QUFFNUIsR0FBR2lCLElBQUksQ0FBQyxJQUFJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHB0eC1vcHRpbWl6ZXIvLi9ub2RlX21vZHVsZXMveG1sMmpzL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9VdGlsaXR5LmpzPzJlYzAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIGFzc2lnbiwgZ2V0VmFsdWUsIGlzQXJyYXksIGlzRW1wdHksIGlzRnVuY3Rpb24sIGlzT2JqZWN0LCBpc1BsYWluT2JqZWN0LFxuICAgIHNsaWNlID0gW10uc2xpY2UsXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIGFzc2lnbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpLCBrZXksIGxlbiwgc291cmNlLCBzb3VyY2VzLCB0YXJnZXQ7XG4gICAgdGFyZ2V0ID0gYXJndW1lbnRzWzBdLCBzb3VyY2VzID0gMiA8PSBhcmd1bWVudHMubGVuZ3RoID8gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpIDogW107XG4gICAgaWYgKGlzRnVuY3Rpb24oT2JqZWN0LmFzc2lnbikpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMCwgbGVuID0gc291cmNlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBzb3VyY2UgPSBzb3VyY2VzW2ldO1xuICAgICAgICBpZiAoc291cmNlICE9IG51bGwpIHtcbiAgICAgICAgICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgIGlmICghaGFzUHJvcC5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7XG4gICAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIGlzRnVuY3Rpb24gPSBmdW5jdGlvbih2YWwpIHtcbiAgICByZXR1cm4gISF2YWwgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG4gIH07XG5cbiAgaXNPYmplY3QgPSBmdW5jdGlvbih2YWwpIHtcbiAgICB2YXIgcmVmO1xuICAgIHJldHVybiAhIXZhbCAmJiAoKHJlZiA9IHR5cGVvZiB2YWwpID09PSAnZnVuY3Rpb24nIHx8IHJlZiA9PT0gJ29iamVjdCcpO1xuICB9O1xuXG4gIGlzQXJyYXkgPSBmdW5jdGlvbih2YWwpIHtcbiAgICBpZiAoaXNGdW5jdGlvbihBcnJheS5pc0FycmF5KSkge1xuICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xuICAgIH1cbiAgfTtcblxuICBpc0VtcHR5ID0gZnVuY3Rpb24odmFsKSB7XG4gICAgdmFyIGtleTtcbiAgICBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICByZXR1cm4gIXZhbC5sZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoa2V5IGluIHZhbCkge1xuICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbCh2YWwsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH07XG5cbiAgaXNQbGFpbk9iamVjdCA9IGZ1bmN0aW9uKHZhbCkge1xuICAgIHZhciBjdG9yLCBwcm90bztcbiAgICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiAocHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsKSkgJiYgKGN0b3IgPSBwcm90by5jb25zdHJ1Y3RvcikgJiYgKHR5cGVvZiBjdG9yID09PSAnZnVuY3Rpb24nKSAmJiAoY3RvciBpbnN0YW5jZW9mIGN0b3IpICYmIChGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChjdG9yKSA9PT0gRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoT2JqZWN0KSk7XG4gIH07XG5cbiAgZ2V0VmFsdWUgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoaXNGdW5jdGlvbihvYmoudmFsdWVPZikpIHtcbiAgICAgIHJldHVybiBvYmoudmFsdWVPZigpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgfTtcblxuICBtb2R1bGUuZXhwb3J0cy5hc3NpZ24gPSBhc3NpZ247XG5cbiAgbW9kdWxlLmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cbiAgbW9kdWxlLmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcblxuICBtb2R1bGUuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcblxuICBtb2R1bGUuZXhwb3J0cy5pc0VtcHR5ID0gaXNFbXB0eTtcblxuICBtb2R1bGUuZXhwb3J0cy5pc1BsYWluT2JqZWN0ID0gaXNQbGFpbk9iamVjdDtcblxuICBtb2R1bGUuZXhwb3J0cy5nZXRWYWx1ZSA9IGdldFZhbHVlO1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm5hbWVzIjpbImFzc2lnbiIsImdldFZhbHVlIiwiaXNBcnJheSIsImlzRW1wdHkiLCJpc0Z1bmN0aW9uIiwiaXNPYmplY3QiLCJpc1BsYWluT2JqZWN0Iiwic2xpY2UiLCJoYXNQcm9wIiwiaGFzT3duUHJvcGVydHkiLCJpIiwia2V5IiwibGVuIiwic291cmNlIiwic291cmNlcyIsInRhcmdldCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImNhbGwiLCJPYmplY3QiLCJhcHBseSIsInZhbCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwicmVmIiwiQXJyYXkiLCJjdG9yIiwicHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsImNvbnN0cnVjdG9yIiwiRnVuY3Rpb24iLCJvYmoiLCJ2YWx1ZU9mIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/Utility.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/WriterState.js":
/*!************************************************************************!*\
  !*** ./node_modules/xml2js/node_modules/xmlbuilder/lib/WriterState.js ***!
  \************************************************************************/
/***/ (function(module) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    module.exports = {\n        None: 0,\n        OpenTag: 1,\n        InsideTag: 2,\n        CloseTag: 3\n    };\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcHR4LW9wdGltaXplci8uL25vZGVfbW9kdWxlcy94bWwyanMvbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1dyaXRlclN0YXRlLmpzP2JjOWEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgTm9uZTogMCxcbiAgICBPcGVuVGFnOiAxLFxuICAgIEluc2lkZVRhZzogMixcbiAgICBDbG9zZVRhZzogM1xuICB9O1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJOb25lIiwiT3BlblRhZyIsIkluc2lkZVRhZyIsIkNsb3NlVGFnIiwiY2FsbCJdLCJtYXBwaW5ncyI6IkFBQUEsbUNBQW1DO0FBQ2xDLENBQUE7SUFDQ0EsT0FBT0MsT0FBTyxHQUFHO1FBQ2ZDLE1BQU07UUFDTkMsU0FBUztRQUNUQyxXQUFXO1FBQ1hDLFVBQVU7SUFDWjtBQUVGLENBQUEsRUFBR0MsSUFBSSxDQUFDLElBQUkiLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveG1sMmpzL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9Xcml0ZXJTdGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/WriterState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLAttribute.js":
/*!*************************************************************************!*\
  !*** ./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLAttribute.js ***!
  \*************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, XMLAttribute, XMLNode;\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLNode.js\");\n    module.exports = XMLAttribute = function() {\n        function XMLAttribute(parent, name, value) {\n            this.parent = parent;\n            if (this.parent) {\n                this.options = this.parent.options;\n                this.stringify = this.parent.stringify;\n            }\n            if (name == null) {\n                throw new Error(\"Missing attribute name. \" + this.debugInfo(name));\n            }\n            this.name = this.stringify.name(name);\n            this.value = this.stringify.attValue(value);\n            this.type = NodeType.Attribute;\n            this.isId = false;\n            this.schemaTypeInfo = null;\n        }\n        Object.defineProperty(XMLAttribute.prototype, \"nodeType\", {\n            get: function() {\n                return this.type;\n            }\n        });\n        Object.defineProperty(XMLAttribute.prototype, \"ownerElement\", {\n            get: function() {\n                return this.parent;\n            }\n        });\n        Object.defineProperty(XMLAttribute.prototype, \"textContent\", {\n            get: function() {\n                return this.value;\n            },\n            set: function(value) {\n                return this.value = value || \"\";\n            }\n        });\n        Object.defineProperty(XMLAttribute.prototype, \"namespaceURI\", {\n            get: function() {\n                return \"\";\n            }\n        });\n        Object.defineProperty(XMLAttribute.prototype, \"prefix\", {\n            get: function() {\n                return \"\";\n            }\n        });\n        Object.defineProperty(XMLAttribute.prototype, \"localName\", {\n            get: function() {\n                return this.name;\n            }\n        });\n        Object.defineProperty(XMLAttribute.prototype, \"specified\", {\n            get: function() {\n                return true;\n            }\n        });\n        XMLAttribute.prototype.clone = function() {\n            return Object.create(this);\n        };\n        XMLAttribute.prototype.toString = function(options) {\n            return this.options.writer.attribute(this, this.options.writer.filterOptions(options));\n        };\n        XMLAttribute.prototype.debugInfo = function(name) {\n            name = name || this.name;\n            if (name == null) {\n                return \"parent: <\" + this.parent.name + \">\";\n            } else {\n                return \"attribute: {\" + name + \"}, parent: <\" + this.parent.name + \">\";\n            }\n        };\n        XMLAttribute.prototype.isEqualNode = function(node) {\n            if (node.namespaceURI !== this.namespaceURI) {\n                return false;\n            }\n            if (node.prefix !== this.prefix) {\n                return false;\n            }\n            if (node.localName !== this.localName) {\n                return false;\n            }\n            if (node.value !== this.value) {\n                return false;\n            }\n            return true;\n        };\n        return XMLAttribute;\n    }();\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveG1sMmpzL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxBdHRyaWJ1dGUuanMiLCJtYXBwaW5ncyI6IkFBQUEsbUNBQW1DO0FBQ2xDO0lBQ0MsSUFBSUEsVUFBVUMsY0FBY0M7SUFFNUJGLFdBQVdHLG1CQUFPQSxDQUFDO0lBRW5CRCxVQUFVQyxtQkFBT0EsQ0FBQztJQUVsQkMsT0FBT0MsT0FBTyxHQUFHSixlQUFlO1FBQzlCLFNBQVNBLGFBQWFLLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxLQUFLO1lBQ3ZDLElBQUksQ0FBQ0YsTUFBTSxHQUFHQTtZQUNkLElBQUksSUFBSSxDQUFDQSxNQUFNLEVBQUU7Z0JBQ2YsSUFBSSxDQUFDRyxPQUFPLEdBQUcsSUFBSSxDQUFDSCxNQUFNLENBQUNHLE9BQU87Z0JBQ2xDLElBQUksQ0FBQ0MsU0FBUyxHQUFHLElBQUksQ0FBQ0osTUFBTSxDQUFDSSxTQUFTO1lBQ3hDO1lBQ0EsSUFBSUgsUUFBUSxNQUFNO2dCQUNoQixNQUFNLElBQUlJLE1BQU0sNkJBQTZCLElBQUksQ0FBQ0MsU0FBUyxDQUFDTDtZQUM5RDtZQUNBLElBQUksQ0FBQ0EsSUFBSSxHQUFHLElBQUksQ0FBQ0csU0FBUyxDQUFDSCxJQUFJLENBQUNBO1lBQ2hDLElBQUksQ0FBQ0MsS0FBSyxHQUFHLElBQUksQ0FBQ0UsU0FBUyxDQUFDRyxRQUFRLENBQUNMO1lBQ3JDLElBQUksQ0FBQ00sSUFBSSxHQUFHZCxTQUFTZSxTQUFTO1lBQzlCLElBQUksQ0FBQ0MsSUFBSSxHQUFHO1lBQ1osSUFBSSxDQUFDQyxjQUFjLEdBQUc7UUFDeEI7UUFFQUMsT0FBT0MsY0FBYyxDQUFDbEIsYUFBYW1CLFNBQVMsRUFBRSxZQUFZO1lBQ3hEQyxLQUFLO2dCQUNILE9BQU8sSUFBSSxDQUFDUCxJQUFJO1lBQ2xCO1FBQ0Y7UUFFQUksT0FBT0MsY0FBYyxDQUFDbEIsYUFBYW1CLFNBQVMsRUFBRSxnQkFBZ0I7WUFDNURDLEtBQUs7Z0JBQ0gsT0FBTyxJQUFJLENBQUNmLE1BQU07WUFDcEI7UUFDRjtRQUVBWSxPQUFPQyxjQUFjLENBQUNsQixhQUFhbUIsU0FBUyxFQUFFLGVBQWU7WUFDM0RDLEtBQUs7Z0JBQ0gsT0FBTyxJQUFJLENBQUNiLEtBQUs7WUFDbkI7WUFDQWMsS0FBSyxTQUFTZCxLQUFLO2dCQUNqQixPQUFPLElBQUksQ0FBQ0EsS0FBSyxHQUFHQSxTQUFTO1lBQy9CO1FBQ0Y7UUFFQVUsT0FBT0MsY0FBYyxDQUFDbEIsYUFBYW1CLFNBQVMsRUFBRSxnQkFBZ0I7WUFDNURDLEtBQUs7Z0JBQ0gsT0FBTztZQUNUO1FBQ0Y7UUFFQUgsT0FBT0MsY0FBYyxDQUFDbEIsYUFBYW1CLFNBQVMsRUFBRSxVQUFVO1lBQ3REQyxLQUFLO2dCQUNILE9BQU87WUFDVDtRQUNGO1FBRUFILE9BQU9DLGNBQWMsQ0FBQ2xCLGFBQWFtQixTQUFTLEVBQUUsYUFBYTtZQUN6REMsS0FBSztnQkFDSCxPQUFPLElBQUksQ0FBQ2QsSUFBSTtZQUNsQjtRQUNGO1FBRUFXLE9BQU9DLGNBQWMsQ0FBQ2xCLGFBQWFtQixTQUFTLEVBQUUsYUFBYTtZQUN6REMsS0FBSztnQkFDSCxPQUFPO1lBQ1Q7UUFDRjtRQUVBcEIsYUFBYW1CLFNBQVMsQ0FBQ0csS0FBSyxHQUFHO1lBQzdCLE9BQU9MLE9BQU9NLE1BQU0sQ0FBQyxJQUFJO1FBQzNCO1FBRUF2QixhQUFhbUIsU0FBUyxDQUFDSyxRQUFRLEdBQUcsU0FBU2hCLE9BQU87WUFDaEQsT0FBTyxJQUFJLENBQUNBLE9BQU8sQ0FBQ2lCLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUNsQixPQUFPLENBQUNpQixNQUFNLENBQUNFLGFBQWEsQ0FBQ25CO1FBQy9FO1FBRUFSLGFBQWFtQixTQUFTLENBQUNSLFNBQVMsR0FBRyxTQUFTTCxJQUFJO1lBQzlDQSxPQUFPQSxRQUFRLElBQUksQ0FBQ0EsSUFBSTtZQUN4QixJQUFJQSxRQUFRLE1BQU07Z0JBQ2hCLE9BQU8sY0FBYyxJQUFJLENBQUNELE1BQU0sQ0FBQ0MsSUFBSSxHQUFHO1lBQzFDLE9BQU87Z0JBQ0wsT0FBTyxpQkFBaUJBLE9BQU8saUJBQWlCLElBQUksQ0FBQ0QsTUFBTSxDQUFDQyxJQUFJLEdBQUc7WUFDckU7UUFDRjtRQUVBTixhQUFhbUIsU0FBUyxDQUFDUyxXQUFXLEdBQUcsU0FBU0MsSUFBSTtZQUNoRCxJQUFJQSxLQUFLQyxZQUFZLEtBQUssSUFBSSxDQUFDQSxZQUFZLEVBQUU7Z0JBQzNDLE9BQU87WUFDVDtZQUNBLElBQUlELEtBQUtFLE1BQU0sS0FBSyxJQUFJLENBQUNBLE1BQU0sRUFBRTtnQkFDL0IsT0FBTztZQUNUO1lBQ0EsSUFBSUYsS0FBS0csU0FBUyxLQUFLLElBQUksQ0FBQ0EsU0FBUyxFQUFFO2dCQUNyQyxPQUFPO1lBQ1Q7WUFDQSxJQUFJSCxLQUFLdEIsS0FBSyxLQUFLLElBQUksQ0FBQ0EsS0FBSyxFQUFFO2dCQUM3QixPQUFPO1lBQ1Q7WUFDQSxPQUFPO1FBQ1Q7UUFFQSxPQUFPUDtJQUVUO0FBRUYsR0FBR2lDLElBQUksQ0FBQyxJQUFJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHB0eC1vcHRpbWl6ZXIvLi9ub2RlX21vZHVsZXMveG1sMmpzL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxBdHRyaWJ1dGUuanM/YjAzMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgTm9kZVR5cGUsIFhNTEF0dHJpYnV0ZSwgWE1MTm9kZTtcblxuICBOb2RlVHlwZSA9IHJlcXVpcmUoJy4vTm9kZVR5cGUnKTtcblxuICBYTUxOb2RlID0gcmVxdWlyZSgnLi9YTUxOb2RlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxBdHRyaWJ1dGUgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gWE1MQXR0cmlidXRlKHBhcmVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgaWYgKHRoaXMucGFyZW50KSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHRoaXMucGFyZW50Lm9wdGlvbnM7XG4gICAgICAgIHRoaXMuc3RyaW5naWZ5ID0gdGhpcy5wYXJlbnQuc3RyaW5naWZ5O1xuICAgICAgfVxuICAgICAgaWYgKG5hbWUgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIGF0dHJpYnV0ZSBuYW1lLiBcIiArIHRoaXMuZGVidWdJbmZvKG5hbWUpKTtcbiAgICAgIH1cbiAgICAgIHRoaXMubmFtZSA9IHRoaXMuc3RyaW5naWZ5Lm5hbWUobmFtZSk7XG4gICAgICB0aGlzLnZhbHVlID0gdGhpcy5zdHJpbmdpZnkuYXR0VmFsdWUodmFsdWUpO1xuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuQXR0cmlidXRlO1xuICAgICAgdGhpcy5pc0lkID0gZmFsc2U7XG4gICAgICB0aGlzLnNjaGVtYVR5cGVJbmZvID0gbnVsbDtcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MQXR0cmlidXRlLnByb3RvdHlwZSwgJ25vZGVUeXBlJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxBdHRyaWJ1dGUucHJvdG90eXBlLCAnb3duZXJFbGVtZW50Jywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTEF0dHJpYnV0ZS5wcm90b3R5cGUsICd0ZXh0Q29udGVudCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUgPSB2YWx1ZSB8fCAnJztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxBdHRyaWJ1dGUucHJvdG90eXBlLCAnbmFtZXNwYWNlVVJJJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTEF0dHJpYnV0ZS5wcm90b3R5cGUsICdwcmVmaXgnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MQXR0cmlidXRlLnByb3RvdHlwZSwgJ2xvY2FsTmFtZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MQXR0cmlidXRlLnByb3RvdHlwZSwgJ3NwZWNpZmllZCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgWE1MQXR0cmlidXRlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5jcmVhdGUodGhpcyk7XG4gICAgfTtcblxuICAgIFhNTEF0dHJpYnV0ZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5hdHRyaWJ1dGUodGhpcywgdGhpcy5vcHRpb25zLndyaXRlci5maWx0ZXJPcHRpb25zKG9wdGlvbnMpKTtcbiAgICB9O1xuXG4gICAgWE1MQXR0cmlidXRlLnByb3RvdHlwZS5kZWJ1Z0luZm8gPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgICBuYW1lID0gbmFtZSB8fCB0aGlzLm5hbWU7XG4gICAgICBpZiAobmFtZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBcInBhcmVudDogPFwiICsgdGhpcy5wYXJlbnQubmFtZSArIFwiPlwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwiYXR0cmlidXRlOiB7XCIgKyBuYW1lICsgXCJ9LCBwYXJlbnQ6IDxcIiArIHRoaXMucGFyZW50Lm5hbWUgKyBcIj5cIjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgWE1MQXR0cmlidXRlLnByb3RvdHlwZS5pc0VxdWFsTm9kZSA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIGlmIChub2RlLm5hbWVzcGFjZVVSSSAhPT0gdGhpcy5uYW1lc3BhY2VVUkkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUucHJlZml4ICE9PSB0aGlzLnByZWZpeCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS5sb2NhbE5hbWUgIT09IHRoaXMubG9jYWxOYW1lKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlLnZhbHVlICE9PSB0aGlzLnZhbHVlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MQXR0cmlidXRlO1xuXG4gIH0pKCk7XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibmFtZXMiOlsiTm9kZVR5cGUiLCJYTUxBdHRyaWJ1dGUiLCJYTUxOb2RlIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJwYXJlbnQiLCJuYW1lIiwidmFsdWUiLCJvcHRpb25zIiwic3RyaW5naWZ5IiwiRXJyb3IiLCJkZWJ1Z0luZm8iLCJhdHRWYWx1ZSIsInR5cGUiLCJBdHRyaWJ1dGUiLCJpc0lkIiwic2NoZW1hVHlwZUluZm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInByb3RvdHlwZSIsImdldCIsInNldCIsImNsb25lIiwiY3JlYXRlIiwidG9TdHJpbmciLCJ3cml0ZXIiLCJhdHRyaWJ1dGUiLCJmaWx0ZXJPcHRpb25zIiwiaXNFcXVhbE5vZGUiLCJub2RlIiwibmFtZXNwYWNlVVJJIiwicHJlZml4IiwibG9jYWxOYW1lIiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLAttribute.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLCData.js":
/*!*********************************************************************!*\
  !*** ./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLCData.js ***!
  \*********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, XMLCData, XMLCharacterData, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLCharacterData = __webpack_require__(/*! ./XMLCharacterData */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLCharacterData.js\");\n    module.exports = XMLCData = function(superClass) {\n        extend(XMLCData, superClass);\n        function XMLCData(parent, text) {\n            XMLCData.__super__.constructor.call(this, parent);\n            if (text == null) {\n                throw new Error(\"Missing CDATA text. \" + this.debugInfo());\n            }\n            this.name = \"#cdata-section\";\n            this.type = NodeType.CData;\n            this.value = this.stringify.cdata(text);\n        }\n        XMLCData.prototype.clone = function() {\n            return Object.create(this);\n        };\n        XMLCData.prototype.toString = function(options) {\n            return this.options.writer.cdata(this, this.options.writer.filterOptions(options));\n        };\n        return XMLCData;\n    }(XMLCharacterData);\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveG1sMmpzL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxDRGF0YS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxtQ0FBbUM7QUFDbEM7SUFDQyxJQUFJQSxVQUFVQyxVQUFVQyxrQkFDdEJDLFNBQVMsU0FBU0MsS0FBSyxFQUFFQyxNQUFNO1FBQUksSUFBSyxJQUFJQyxPQUFPRCxPQUFRO1lBQUUsSUFBSUUsUUFBUUMsSUFBSSxDQUFDSCxRQUFRQyxNQUFNRixLQUFLLENBQUNFLElBQUksR0FBR0QsTUFBTSxDQUFDQyxJQUFJO1FBQUU7UUFBRSxTQUFTRztZQUFTLElBQUksQ0FBQ0MsV0FBVyxHQUFHTjtRQUFPO1FBQUVLLEtBQUtFLFNBQVMsR0FBR04sT0FBT00sU0FBUztRQUFFUCxNQUFNTyxTQUFTLEdBQUcsSUFBSUY7UUFBUUwsTUFBTVEsU0FBUyxHQUFHUCxPQUFPTSxTQUFTO1FBQUUsT0FBT1A7SUFBTyxHQUN6UkcsVUFBVSxDQUFDLEVBQUVNLGNBQWM7SUFFN0JiLFdBQVdjLG1CQUFPQSxDQUFDO0lBRW5CWixtQkFBbUJZLG1CQUFPQSxDQUFDO0lBRTNCQyxPQUFPQyxPQUFPLEdBQUdmLFdBQVcsU0FBVWdCLFVBQVU7UUFDOUNkLE9BQU9GLFVBQVVnQjtRQUVqQixTQUFTaEIsU0FBU0ksTUFBTSxFQUFFYSxJQUFJO1lBQzVCakIsU0FBU1csU0FBUyxDQUFDRixXQUFXLENBQUNGLElBQUksQ0FBQyxJQUFJLEVBQUVIO1lBQzFDLElBQUlhLFFBQVEsTUFBTTtnQkFDaEIsTUFBTSxJQUFJQyxNQUFNLHlCQUF5QixJQUFJLENBQUNDLFNBQVM7WUFDekQ7WUFDQSxJQUFJLENBQUNDLElBQUksR0FBRztZQUNaLElBQUksQ0FBQ0MsSUFBSSxHQUFHdEIsU0FBU3VCLEtBQUs7WUFDMUIsSUFBSSxDQUFDQyxLQUFLLEdBQUcsSUFBSSxDQUFDQyxTQUFTLENBQUNDLEtBQUssQ0FBQ1I7UUFDcEM7UUFFQWpCLFNBQVNVLFNBQVMsQ0FBQ2dCLEtBQUssR0FBRztZQUN6QixPQUFPQyxPQUFPQyxNQUFNLENBQUMsSUFBSTtRQUMzQjtRQUVBNUIsU0FBU1UsU0FBUyxDQUFDbUIsUUFBUSxHQUFHLFNBQVNDLE9BQU87WUFDNUMsT0FBTyxJQUFJLENBQUNBLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDTixLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQ0ssT0FBTyxDQUFDQyxNQUFNLENBQUNDLGFBQWEsQ0FBQ0Y7UUFDM0U7UUFFQSxPQUFPOUI7SUFFVCxFQUFHQztBQUVMLEdBQUdNLElBQUksQ0FBQyxJQUFJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHB0eC1vcHRpbWl6ZXIvLi9ub2RlX21vZHVsZXMveG1sMmpzL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxDRGF0YS5qcz8yOTJiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MQ0RhdGEsIFhNTENoYXJhY3RlckRhdGEsXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBOb2RlVHlwZSA9IHJlcXVpcmUoJy4vTm9kZVR5cGUnKTtcblxuICBYTUxDaGFyYWN0ZXJEYXRhID0gcmVxdWlyZSgnLi9YTUxDaGFyYWN0ZXJEYXRhJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxDRGF0YSA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTENEYXRhLCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTENEYXRhKHBhcmVudCwgdGV4dCkge1xuICAgICAgWE1MQ0RhdGEuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyZW50KTtcbiAgICAgIGlmICh0ZXh0ID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBDREFUQSB0ZXh0LiBcIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuICAgICAgdGhpcy5uYW1lID0gXCIjY2RhdGEtc2VjdGlvblwiO1xuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuQ0RhdGE7XG4gICAgICB0aGlzLnZhbHVlID0gdGhpcy5zdHJpbmdpZnkuY2RhdGEodGV4dCk7XG4gICAgfVxuXG4gICAgWE1MQ0RhdGEucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZSh0aGlzKTtcbiAgICB9O1xuXG4gICAgWE1MQ0RhdGEucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy53cml0ZXIuY2RhdGEodGhpcywgdGhpcy5vcHRpb25zLndyaXRlci5maWx0ZXJPcHRpb25zKG9wdGlvbnMpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTENEYXRhO1xuXG4gIH0pKFhNTENoYXJhY3RlckRhdGEpO1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm5hbWVzIjpbIk5vZGVUeXBlIiwiWE1MQ0RhdGEiLCJYTUxDaGFyYWN0ZXJEYXRhIiwiZXh0ZW5kIiwiY2hpbGQiLCJwYXJlbnQiLCJrZXkiLCJoYXNQcm9wIiwiY2FsbCIsImN0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIl9fc3VwZXJfXyIsImhhc093blByb3BlcnR5IiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzdXBlckNsYXNzIiwidGV4dCIsIkVycm9yIiwiZGVidWdJbmZvIiwibmFtZSIsInR5cGUiLCJDRGF0YSIsInZhbHVlIiwic3RyaW5naWZ5IiwiY2RhdGEiLCJjbG9uZSIsIk9iamVjdCIsImNyZWF0ZSIsInRvU3RyaW5nIiwib3B0aW9ucyIsIndyaXRlciIsImZpbHRlck9wdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLCData.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLCharacterData.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLCharacterData.js ***!
  \*****************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    var XMLCharacterData, XMLNode, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLNode.js\");\n    module.exports = XMLCharacterData = function(superClass) {\n        extend(XMLCharacterData, superClass);\n        function XMLCharacterData(parent) {\n            XMLCharacterData.__super__.constructor.call(this, parent);\n            this.value = \"\";\n        }\n        Object.defineProperty(XMLCharacterData.prototype, \"data\", {\n            get: function() {\n                return this.value;\n            },\n            set: function(value) {\n                return this.value = value || \"\";\n            }\n        });\n        Object.defineProperty(XMLCharacterData.prototype, \"length\", {\n            get: function() {\n                return this.value.length;\n            }\n        });\n        Object.defineProperty(XMLCharacterData.prototype, \"textContent\", {\n            get: function() {\n                return this.value;\n            },\n            set: function(value) {\n                return this.value = value || \"\";\n            }\n        });\n        XMLCharacterData.prototype.clone = function() {\n            return Object.create(this);\n        };\n        XMLCharacterData.prototype.substringData = function(offset, count) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLCharacterData.prototype.appendData = function(arg) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLCharacterData.prototype.insertData = function(offset, arg) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLCharacterData.prototype.deleteData = function(offset, count) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLCharacterData.prototype.replaceData = function(offset, count, arg) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLCharacterData.prototype.isEqualNode = function(node) {\n            if (!XMLCharacterData.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {\n                return false;\n            }\n            if (node.data !== this.data) {\n                return false;\n            }\n            return true;\n        };\n        return XMLCharacterData;\n    }(XMLNode);\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveG1sMmpzL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxDaGFyYWN0ZXJEYXRhLmpzIiwibWFwcGluZ3MiOiJBQUFBLG1DQUFtQztBQUNsQztJQUNDLElBQUlBLGtCQUFrQkMsU0FDcEJDLFNBQVMsU0FBU0MsS0FBSyxFQUFFQyxNQUFNO1FBQUksSUFBSyxJQUFJQyxPQUFPRCxPQUFRO1lBQUUsSUFBSUUsUUFBUUMsSUFBSSxDQUFDSCxRQUFRQyxNQUFNRixLQUFLLENBQUNFLElBQUksR0FBR0QsTUFBTSxDQUFDQyxJQUFJO1FBQUU7UUFBRSxTQUFTRztZQUFTLElBQUksQ0FBQ0MsV0FBVyxHQUFHTjtRQUFPO1FBQUVLLEtBQUtFLFNBQVMsR0FBR04sT0FBT00sU0FBUztRQUFFUCxNQUFNTyxTQUFTLEdBQUcsSUFBSUY7UUFBUUwsTUFBTVEsU0FBUyxHQUFHUCxPQUFPTSxTQUFTO1FBQUUsT0FBT1A7SUFBTyxHQUN6UkcsVUFBVSxDQUFDLEVBQUVNLGNBQWM7SUFFN0JYLFVBQVVZLG1CQUFPQSxDQUFDO0lBRWxCQyxPQUFPQyxPQUFPLEdBQUdmLG1CQUFtQixTQUFVZ0IsVUFBVTtRQUN0RGQsT0FBT0Ysa0JBQWtCZ0I7UUFFekIsU0FBU2hCLGlCQUFpQkksTUFBTTtZQUM5QkosaUJBQWlCVyxTQUFTLENBQUNGLFdBQVcsQ0FBQ0YsSUFBSSxDQUFDLElBQUksRUFBRUg7WUFDbEQsSUFBSSxDQUFDYSxLQUFLLEdBQUc7UUFDZjtRQUVBQyxPQUFPQyxjQUFjLENBQUNuQixpQkFBaUJVLFNBQVMsRUFBRSxRQUFRO1lBQ3hEVSxLQUFLO2dCQUNILE9BQU8sSUFBSSxDQUFDSCxLQUFLO1lBQ25CO1lBQ0FJLEtBQUssU0FBU0osS0FBSztnQkFDakIsT0FBTyxJQUFJLENBQUNBLEtBQUssR0FBR0EsU0FBUztZQUMvQjtRQUNGO1FBRUFDLE9BQU9DLGNBQWMsQ0FBQ25CLGlCQUFpQlUsU0FBUyxFQUFFLFVBQVU7WUFDMURVLEtBQUs7Z0JBQ0gsT0FBTyxJQUFJLENBQUNILEtBQUssQ0FBQ0ssTUFBTTtZQUMxQjtRQUNGO1FBRUFKLE9BQU9DLGNBQWMsQ0FBQ25CLGlCQUFpQlUsU0FBUyxFQUFFLGVBQWU7WUFDL0RVLEtBQUs7Z0JBQ0gsT0FBTyxJQUFJLENBQUNILEtBQUs7WUFDbkI7WUFDQUksS0FBSyxTQUFTSixLQUFLO2dCQUNqQixPQUFPLElBQUksQ0FBQ0EsS0FBSyxHQUFHQSxTQUFTO1lBQy9CO1FBQ0Y7UUFFQWpCLGlCQUFpQlUsU0FBUyxDQUFDYSxLQUFLLEdBQUc7WUFDakMsT0FBT0wsT0FBT00sTUFBTSxDQUFDLElBQUk7UUFDM0I7UUFFQXhCLGlCQUFpQlUsU0FBUyxDQUFDZSxhQUFhLEdBQUcsU0FBU0MsTUFBTSxFQUFFQyxLQUFLO1lBQy9ELE1BQU0sSUFBSUMsTUFBTSx3Q0FBd0MsSUFBSSxDQUFDQyxTQUFTO1FBQ3hFO1FBRUE3QixpQkFBaUJVLFNBQVMsQ0FBQ29CLFVBQVUsR0FBRyxTQUFTQyxHQUFHO1lBQ2xELE1BQU0sSUFBSUgsTUFBTSx3Q0FBd0MsSUFBSSxDQUFDQyxTQUFTO1FBQ3hFO1FBRUE3QixpQkFBaUJVLFNBQVMsQ0FBQ3NCLFVBQVUsR0FBRyxTQUFTTixNQUFNLEVBQUVLLEdBQUc7WUFDMUQsTUFBTSxJQUFJSCxNQUFNLHdDQUF3QyxJQUFJLENBQUNDLFNBQVM7UUFDeEU7UUFFQTdCLGlCQUFpQlUsU0FBUyxDQUFDdUIsVUFBVSxHQUFHLFNBQVNQLE1BQU0sRUFBRUMsS0FBSztZQUM1RCxNQUFNLElBQUlDLE1BQU0sd0NBQXdDLElBQUksQ0FBQ0MsU0FBUztRQUN4RTtRQUVBN0IsaUJBQWlCVSxTQUFTLENBQUN3QixXQUFXLEdBQUcsU0FBU1IsTUFBTSxFQUFFQyxLQUFLLEVBQUVJLEdBQUc7WUFDbEUsTUFBTSxJQUFJSCxNQUFNLHdDQUF3QyxJQUFJLENBQUNDLFNBQVM7UUFDeEU7UUFFQTdCLGlCQUFpQlUsU0FBUyxDQUFDeUIsV0FBVyxHQUFHLFNBQVNDLElBQUk7WUFDcEQsSUFBSSxDQUFDcEMsaUJBQWlCVyxTQUFTLENBQUN3QixXQUFXLENBQUNFLEtBQUssQ0FBQyxJQUFJLEVBQUVDLFdBQVdILFdBQVcsQ0FBQ0MsT0FBTztnQkFDcEYsT0FBTztZQUNUO1lBQ0EsSUFBSUEsS0FBS0csSUFBSSxLQUFLLElBQUksQ0FBQ0EsSUFBSSxFQUFFO2dCQUMzQixPQUFPO1lBQ1Q7WUFDQSxPQUFPO1FBQ1Q7UUFFQSxPQUFPdkM7SUFFVCxFQUFHQztBQUVMLEdBQUdNLElBQUksQ0FBQyxJQUFJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHB0eC1vcHRpbWl6ZXIvLi9ub2RlX21vZHVsZXMveG1sMmpzL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxDaGFyYWN0ZXJEYXRhLmpzP2EwZTIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIFhNTENoYXJhY3RlckRhdGEsIFhNTE5vZGUsXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBYTUxOb2RlID0gcmVxdWlyZSgnLi9YTUxOb2RlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxDaGFyYWN0ZXJEYXRhID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoWE1MQ2hhcmFjdGVyRGF0YSwgc3VwZXJDbGFzcyk7XG5cbiAgICBmdW5jdGlvbiBYTUxDaGFyYWN0ZXJEYXRhKHBhcmVudCkge1xuICAgICAgWE1MQ2hhcmFjdGVyRGF0YS5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJlbnQpO1xuICAgICAgdGhpcy52YWx1ZSA9ICcnO1xuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxDaGFyYWN0ZXJEYXRhLnByb3RvdHlwZSwgJ2RhdGEnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlID0gdmFsdWUgfHwgJyc7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MQ2hhcmFjdGVyRGF0YS5wcm90b3R5cGUsICdsZW5ndGgnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZS5sZW5ndGg7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MQ2hhcmFjdGVyRGF0YS5wcm90b3R5cGUsICd0ZXh0Q29udGVudCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUgPSB2YWx1ZSB8fCAnJztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIFhNTENoYXJhY3RlckRhdGEucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZSh0aGlzKTtcbiAgICB9O1xuXG4gICAgWE1MQ2hhcmFjdGVyRGF0YS5wcm90b3R5cGUuc3Vic3RyaW5nRGF0YSA9IGZ1bmN0aW9uKG9mZnNldCwgY291bnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MQ2hhcmFjdGVyRGF0YS5wcm90b3R5cGUuYXBwZW5kRGF0YSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgIH07XG5cbiAgICBYTUxDaGFyYWN0ZXJEYXRhLnByb3RvdHlwZS5pbnNlcnREYXRhID0gZnVuY3Rpb24ob2Zmc2V0LCBhcmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MQ2hhcmFjdGVyRGF0YS5wcm90b3R5cGUuZGVsZXRlRGF0YSA9IGZ1bmN0aW9uKG9mZnNldCwgY291bnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MQ2hhcmFjdGVyRGF0YS5wcm90b3R5cGUucmVwbGFjZURhdGEgPSBmdW5jdGlvbihvZmZzZXQsIGNvdW50LCBhcmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MQ2hhcmFjdGVyRGF0YS5wcm90b3R5cGUuaXNFcXVhbE5vZGUgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICBpZiAoIVhNTENoYXJhY3RlckRhdGEuX19zdXBlcl9fLmlzRXF1YWxOb2RlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykuaXNFcXVhbE5vZGUobm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUuZGF0YSAhPT0gdGhpcy5kYXRhKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MQ2hhcmFjdGVyRGF0YTtcblxuICB9KShYTUxOb2RlKTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6WyJYTUxDaGFyYWN0ZXJEYXRhIiwiWE1MTm9kZSIsImV4dGVuZCIsImNoaWxkIiwicGFyZW50Iiwia2V5IiwiaGFzUHJvcCIsImNhbGwiLCJjdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfX3N1cGVyX18iLCJoYXNPd25Qcm9wZXJ0eSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic3VwZXJDbGFzcyIsInZhbHVlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJzZXQiLCJsZW5ndGgiLCJjbG9uZSIsImNyZWF0ZSIsInN1YnN0cmluZ0RhdGEiLCJvZmZzZXQiLCJjb3VudCIsIkVycm9yIiwiZGVidWdJbmZvIiwiYXBwZW5kRGF0YSIsImFyZyIsImluc2VydERhdGEiLCJkZWxldGVEYXRhIiwicmVwbGFjZURhdGEiLCJpc0VxdWFsTm9kZSIsIm5vZGUiLCJhcHBseSIsImFyZ3VtZW50cyIsImRhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLCharacterData.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLComment.js":
/*!***********************************************************************!*\
  !*** ./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLComment.js ***!
  \***********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, XMLCharacterData, XMLComment, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLCharacterData = __webpack_require__(/*! ./XMLCharacterData */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLCharacterData.js\");\n    module.exports = XMLComment = function(superClass) {\n        extend(XMLComment, superClass);\n        function XMLComment(parent, text) {\n            XMLComment.__super__.constructor.call(this, parent);\n            if (text == null) {\n                throw new Error(\"Missing comment text. \" + this.debugInfo());\n            }\n            this.name = \"#comment\";\n            this.type = NodeType.Comment;\n            this.value = this.stringify.comment(text);\n        }\n        XMLComment.prototype.clone = function() {\n            return Object.create(this);\n        };\n        XMLComment.prototype.toString = function(options) {\n            return this.options.writer.comment(this, this.options.writer.filterOptions(options));\n        };\n        return XMLComment;\n    }(XMLCharacterData);\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveG1sMmpzL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxDb21tZW50LmpzIiwibWFwcGluZ3MiOiJBQUFBLG1DQUFtQztBQUNsQztJQUNDLElBQUlBLFVBQVVDLGtCQUFrQkMsWUFDOUJDLFNBQVMsU0FBU0MsS0FBSyxFQUFFQyxNQUFNO1FBQUksSUFBSyxJQUFJQyxPQUFPRCxPQUFRO1lBQUUsSUFBSUUsUUFBUUMsSUFBSSxDQUFDSCxRQUFRQyxNQUFNRixLQUFLLENBQUNFLElBQUksR0FBR0QsTUFBTSxDQUFDQyxJQUFJO1FBQUU7UUFBRSxTQUFTRztZQUFTLElBQUksQ0FBQ0MsV0FBVyxHQUFHTjtRQUFPO1FBQUVLLEtBQUtFLFNBQVMsR0FBR04sT0FBT00sU0FBUztRQUFFUCxNQUFNTyxTQUFTLEdBQUcsSUFBSUY7UUFBUUwsTUFBTVEsU0FBUyxHQUFHUCxPQUFPTSxTQUFTO1FBQUUsT0FBT1A7SUFBTyxHQUN6UkcsVUFBVSxDQUFDLEVBQUVNLGNBQWM7SUFFN0JiLFdBQVdjLG1CQUFPQSxDQUFDO0lBRW5CYixtQkFBbUJhLG1CQUFPQSxDQUFDO0lBRTNCQyxPQUFPQyxPQUFPLEdBQUdkLGFBQWEsU0FBVWUsVUFBVTtRQUNoRGQsT0FBT0QsWUFBWWU7UUFFbkIsU0FBU2YsV0FBV0csTUFBTSxFQUFFYSxJQUFJO1lBQzlCaEIsV0FBV1UsU0FBUyxDQUFDRixXQUFXLENBQUNGLElBQUksQ0FBQyxJQUFJLEVBQUVIO1lBQzVDLElBQUlhLFFBQVEsTUFBTTtnQkFDaEIsTUFBTSxJQUFJQyxNQUFNLDJCQUEyQixJQUFJLENBQUNDLFNBQVM7WUFDM0Q7WUFDQSxJQUFJLENBQUNDLElBQUksR0FBRztZQUNaLElBQUksQ0FBQ0MsSUFBSSxHQUFHdEIsU0FBU3VCLE9BQU87WUFDNUIsSUFBSSxDQUFDQyxLQUFLLEdBQUcsSUFBSSxDQUFDQyxTQUFTLENBQUNDLE9BQU8sQ0FBQ1I7UUFDdEM7UUFFQWhCLFdBQVdTLFNBQVMsQ0FBQ2dCLEtBQUssR0FBRztZQUMzQixPQUFPQyxPQUFPQyxNQUFNLENBQUMsSUFBSTtRQUMzQjtRQUVBM0IsV0FBV1MsU0FBUyxDQUFDbUIsUUFBUSxHQUFHLFNBQVNDLE9BQU87WUFDOUMsT0FBTyxJQUFJLENBQUNBLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDTixPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQ0ssT0FBTyxDQUFDQyxNQUFNLENBQUNDLGFBQWEsQ0FBQ0Y7UUFDN0U7UUFFQSxPQUFPN0I7SUFFVCxFQUFHRDtBQUVMLEdBQUdPLElBQUksQ0FBQyxJQUFJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHB0eC1vcHRpbWl6ZXIvLi9ub2RlX21vZHVsZXMveG1sMmpzL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxDb21tZW50LmpzPzliOWMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIE5vZGVUeXBlLCBYTUxDaGFyYWN0ZXJEYXRhLCBYTUxDb21tZW50LFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgWE1MQ2hhcmFjdGVyRGF0YSA9IHJlcXVpcmUoJy4vWE1MQ2hhcmFjdGVyRGF0YScpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MQ29tbWVudCA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTENvbW1lbnQsIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gWE1MQ29tbWVudChwYXJlbnQsIHRleHQpIHtcbiAgICAgIFhNTENvbW1lbnQuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyZW50KTtcbiAgICAgIGlmICh0ZXh0ID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBjb21tZW50IHRleHQuIFwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgICB9XG4gICAgICB0aGlzLm5hbWUgPSBcIiNjb21tZW50XCI7XG4gICAgICB0aGlzLnR5cGUgPSBOb2RlVHlwZS5Db21tZW50O1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuc3RyaW5naWZ5LmNvbW1lbnQodGV4dCk7XG4gICAgfVxuXG4gICAgWE1MQ29tbWVudC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBPYmplY3QuY3JlYXRlKHRoaXMpO1xuICAgIH07XG5cbiAgICBYTUxDb21tZW50LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMud3JpdGVyLmNvbW1lbnQodGhpcywgdGhpcy5vcHRpb25zLndyaXRlci5maWx0ZXJPcHRpb25zKG9wdGlvbnMpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTENvbW1lbnQ7XG5cbiAgfSkoWE1MQ2hhcmFjdGVyRGF0YSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibmFtZXMiOlsiTm9kZVR5cGUiLCJYTUxDaGFyYWN0ZXJEYXRhIiwiWE1MQ29tbWVudCIsImV4dGVuZCIsImNoaWxkIiwicGFyZW50Iiwia2V5IiwiaGFzUHJvcCIsImNhbGwiLCJjdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfX3N1cGVyX18iLCJoYXNPd25Qcm9wZXJ0eSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic3VwZXJDbGFzcyIsInRleHQiLCJFcnJvciIsImRlYnVnSW5mbyIsIm5hbWUiLCJ0eXBlIiwiQ29tbWVudCIsInZhbHVlIiwic3RyaW5naWZ5IiwiY29tbWVudCIsImNsb25lIiwiT2JqZWN0IiwiY3JlYXRlIiwidG9TdHJpbmciLCJvcHRpb25zIiwid3JpdGVyIiwiZmlsdGVyT3B0aW9ucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLComment.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDOMConfiguration.js":
/*!********************************************************************************!*\
  !*** ./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDOMConfiguration.js ***!
  \********************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    var XMLDOMConfiguration, XMLDOMErrorHandler, XMLDOMStringList;\n    XMLDOMErrorHandler = __webpack_require__(/*! ./XMLDOMErrorHandler */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDOMErrorHandler.js\");\n    XMLDOMStringList = __webpack_require__(/*! ./XMLDOMStringList */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDOMStringList.js\");\n    module.exports = XMLDOMConfiguration = function() {\n        function XMLDOMConfiguration() {\n            var clonedSelf;\n            this.defaultParams = {\n                \"canonical-form\": false,\n                \"cdata-sections\": false,\n                \"comments\": false,\n                \"datatype-normalization\": false,\n                \"element-content-whitespace\": true,\n                \"entities\": true,\n                \"error-handler\": new XMLDOMErrorHandler(),\n                \"infoset\": true,\n                \"validate-if-schema\": false,\n                \"namespaces\": true,\n                \"namespace-declarations\": true,\n                \"normalize-characters\": false,\n                \"schema-location\": \"\",\n                \"schema-type\": \"\",\n                \"split-cdata-sections\": true,\n                \"validate\": false,\n                \"well-formed\": true\n            };\n            this.params = clonedSelf = Object.create(this.defaultParams);\n        }\n        Object.defineProperty(XMLDOMConfiguration.prototype, \"parameterNames\", {\n            get: function() {\n                return new XMLDOMStringList(Object.keys(this.defaultParams));\n            }\n        });\n        XMLDOMConfiguration.prototype.getParameter = function(name) {\n            if (this.params.hasOwnProperty(name)) {\n                return this.params[name];\n            } else {\n                return null;\n            }\n        };\n        XMLDOMConfiguration.prototype.canSetParameter = function(name, value) {\n            return true;\n        };\n        XMLDOMConfiguration.prototype.setParameter = function(name, value) {\n            if (value != null) {\n                return this.params[name] = value;\n            } else {\n                return delete this.params[name];\n            }\n        };\n        return XMLDOMConfiguration;\n    }();\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveG1sMmpzL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxET01Db25maWd1cmF0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFBLG1DQUFtQztBQUNsQztJQUNDLElBQUlBLHFCQUFxQkMsb0JBQW9CQztJQUU3Q0QscUJBQXFCRSxtQkFBT0EsQ0FBQztJQUU3QkQsbUJBQW1CQyxtQkFBT0EsQ0FBQztJQUUzQkMsT0FBT0MsT0FBTyxHQUFHTCxzQkFBc0I7UUFDckMsU0FBU0E7WUFDUCxJQUFJTTtZQUNKLElBQUksQ0FBQ0MsYUFBYSxHQUFHO2dCQUNuQixrQkFBa0I7Z0JBQ2xCLGtCQUFrQjtnQkFDbEIsWUFBWTtnQkFDWiwwQkFBMEI7Z0JBQzFCLDhCQUE4QjtnQkFDOUIsWUFBWTtnQkFDWixpQkFBaUIsSUFBSU47Z0JBQ3JCLFdBQVc7Z0JBQ1gsc0JBQXNCO2dCQUN0QixjQUFjO2dCQUNkLDBCQUEwQjtnQkFDMUIsd0JBQXdCO2dCQUN4QixtQkFBbUI7Z0JBQ25CLGVBQWU7Z0JBQ2Ysd0JBQXdCO2dCQUN4QixZQUFZO2dCQUNaLGVBQWU7WUFDakI7WUFDQSxJQUFJLENBQUNPLE1BQU0sR0FBR0YsYUFBYUcsT0FBT0MsTUFBTSxDQUFDLElBQUksQ0FBQ0gsYUFBYTtRQUM3RDtRQUVBRSxPQUFPRSxjQUFjLENBQUNYLG9CQUFvQlksU0FBUyxFQUFFLGtCQUFrQjtZQUNyRUMsS0FBSztnQkFDSCxPQUFPLElBQUlYLGlCQUFpQk8sT0FBT0ssSUFBSSxDQUFDLElBQUksQ0FBQ1AsYUFBYTtZQUM1RDtRQUNGO1FBRUFQLG9CQUFvQlksU0FBUyxDQUFDRyxZQUFZLEdBQUcsU0FBU0MsSUFBSTtZQUN4RCxJQUFJLElBQUksQ0FBQ1IsTUFBTSxDQUFDUyxjQUFjLENBQUNELE9BQU87Z0JBQ3BDLE9BQU8sSUFBSSxDQUFDUixNQUFNLENBQUNRLEtBQUs7WUFDMUIsT0FBTztnQkFDTCxPQUFPO1lBQ1Q7UUFDRjtRQUVBaEIsb0JBQW9CWSxTQUFTLENBQUNNLGVBQWUsR0FBRyxTQUFTRixJQUFJLEVBQUVHLEtBQUs7WUFDbEUsT0FBTztRQUNUO1FBRUFuQixvQkFBb0JZLFNBQVMsQ0FBQ1EsWUFBWSxHQUFHLFNBQVNKLElBQUksRUFBRUcsS0FBSztZQUMvRCxJQUFJQSxTQUFTLE1BQU07Z0JBQ2pCLE9BQU8sSUFBSSxDQUFDWCxNQUFNLENBQUNRLEtBQUssR0FBR0c7WUFDN0IsT0FBTztnQkFDTCxPQUFPLE9BQU8sSUFBSSxDQUFDWCxNQUFNLENBQUNRLEtBQUs7WUFDakM7UUFDRjtRQUVBLE9BQU9oQjtJQUVUO0FBRUYsR0FBR3FCLElBQUksQ0FBQyxJQUFJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHB0eC1vcHRpbWl6ZXIvLi9ub2RlX21vZHVsZXMveG1sMmpzL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxET01Db25maWd1cmF0aW9uLmpzP2UzYTUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIFhNTERPTUNvbmZpZ3VyYXRpb24sIFhNTERPTUVycm9ySGFuZGxlciwgWE1MRE9NU3RyaW5nTGlzdDtcblxuICBYTUxET01FcnJvckhhbmRsZXIgPSByZXF1aXJlKCcuL1hNTERPTUVycm9ySGFuZGxlcicpO1xuXG4gIFhNTERPTVN0cmluZ0xpc3QgPSByZXF1aXJlKCcuL1hNTERPTVN0cmluZ0xpc3QnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTERPTUNvbmZpZ3VyYXRpb24gPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gWE1MRE9NQ29uZmlndXJhdGlvbigpIHtcbiAgICAgIHZhciBjbG9uZWRTZWxmO1xuICAgICAgdGhpcy5kZWZhdWx0UGFyYW1zID0ge1xuICAgICAgICBcImNhbm9uaWNhbC1mb3JtXCI6IGZhbHNlLFxuICAgICAgICBcImNkYXRhLXNlY3Rpb25zXCI6IGZhbHNlLFxuICAgICAgICBcImNvbW1lbnRzXCI6IGZhbHNlLFxuICAgICAgICBcImRhdGF0eXBlLW5vcm1hbGl6YXRpb25cIjogZmFsc2UsXG4gICAgICAgIFwiZWxlbWVudC1jb250ZW50LXdoaXRlc3BhY2VcIjogdHJ1ZSxcbiAgICAgICAgXCJlbnRpdGllc1wiOiB0cnVlLFxuICAgICAgICBcImVycm9yLWhhbmRsZXJcIjogbmV3IFhNTERPTUVycm9ySGFuZGxlcigpLFxuICAgICAgICBcImluZm9zZXRcIjogdHJ1ZSxcbiAgICAgICAgXCJ2YWxpZGF0ZS1pZi1zY2hlbWFcIjogZmFsc2UsXG4gICAgICAgIFwibmFtZXNwYWNlc1wiOiB0cnVlLFxuICAgICAgICBcIm5hbWVzcGFjZS1kZWNsYXJhdGlvbnNcIjogdHJ1ZSxcbiAgICAgICAgXCJub3JtYWxpemUtY2hhcmFjdGVyc1wiOiBmYWxzZSxcbiAgICAgICAgXCJzY2hlbWEtbG9jYXRpb25cIjogJycsXG4gICAgICAgIFwic2NoZW1hLXR5cGVcIjogJycsXG4gICAgICAgIFwic3BsaXQtY2RhdGEtc2VjdGlvbnNcIjogdHJ1ZSxcbiAgICAgICAgXCJ2YWxpZGF0ZVwiOiBmYWxzZSxcbiAgICAgICAgXCJ3ZWxsLWZvcm1lZFwiOiB0cnVlXG4gICAgICB9O1xuICAgICAgdGhpcy5wYXJhbXMgPSBjbG9uZWRTZWxmID0gT2JqZWN0LmNyZWF0ZSh0aGlzLmRlZmF1bHRQYXJhbXMpO1xuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxET01Db25maWd1cmF0aW9uLnByb3RvdHlwZSwgJ3BhcmFtZXRlck5hbWVzJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBYTUxET01TdHJpbmdMaXN0KE9iamVjdC5rZXlzKHRoaXMuZGVmYXVsdFBhcmFtcykpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgWE1MRE9NQ29uZmlndXJhdGlvbi5wcm90b3R5cGUuZ2V0UGFyYW1ldGVyID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAgaWYgKHRoaXMucGFyYW1zLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmFtc1tuYW1lXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBYTUxET01Db25maWd1cmF0aW9uLnByb3RvdHlwZS5jYW5TZXRQYXJhbWV0ZXIgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIFhNTERPTUNvbmZpZ3VyYXRpb24ucHJvdG90eXBlLnNldFBhcmFtZXRlciA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJhbXNbbmFtZV0gPSB2YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWxldGUgdGhpcy5wYXJhbXNbbmFtZV07XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxET01Db25maWd1cmF0aW9uO1xuXG4gIH0pKCk7XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibmFtZXMiOlsiWE1MRE9NQ29uZmlndXJhdGlvbiIsIlhNTERPTUVycm9ySGFuZGxlciIsIlhNTERPTVN0cmluZ0xpc3QiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImNsb25lZFNlbGYiLCJkZWZhdWx0UGFyYW1zIiwicGFyYW1zIiwiT2JqZWN0IiwiY3JlYXRlIiwiZGVmaW5lUHJvcGVydHkiLCJwcm90b3R5cGUiLCJnZXQiLCJrZXlzIiwiZ2V0UGFyYW1ldGVyIiwibmFtZSIsImhhc093blByb3BlcnR5IiwiY2FuU2V0UGFyYW1ldGVyIiwidmFsdWUiLCJzZXRQYXJhbWV0ZXIiLCJjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDOMConfiguration.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDOMErrorHandler.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDOMErrorHandler.js ***!
  \*******************************************************************************/
/***/ (function(module) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    var XMLDOMErrorHandler;\n    module.exports = XMLDOMErrorHandler = function() {\n        function XMLDOMErrorHandler() {}\n        XMLDOMErrorHandler.prototype.handleError = function(error) {\n            throw new Error(error);\n        };\n        return XMLDOMErrorHandler;\n    }();\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcHR4LW9wdGltaXplci8uL25vZGVfbW9kdWxlcy94bWwyanMvbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERPTUVycm9ySGFuZGxlci5qcz9iNzE2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBYTUxET01FcnJvckhhbmRsZXI7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxET01FcnJvckhhbmRsZXIgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gWE1MRE9NRXJyb3JIYW5kbGVyKCkge31cblxuICAgIFhNTERPTUVycm9ySGFuZGxlci5wcm90b3R5cGUuaGFuZGxlRXJyb3IgPSBmdW5jdGlvbihlcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTERPTUVycm9ySGFuZGxlcjtcblxuICB9KSgpO1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm5hbWVzIjpbIlhNTERPTUVycm9ySGFuZGxlciIsIm1vZHVsZSIsImV4cG9ydHMiLCJwcm90b3R5cGUiLCJoYW5kbGVFcnJvciIsImVycm9yIiwiRXJyb3IiLCJjYWxsIl0sIm1hcHBpbmdzIjoiQUFBQSxtQ0FBbUM7QUFDbEMsQ0FBQTtJQUNDLElBQUlBO0lBRUpDLE9BQU9DLE9BQU8sR0FBR0YscUJBQXFCLEFBQUM7UUFDckMsU0FBU0Esc0JBQXNCO1FBRS9CQSxtQkFBbUJHLFNBQVMsQ0FBQ0MsV0FBVyxHQUFHLFNBQVNDLEtBQUs7WUFDdkQsTUFBTSxJQUFJQyxNQUFNRDtRQUNsQjtRQUVBLE9BQU9MO0lBRVQ7QUFFRixDQUFBLEVBQUdPLElBQUksQ0FBQyxJQUFJIiwiZmlsZSI6Iihzc3IpLy4vbm9kZV9tb2R1bGVzL3htbDJqcy9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MRE9NRXJyb3JIYW5kbGVyLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDOMErrorHandler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDOMImplementation.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDOMImplementation.js ***!
  \*********************************************************************************/
/***/ (function(module) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    var XMLDOMImplementation;\n    module.exports = XMLDOMImplementation = function() {\n        function XMLDOMImplementation() {}\n        XMLDOMImplementation.prototype.hasFeature = function(feature, version) {\n            return true;\n        };\n        XMLDOMImplementation.prototype.createDocumentType = function(qualifiedName, publicId, systemId) {\n            throw new Error(\"This DOM method is not implemented.\");\n        };\n        XMLDOMImplementation.prototype.createDocument = function(namespaceURI, qualifiedName, doctype) {\n            throw new Error(\"This DOM method is not implemented.\");\n        };\n        XMLDOMImplementation.prototype.createHTMLDocument = function(title) {\n            throw new Error(\"This DOM method is not implemented.\");\n        };\n        XMLDOMImplementation.prototype.getFeature = function(feature, version) {\n            throw new Error(\"This DOM method is not implemented.\");\n        };\n        return XMLDOMImplementation;\n    }();\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcHR4LW9wdGltaXplci8uL25vZGVfbW9kdWxlcy94bWwyanMvbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERPTUltcGxlbWVudGF0aW9uLmpzPzEzNzciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIFhNTERPTUltcGxlbWVudGF0aW9uO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MRE9NSW1wbGVtZW50YXRpb24gPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gWE1MRE9NSW1wbGVtZW50YXRpb24oKSB7fVxuXG4gICAgWE1MRE9NSW1wbGVtZW50YXRpb24ucHJvdG90eXBlLmhhc0ZlYXR1cmUgPSBmdW5jdGlvbihmZWF0dXJlLCB2ZXJzaW9uKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgWE1MRE9NSW1wbGVtZW50YXRpb24ucHJvdG90eXBlLmNyZWF0ZURvY3VtZW50VHlwZSA9IGZ1bmN0aW9uKHF1YWxpZmllZE5hbWUsIHB1YmxpY0lkLCBzeXN0ZW1JZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gICAgfTtcblxuICAgIFhNTERPTUltcGxlbWVudGF0aW9uLnByb3RvdHlwZS5jcmVhdGVEb2N1bWVudCA9IGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgcXVhbGlmaWVkTmFtZSwgZG9jdHlwZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gICAgfTtcblxuICAgIFhNTERPTUltcGxlbWVudGF0aW9uLnByb3RvdHlwZS5jcmVhdGVIVE1MRG9jdW1lbnQgPSBmdW5jdGlvbih0aXRsZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gICAgfTtcblxuICAgIFhNTERPTUltcGxlbWVudGF0aW9uLnByb3RvdHlwZS5nZXRGZWF0dXJlID0gZnVuY3Rpb24oZmVhdHVyZSwgdmVyc2lvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxET01JbXBsZW1lbnRhdGlvbjtcblxuICB9KSgpO1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm5hbWVzIjpbIlhNTERPTUltcGxlbWVudGF0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyIsInByb3RvdHlwZSIsImhhc0ZlYXR1cmUiLCJmZWF0dXJlIiwidmVyc2lvbiIsImNyZWF0ZURvY3VtZW50VHlwZSIsInF1YWxpZmllZE5hbWUiLCJwdWJsaWNJZCIsInN5c3RlbUlkIiwiRXJyb3IiLCJjcmVhdGVEb2N1bWVudCIsIm5hbWVzcGFjZVVSSSIsImRvY3R5cGUiLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJ0aXRsZSIsImdldEZlYXR1cmUiLCJjYWxsIl0sIm1hcHBpbmdzIjoiQUFBQSxtQ0FBbUM7QUFDbEMsQ0FBQTtJQUNDLElBQUlBO0lBRUpDLE9BQU9DLE9BQU8sR0FBR0YsdUJBQXVCLEFBQUM7UUFDdkMsU0FBU0Esd0JBQXdCO1FBRWpDQSxxQkFBcUJHLFNBQVMsQ0FBQ0MsVUFBVSxHQUFHLFNBQVNDLE9BQU8sRUFBRUMsT0FBTztZQUNuRSxPQUFPO1FBQ1Q7UUFFQU4scUJBQXFCRyxTQUFTLENBQUNJLGtCQUFrQixHQUFHLFNBQVNDLGFBQWEsRUFBRUMsUUFBUSxFQUFFQyxRQUFRO1lBQzVGLE1BQU0sSUFBSUMsTUFBTTtRQUNsQjtRQUVBWCxxQkFBcUJHLFNBQVMsQ0FBQ1MsY0FBYyxHQUFHLFNBQVNDLFlBQVksRUFBRUwsYUFBYSxFQUFFTSxPQUFPO1lBQzNGLE1BQU0sSUFBSUgsTUFBTTtRQUNsQjtRQUVBWCxxQkFBcUJHLFNBQVMsQ0FBQ1ksa0JBQWtCLEdBQUcsU0FBU0MsS0FBSztZQUNoRSxNQUFNLElBQUlMLE1BQU07UUFDbEI7UUFFQVgscUJBQXFCRyxTQUFTLENBQUNjLFVBQVUsR0FBRyxTQUFTWixPQUFPLEVBQUVDLE9BQU87WUFDbkUsTUFBTSxJQUFJSyxNQUFNO1FBQ2xCO1FBRUEsT0FBT1g7SUFFVDtBQUVGLENBQUEsRUFBR2tCLElBQUksQ0FBQyxJQUFJIiwiZmlsZSI6Iihzc3IpLy4vbm9kZV9tb2R1bGVzL3htbDJqcy9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MRE9NSW1wbGVtZW50YXRpb24uanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDOMImplementation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDOMStringList.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDOMStringList.js ***!
  \*****************************************************************************/
/***/ (function(module) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    var XMLDOMStringList;\n    module.exports = XMLDOMStringList = function() {\n        function XMLDOMStringList(arr) {\n            this.arr = arr || [];\n        }\n        Object.defineProperty(XMLDOMStringList.prototype, \"length\", {\n            get: function() {\n                return this.arr.length;\n            }\n        });\n        XMLDOMStringList.prototype.item = function(index) {\n            return this.arr[index] || null;\n        };\n        XMLDOMStringList.prototype.contains = function(str) {\n            return this.arr.indexOf(str) !== -1;\n        };\n        return XMLDOMStringList;\n    }();\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcHR4LW9wdGltaXplci8uL25vZGVfbW9kdWxlcy94bWwyanMvbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERPTVN0cmluZ0xpc3QuanM/YmYwOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgWE1MRE9NU3RyaW5nTGlzdDtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTERPTVN0cmluZ0xpc3QgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gWE1MRE9NU3RyaW5nTGlzdChhcnIpIHtcbiAgICAgIHRoaXMuYXJyID0gYXJyIHx8IFtdO1xuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxET01TdHJpbmdMaXN0LnByb3RvdHlwZSwgJ2xlbmd0aCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFyci5sZW5ndGg7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBYTUxET01TdHJpbmdMaXN0LnByb3RvdHlwZS5pdGVtID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgIHJldHVybiB0aGlzLmFycltpbmRleF0gfHwgbnVsbDtcbiAgICB9O1xuXG4gICAgWE1MRE9NU3RyaW5nTGlzdC5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbihzdHIpIHtcbiAgICAgIHJldHVybiB0aGlzLmFyci5pbmRleE9mKHN0cikgIT09IC0xO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRE9NU3RyaW5nTGlzdDtcblxuICB9KSgpO1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm5hbWVzIjpbIlhNTERPTVN0cmluZ0xpc3QiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXJyIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJwcm90b3R5cGUiLCJnZXQiLCJsZW5ndGgiLCJpdGVtIiwiaW5kZXgiLCJjb250YWlucyIsInN0ciIsImluZGV4T2YiLCJjYWxsIl0sIm1hcHBpbmdzIjoiQUFBQSxtQ0FBbUM7QUFDbEMsQ0FBQTtJQUNDLElBQUlBO0lBRUpDLE9BQU9DLE9BQU8sR0FBR0YsbUJBQW1CLEFBQUM7UUFDbkMsU0FBU0EsaUJBQWlCRyxHQUFHO1lBQzNCLElBQUksQ0FBQ0EsR0FBRyxHQUFHQSxPQUFPLEVBQUU7UUFDdEI7UUFFQUMsT0FBT0MsY0FBYyxDQUFDTCxpQkFBaUJNLFNBQVMsRUFBRSxVQUFVO1lBQzFEQyxLQUFLO2dCQUNILE9BQU8sSUFBSSxDQUFDSixHQUFHLENBQUNLLE1BQU07WUFDeEI7UUFDRjtRQUVBUixpQkFBaUJNLFNBQVMsQ0FBQ0csSUFBSSxHQUFHLFNBQVNDLEtBQUs7WUFDOUMsT0FBTyxJQUFJLENBQUNQLEdBQUcsQ0FBQ08sTUFBTSxJQUFJO1FBQzVCO1FBRUFWLGlCQUFpQk0sU0FBUyxDQUFDSyxRQUFRLEdBQUcsU0FBU0MsR0FBRztZQUNoRCxPQUFPLElBQUksQ0FBQ1QsR0FBRyxDQUFDVSxPQUFPLENBQUNELFNBQVMsQ0FBQztRQUNwQztRQUVBLE9BQU9aO0lBRVQ7QUFFRixDQUFBLEVBQUdjLElBQUksQ0FBQyxJQUFJIiwiZmlsZSI6Iihzc3IpLy4vbm9kZV9tb2R1bGVzL3htbDJqcy9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MRE9NU3RyaW5nTGlzdC5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDOMStringList.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDTDAttList.js":
/*!**************************************************************************!*\
  !*** ./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDTDAttList.js ***!
  \**************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, XMLDTDAttList, XMLNode, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLNode.js\");\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/NodeType.js\");\n    module.exports = XMLDTDAttList = function(superClass) {\n        extend(XMLDTDAttList, superClass);\n        function XMLDTDAttList(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n            XMLDTDAttList.__super__.constructor.call(this, parent);\n            if (elementName == null) {\n                throw new Error(\"Missing DTD element name. \" + this.debugInfo());\n            }\n            if (attributeName == null) {\n                throw new Error(\"Missing DTD attribute name. \" + this.debugInfo(elementName));\n            }\n            if (!attributeType) {\n                throw new Error(\"Missing DTD attribute type. \" + this.debugInfo(elementName));\n            }\n            if (!defaultValueType) {\n                throw new Error(\"Missing DTD attribute default. \" + this.debugInfo(elementName));\n            }\n            if (defaultValueType.indexOf(\"#\") !== 0) {\n                defaultValueType = \"#\" + defaultValueType;\n            }\n            if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {\n                throw new Error(\"Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. \" + this.debugInfo(elementName));\n            }\n            if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {\n                throw new Error(\"Default value only applies to #FIXED or #DEFAULT. \" + this.debugInfo(elementName));\n            }\n            this.elementName = this.stringify.name(elementName);\n            this.type = NodeType.AttributeDeclaration;\n            this.attributeName = this.stringify.name(attributeName);\n            this.attributeType = this.stringify.dtdAttType(attributeType);\n            if (defaultValue) {\n                this.defaultValue = this.stringify.dtdAttDefault(defaultValue);\n            }\n            this.defaultValueType = defaultValueType;\n        }\n        XMLDTDAttList.prototype.toString = function(options) {\n            return this.options.writer.dtdAttList(this, this.options.writer.filterOptions(options));\n        };\n        return XMLDTDAttList;\n    }(XMLNode);\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveG1sMmpzL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxEVERBdHRMaXN0LmpzIiwibWFwcGluZ3MiOiJBQUFBLG1DQUFtQztBQUNsQztJQUNDLElBQUlBLFVBQVVDLGVBQWVDLFNBQzNCQyxTQUFTLFNBQVNDLEtBQUssRUFBRUMsTUFBTTtRQUFJLElBQUssSUFBSUMsT0FBT0QsT0FBUTtZQUFFLElBQUlFLFFBQVFDLElBQUksQ0FBQ0gsUUFBUUMsTUFBTUYsS0FBSyxDQUFDRSxJQUFJLEdBQUdELE1BQU0sQ0FBQ0MsSUFBSTtRQUFFO1FBQUUsU0FBU0c7WUFBUyxJQUFJLENBQUNDLFdBQVcsR0FBR047UUFBTztRQUFFSyxLQUFLRSxTQUFTLEdBQUdOLE9BQU9NLFNBQVM7UUFBRVAsTUFBTU8sU0FBUyxHQUFHLElBQUlGO1FBQVFMLE1BQU1RLFNBQVMsR0FBR1AsT0FBT00sU0FBUztRQUFFLE9BQU9QO0lBQU8sR0FDelJHLFVBQVUsQ0FBQyxFQUFFTSxjQUFjO0lBRTdCWCxVQUFVWSxtQkFBT0EsQ0FBQztJQUVsQmQsV0FBV2MsbUJBQU9BLENBQUM7SUFFbkJDLE9BQU9DLE9BQU8sR0FBR2YsZ0JBQWdCLFNBQVVnQixVQUFVO1FBQ25EZCxPQUFPRixlQUFlZ0I7UUFFdEIsU0FBU2hCLGNBQWNJLE1BQU0sRUFBRWEsV0FBVyxFQUFFQyxhQUFhLEVBQUVDLGFBQWEsRUFBRUMsZ0JBQWdCLEVBQUVDLFlBQVk7WUFDdEdyQixjQUFjVyxTQUFTLENBQUNGLFdBQVcsQ0FBQ0YsSUFBSSxDQUFDLElBQUksRUFBRUg7WUFDL0MsSUFBSWEsZUFBZSxNQUFNO2dCQUN2QixNQUFNLElBQUlLLE1BQU0sK0JBQStCLElBQUksQ0FBQ0MsU0FBUztZQUMvRDtZQUNBLElBQUlMLGlCQUFpQixNQUFNO2dCQUN6QixNQUFNLElBQUlJLE1BQU0saUNBQWlDLElBQUksQ0FBQ0MsU0FBUyxDQUFDTjtZQUNsRTtZQUNBLElBQUksQ0FBQ0UsZUFBZTtnQkFDbEIsTUFBTSxJQUFJRyxNQUFNLGlDQUFpQyxJQUFJLENBQUNDLFNBQVMsQ0FBQ047WUFDbEU7WUFDQSxJQUFJLENBQUNHLGtCQUFrQjtnQkFDckIsTUFBTSxJQUFJRSxNQUFNLG9DQUFvQyxJQUFJLENBQUNDLFNBQVMsQ0FBQ047WUFDckU7WUFDQSxJQUFJRyxpQkFBaUJJLE9BQU8sQ0FBQyxTQUFTLEdBQUc7Z0JBQ3ZDSixtQkFBbUIsTUFBTUE7WUFDM0I7WUFDQSxJQUFJLENBQUNBLGlCQUFpQkssS0FBSyxDQUFDLDJDQUEyQztnQkFDckUsTUFBTSxJQUFJSCxNQUFNLG9GQUFvRixJQUFJLENBQUNDLFNBQVMsQ0FBQ047WUFDckg7WUFDQSxJQUFJSSxnQkFBZ0IsQ0FBQ0QsaUJBQWlCSyxLQUFLLENBQUMsd0JBQXdCO2dCQUNsRSxNQUFNLElBQUlILE1BQU0sdURBQXVELElBQUksQ0FBQ0MsU0FBUyxDQUFDTjtZQUN4RjtZQUNBLElBQUksQ0FBQ0EsV0FBVyxHQUFHLElBQUksQ0FBQ1MsU0FBUyxDQUFDQyxJQUFJLENBQUNWO1lBQ3ZDLElBQUksQ0FBQ1csSUFBSSxHQUFHN0IsU0FBUzhCLG9CQUFvQjtZQUN6QyxJQUFJLENBQUNYLGFBQWEsR0FBRyxJQUFJLENBQUNRLFNBQVMsQ0FBQ0MsSUFBSSxDQUFDVDtZQUN6QyxJQUFJLENBQUNDLGFBQWEsR0FBRyxJQUFJLENBQUNPLFNBQVMsQ0FBQ0ksVUFBVSxDQUFDWDtZQUMvQyxJQUFJRSxjQUFjO2dCQUNoQixJQUFJLENBQUNBLFlBQVksR0FBRyxJQUFJLENBQUNLLFNBQVMsQ0FBQ0ssYUFBYSxDQUFDVjtZQUNuRDtZQUNBLElBQUksQ0FBQ0QsZ0JBQWdCLEdBQUdBO1FBQzFCO1FBRUFwQixjQUFjVSxTQUFTLENBQUNzQixRQUFRLEdBQUcsU0FBU0MsT0FBTztZQUNqRCxPQUFPLElBQUksQ0FBQ0EsT0FBTyxDQUFDQyxNQUFNLENBQUNDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDRixPQUFPLENBQUNDLE1BQU0sQ0FBQ0UsYUFBYSxDQUFDSDtRQUNoRjtRQUVBLE9BQU9qQztJQUVULEVBQUdDO0FBRUwsR0FBR00sSUFBSSxDQUFDLElBQUkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcHR4LW9wdGltaXplci8uL25vZGVfbW9kdWxlcy94bWwyanMvbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERUREF0dExpc3QuanM/OWFjMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgTm9kZVR5cGUsIFhNTERUREF0dExpc3QsIFhNTE5vZGUsXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBYTUxOb2RlID0gcmVxdWlyZSgnLi9YTUxOb2RlJyk7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxEVERBdHRMaXN0ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoWE1MRFREQXR0TGlzdCwgc3VwZXJDbGFzcyk7XG5cbiAgICBmdW5jdGlvbiBYTUxEVERBdHRMaXN0KHBhcmVudCwgZWxlbWVudE5hbWUsIGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZVR5cGUsIGRlZmF1bHRWYWx1ZVR5cGUsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgWE1MRFREQXR0TGlzdC5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJlbnQpO1xuICAgICAgaWYgKGVsZW1lbnROYW1lID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBEVEQgZWxlbWVudCBuYW1lLiBcIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuICAgICAgaWYgKGF0dHJpYnV0ZU5hbWUgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIERURCBhdHRyaWJ1dGUgbmFtZS4gXCIgKyB0aGlzLmRlYnVnSW5mbyhlbGVtZW50TmFtZSkpO1xuICAgICAgfVxuICAgICAgaWYgKCFhdHRyaWJ1dGVUeXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgRFREIGF0dHJpYnV0ZSB0eXBlLiBcIiArIHRoaXMuZGVidWdJbmZvKGVsZW1lbnROYW1lKSk7XG4gICAgICB9XG4gICAgICBpZiAoIWRlZmF1bHRWYWx1ZVR5cGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBEVEQgYXR0cmlidXRlIGRlZmF1bHQuIFwiICsgdGhpcy5kZWJ1Z0luZm8oZWxlbWVudE5hbWUpKTtcbiAgICAgIH1cbiAgICAgIGlmIChkZWZhdWx0VmFsdWVUeXBlLmluZGV4T2YoJyMnKSAhPT0gMCkge1xuICAgICAgICBkZWZhdWx0VmFsdWVUeXBlID0gJyMnICsgZGVmYXVsdFZhbHVlVHlwZTtcbiAgICAgIH1cbiAgICAgIGlmICghZGVmYXVsdFZhbHVlVHlwZS5tYXRjaCgvXigjUkVRVUlSRUR8I0lNUExJRUR8I0ZJWEVEfCNERUZBVUxUKSQvKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGRlZmF1bHQgdmFsdWUgdHlwZTsgZXhwZWN0ZWQ6ICNSRVFVSVJFRCwgI0lNUExJRUQsICNGSVhFRCBvciAjREVGQVVMVC4gXCIgKyB0aGlzLmRlYnVnSW5mbyhlbGVtZW50TmFtZSkpO1xuICAgICAgfVxuICAgICAgaWYgKGRlZmF1bHRWYWx1ZSAmJiAhZGVmYXVsdFZhbHVlVHlwZS5tYXRjaCgvXigjRklYRUR8I0RFRkFVTFQpJC8pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRlZmF1bHQgdmFsdWUgb25seSBhcHBsaWVzIHRvICNGSVhFRCBvciAjREVGQVVMVC4gXCIgKyB0aGlzLmRlYnVnSW5mbyhlbGVtZW50TmFtZSkpO1xuICAgICAgfVxuICAgICAgdGhpcy5lbGVtZW50TmFtZSA9IHRoaXMuc3RyaW5naWZ5Lm5hbWUoZWxlbWVudE5hbWUpO1xuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuQXR0cmlidXRlRGVjbGFyYXRpb247XG4gICAgICB0aGlzLmF0dHJpYnV0ZU5hbWUgPSB0aGlzLnN0cmluZ2lmeS5uYW1lKGF0dHJpYnV0ZU5hbWUpO1xuICAgICAgdGhpcy5hdHRyaWJ1dGVUeXBlID0gdGhpcy5zdHJpbmdpZnkuZHRkQXR0VHlwZShhdHRyaWJ1dGVUeXBlKTtcbiAgICAgIGlmIChkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgdGhpcy5kZWZhdWx0VmFsdWUgPSB0aGlzLnN0cmluZ2lmeS5kdGRBdHREZWZhdWx0KGRlZmF1bHRWYWx1ZSk7XG4gICAgICB9XG4gICAgICB0aGlzLmRlZmF1bHRWYWx1ZVR5cGUgPSBkZWZhdWx0VmFsdWVUeXBlO1xuICAgIH1cblxuICAgIFhNTERUREF0dExpc3QucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy53cml0ZXIuZHRkQXR0TGlzdCh0aGlzLCB0aGlzLm9wdGlvbnMud3JpdGVyLmZpbHRlck9wdGlvbnMob3B0aW9ucykpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRFREQXR0TGlzdDtcblxuICB9KShYTUxOb2RlKTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6WyJOb2RlVHlwZSIsIlhNTERUREF0dExpc3QiLCJYTUxOb2RlIiwiZXh0ZW5kIiwiY2hpbGQiLCJwYXJlbnQiLCJrZXkiLCJoYXNQcm9wIiwiY2FsbCIsImN0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIl9fc3VwZXJfXyIsImhhc093blByb3BlcnR5IiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzdXBlckNsYXNzIiwiZWxlbWVudE5hbWUiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlVHlwZSIsImRlZmF1bHRWYWx1ZVR5cGUiLCJkZWZhdWx0VmFsdWUiLCJFcnJvciIsImRlYnVnSW5mbyIsImluZGV4T2YiLCJtYXRjaCIsInN0cmluZ2lmeSIsIm5hbWUiLCJ0eXBlIiwiQXR0cmlidXRlRGVjbGFyYXRpb24iLCJkdGRBdHRUeXBlIiwiZHRkQXR0RGVmYXVsdCIsInRvU3RyaW5nIiwib3B0aW9ucyIsIndyaXRlciIsImR0ZEF0dExpc3QiLCJmaWx0ZXJPcHRpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDTDAttList.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDTDElement.js":
/*!**************************************************************************!*\
  !*** ./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDTDElement.js ***!
  \**************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, XMLDTDElement, XMLNode, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLNode.js\");\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/NodeType.js\");\n    module.exports = XMLDTDElement = function(superClass) {\n        extend(XMLDTDElement, superClass);\n        function XMLDTDElement(parent, name, value) {\n            XMLDTDElement.__super__.constructor.call(this, parent);\n            if (name == null) {\n                throw new Error(\"Missing DTD element name. \" + this.debugInfo());\n            }\n            if (!value) {\n                value = \"(#PCDATA)\";\n            }\n            if (Array.isArray(value)) {\n                value = \"(\" + value.join(\",\") + \")\";\n            }\n            this.name = this.stringify.name(name);\n            this.type = NodeType.ElementDeclaration;\n            this.value = this.stringify.dtdElementValue(value);\n        }\n        XMLDTDElement.prototype.toString = function(options) {\n            return this.options.writer.dtdElement(this, this.options.writer.filterOptions(options));\n        };\n        return XMLDTDElement;\n    }(XMLNode);\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveG1sMmpzL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxEVERFbGVtZW50LmpzIiwibWFwcGluZ3MiOiJBQUFBLG1DQUFtQztBQUNsQztJQUNDLElBQUlBLFVBQVVDLGVBQWVDLFNBQzNCQyxTQUFTLFNBQVNDLEtBQUssRUFBRUMsTUFBTTtRQUFJLElBQUssSUFBSUMsT0FBT0QsT0FBUTtZQUFFLElBQUlFLFFBQVFDLElBQUksQ0FBQ0gsUUFBUUMsTUFBTUYsS0FBSyxDQUFDRSxJQUFJLEdBQUdELE1BQU0sQ0FBQ0MsSUFBSTtRQUFFO1FBQUUsU0FBU0c7WUFBUyxJQUFJLENBQUNDLFdBQVcsR0FBR047UUFBTztRQUFFSyxLQUFLRSxTQUFTLEdBQUdOLE9BQU9NLFNBQVM7UUFBRVAsTUFBTU8sU0FBUyxHQUFHLElBQUlGO1FBQVFMLE1BQU1RLFNBQVMsR0FBR1AsT0FBT00sU0FBUztRQUFFLE9BQU9QO0lBQU8sR0FDelJHLFVBQVUsQ0FBQyxFQUFFTSxjQUFjO0lBRTdCWCxVQUFVWSxtQkFBT0EsQ0FBQztJQUVsQmQsV0FBV2MsbUJBQU9BLENBQUM7SUFFbkJDLE9BQU9DLE9BQU8sR0FBR2YsZ0JBQWdCLFNBQVVnQixVQUFVO1FBQ25EZCxPQUFPRixlQUFlZ0I7UUFFdEIsU0FBU2hCLGNBQWNJLE1BQU0sRUFBRWEsSUFBSSxFQUFFQyxLQUFLO1lBQ3hDbEIsY0FBY1csU0FBUyxDQUFDRixXQUFXLENBQUNGLElBQUksQ0FBQyxJQUFJLEVBQUVIO1lBQy9DLElBQUlhLFFBQVEsTUFBTTtnQkFDaEIsTUFBTSxJQUFJRSxNQUFNLCtCQUErQixJQUFJLENBQUNDLFNBQVM7WUFDL0Q7WUFDQSxJQUFJLENBQUNGLE9BQU87Z0JBQ1ZBLFFBQVE7WUFDVjtZQUNBLElBQUlHLE1BQU1DLE9BQU8sQ0FBQ0osUUFBUTtnQkFDeEJBLFFBQVEsTUFBTUEsTUFBTUssSUFBSSxDQUFDLE9BQU87WUFDbEM7WUFDQSxJQUFJLENBQUNOLElBQUksR0FBRyxJQUFJLENBQUNPLFNBQVMsQ0FBQ1AsSUFBSSxDQUFDQTtZQUNoQyxJQUFJLENBQUNRLElBQUksR0FBRzFCLFNBQVMyQixrQkFBa0I7WUFDdkMsSUFBSSxDQUFDUixLQUFLLEdBQUcsSUFBSSxDQUFDTSxTQUFTLENBQUNHLGVBQWUsQ0FBQ1Q7UUFDOUM7UUFFQWxCLGNBQWNVLFNBQVMsQ0FBQ2tCLFFBQVEsR0FBRyxTQUFTQyxPQUFPO1lBQ2pELE9BQU8sSUFBSSxDQUFDQSxPQUFPLENBQUNDLE1BQU0sQ0FBQ0MsVUFBVSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUNGLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDRSxhQUFhLENBQUNIO1FBQ2hGO1FBRUEsT0FBTzdCO0lBRVQsRUFBR0M7QUFFTCxHQUFHTSxJQUFJLENBQUMsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL3BwdHgtb3B0aW1pemVyLy4vbm9kZV9tb2R1bGVzL3htbDJqcy9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MRFRERWxlbWVudC5qcz80OWIxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MRFRERWxlbWVudCwgWE1MTm9kZSxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIFhNTE5vZGUgPSByZXF1aXJlKCcuL1hNTE5vZGUnKTtcblxuICBOb2RlVHlwZSA9IHJlcXVpcmUoJy4vTm9kZVR5cGUnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTERUREVsZW1lbnQgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICAgIGV4dGVuZChYTUxEVERFbGVtZW50LCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTERUREVsZW1lbnQocGFyZW50LCBuYW1lLCB2YWx1ZSkge1xuICAgICAgWE1MRFRERWxlbWVudC5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJlbnQpO1xuICAgICAgaWYgKG5hbWUgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIERURCBlbGVtZW50IG5hbWUuIFwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgICB9XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHZhbHVlID0gJygjUENEQVRBKSc7XG4gICAgICB9XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSAnKCcgKyB2YWx1ZS5qb2luKCcsJykgKyAnKSc7XG4gICAgICB9XG4gICAgICB0aGlzLm5hbWUgPSB0aGlzLnN0cmluZ2lmeS5uYW1lKG5hbWUpO1xuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuRWxlbWVudERlY2xhcmF0aW9uO1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuc3RyaW5naWZ5LmR0ZEVsZW1lbnRWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgWE1MRFRERWxlbWVudC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5kdGRFbGVtZW50KHRoaXMsIHRoaXMub3B0aW9ucy53cml0ZXIuZmlsdGVyT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxEVERFbGVtZW50O1xuXG4gIH0pKFhNTE5vZGUpO1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm5hbWVzIjpbIk5vZGVUeXBlIiwiWE1MRFRERWxlbWVudCIsIlhNTE5vZGUiLCJleHRlbmQiLCJjaGlsZCIsInBhcmVudCIsImtleSIsImhhc1Byb3AiLCJjYWxsIiwiY3RvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiX19zdXBlcl9fIiwiaGFzT3duUHJvcGVydHkiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInN1cGVyQ2xhc3MiLCJuYW1lIiwidmFsdWUiLCJFcnJvciIsImRlYnVnSW5mbyIsIkFycmF5IiwiaXNBcnJheSIsImpvaW4iLCJzdHJpbmdpZnkiLCJ0eXBlIiwiRWxlbWVudERlY2xhcmF0aW9uIiwiZHRkRWxlbWVudFZhbHVlIiwidG9TdHJpbmciLCJvcHRpb25zIiwid3JpdGVyIiwiZHRkRWxlbWVudCIsImZpbHRlck9wdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDTDElement.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDTDEntity.js":
/*!*************************************************************************!*\
  !*** ./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDTDEntity.js ***!
  \*************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, XMLDTDEntity, XMLNode, isObject, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    isObject = (__webpack_require__(/*! ./Utility */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/Utility.js\").isObject);\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLNode.js\");\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/NodeType.js\");\n    module.exports = XMLDTDEntity = function(superClass) {\n        extend(XMLDTDEntity, superClass);\n        function XMLDTDEntity(parent, pe, name, value) {\n            XMLDTDEntity.__super__.constructor.call(this, parent);\n            if (name == null) {\n                throw new Error(\"Missing DTD entity name. \" + this.debugInfo(name));\n            }\n            if (value == null) {\n                throw new Error(\"Missing DTD entity value. \" + this.debugInfo(name));\n            }\n            this.pe = !!pe;\n            this.name = this.stringify.name(name);\n            this.type = NodeType.EntityDeclaration;\n            if (!isObject(value)) {\n                this.value = this.stringify.dtdEntityValue(value);\n                this.internal = true;\n            } else {\n                if (!value.pubID && !value.sysID) {\n                    throw new Error(\"Public and/or system identifiers are required for an external entity. \" + this.debugInfo(name));\n                }\n                if (value.pubID && !value.sysID) {\n                    throw new Error(\"System identifier is required for a public external entity. \" + this.debugInfo(name));\n                }\n                this.internal = false;\n                if (value.pubID != null) {\n                    this.pubID = this.stringify.dtdPubID(value.pubID);\n                }\n                if (value.sysID != null) {\n                    this.sysID = this.stringify.dtdSysID(value.sysID);\n                }\n                if (value.nData != null) {\n                    this.nData = this.stringify.dtdNData(value.nData);\n                }\n                if (this.pe && this.nData) {\n                    throw new Error(\"Notation declaration is not allowed in a parameter entity. \" + this.debugInfo(name));\n                }\n            }\n        }\n        Object.defineProperty(XMLDTDEntity.prototype, \"publicId\", {\n            get: function() {\n                return this.pubID;\n            }\n        });\n        Object.defineProperty(XMLDTDEntity.prototype, \"systemId\", {\n            get: function() {\n                return this.sysID;\n            }\n        });\n        Object.defineProperty(XMLDTDEntity.prototype, \"notationName\", {\n            get: function() {\n                return this.nData || null;\n            }\n        });\n        Object.defineProperty(XMLDTDEntity.prototype, \"inputEncoding\", {\n            get: function() {\n                return null;\n            }\n        });\n        Object.defineProperty(XMLDTDEntity.prototype, \"xmlEncoding\", {\n            get: function() {\n                return null;\n            }\n        });\n        Object.defineProperty(XMLDTDEntity.prototype, \"xmlVersion\", {\n            get: function() {\n                return null;\n            }\n        });\n        XMLDTDEntity.prototype.toString = function(options) {\n            return this.options.writer.dtdEntity(this, this.options.writer.filterOptions(options));\n        };\n        return XMLDTDEntity;\n    }(XMLNode);\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDTDEntity.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDTDNotation.js":
/*!***************************************************************************!*\
  !*** ./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDTDNotation.js ***!
  \***************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, XMLDTDNotation, XMLNode, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLNode.js\");\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/NodeType.js\");\n    module.exports = XMLDTDNotation = function(superClass) {\n        extend(XMLDTDNotation, superClass);\n        function XMLDTDNotation(parent, name, value) {\n            XMLDTDNotation.__super__.constructor.call(this, parent);\n            if (name == null) {\n                throw new Error(\"Missing DTD notation name. \" + this.debugInfo(name));\n            }\n            if (!value.pubID && !value.sysID) {\n                throw new Error(\"Public or system identifiers are required for an external entity. \" + this.debugInfo(name));\n            }\n            this.name = this.stringify.name(name);\n            this.type = NodeType.NotationDeclaration;\n            if (value.pubID != null) {\n                this.pubID = this.stringify.dtdPubID(value.pubID);\n            }\n            if (value.sysID != null) {\n                this.sysID = this.stringify.dtdSysID(value.sysID);\n            }\n        }\n        Object.defineProperty(XMLDTDNotation.prototype, \"publicId\", {\n            get: function() {\n                return this.pubID;\n            }\n        });\n        Object.defineProperty(XMLDTDNotation.prototype, \"systemId\", {\n            get: function() {\n                return this.sysID;\n            }\n        });\n        XMLDTDNotation.prototype.toString = function(options) {\n            return this.options.writer.dtdNotation(this, this.options.writer.filterOptions(options));\n        };\n        return XMLDTDNotation;\n    }(XMLNode);\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveG1sMmpzL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxEVEROb3RhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxtQ0FBbUM7QUFDbEM7SUFDQyxJQUFJQSxVQUFVQyxnQkFBZ0JDLFNBQzVCQyxTQUFTLFNBQVNDLEtBQUssRUFBRUMsTUFBTTtRQUFJLElBQUssSUFBSUMsT0FBT0QsT0FBUTtZQUFFLElBQUlFLFFBQVFDLElBQUksQ0FBQ0gsUUFBUUMsTUFBTUYsS0FBSyxDQUFDRSxJQUFJLEdBQUdELE1BQU0sQ0FBQ0MsSUFBSTtRQUFFO1FBQUUsU0FBU0c7WUFBUyxJQUFJLENBQUNDLFdBQVcsR0FBR047UUFBTztRQUFFSyxLQUFLRSxTQUFTLEdBQUdOLE9BQU9NLFNBQVM7UUFBRVAsTUFBTU8sU0FBUyxHQUFHLElBQUlGO1FBQVFMLE1BQU1RLFNBQVMsR0FBR1AsT0FBT00sU0FBUztRQUFFLE9BQU9QO0lBQU8sR0FDelJHLFVBQVUsQ0FBQyxFQUFFTSxjQUFjO0lBRTdCWCxVQUFVWSxtQkFBT0EsQ0FBQztJQUVsQmQsV0FBV2MsbUJBQU9BLENBQUM7SUFFbkJDLE9BQU9DLE9BQU8sR0FBR2YsaUJBQWlCLFNBQVVnQixVQUFVO1FBQ3BEZCxPQUFPRixnQkFBZ0JnQjtRQUV2QixTQUFTaEIsZUFBZUksTUFBTSxFQUFFYSxJQUFJLEVBQUVDLEtBQUs7WUFDekNsQixlQUFlVyxTQUFTLENBQUNGLFdBQVcsQ0FBQ0YsSUFBSSxDQUFDLElBQUksRUFBRUg7WUFDaEQsSUFBSWEsUUFBUSxNQUFNO2dCQUNoQixNQUFNLElBQUlFLE1BQU0sZ0NBQWdDLElBQUksQ0FBQ0MsU0FBUyxDQUFDSDtZQUNqRTtZQUNBLElBQUksQ0FBQ0MsTUFBTUcsS0FBSyxJQUFJLENBQUNILE1BQU1JLEtBQUssRUFBRTtnQkFDaEMsTUFBTSxJQUFJSCxNQUFNLHVFQUF1RSxJQUFJLENBQUNDLFNBQVMsQ0FBQ0g7WUFDeEc7WUFDQSxJQUFJLENBQUNBLElBQUksR0FBRyxJQUFJLENBQUNNLFNBQVMsQ0FBQ04sSUFBSSxDQUFDQTtZQUNoQyxJQUFJLENBQUNPLElBQUksR0FBR3pCLFNBQVMwQixtQkFBbUI7WUFDeEMsSUFBSVAsTUFBTUcsS0FBSyxJQUFJLE1BQU07Z0JBQ3ZCLElBQUksQ0FBQ0EsS0FBSyxHQUFHLElBQUksQ0FBQ0UsU0FBUyxDQUFDRyxRQUFRLENBQUNSLE1BQU1HLEtBQUs7WUFDbEQ7WUFDQSxJQUFJSCxNQUFNSSxLQUFLLElBQUksTUFBTTtnQkFDdkIsSUFBSSxDQUFDQSxLQUFLLEdBQUcsSUFBSSxDQUFDQyxTQUFTLENBQUNJLFFBQVEsQ0FBQ1QsTUFBTUksS0FBSztZQUNsRDtRQUNGO1FBRUFNLE9BQU9DLGNBQWMsQ0FBQzdCLGVBQWVVLFNBQVMsRUFBRSxZQUFZO1lBQzFEb0IsS0FBSztnQkFDSCxPQUFPLElBQUksQ0FBQ1QsS0FBSztZQUNuQjtRQUNGO1FBRUFPLE9BQU9DLGNBQWMsQ0FBQzdCLGVBQWVVLFNBQVMsRUFBRSxZQUFZO1lBQzFEb0IsS0FBSztnQkFDSCxPQUFPLElBQUksQ0FBQ1IsS0FBSztZQUNuQjtRQUNGO1FBRUF0QixlQUFlVSxTQUFTLENBQUNxQixRQUFRLEdBQUcsU0FBU0MsT0FBTztZQUNsRCxPQUFPLElBQUksQ0FBQ0EsT0FBTyxDQUFDQyxNQUFNLENBQUNDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDRixPQUFPLENBQUNDLE1BQU0sQ0FBQ0UsYUFBYSxDQUFDSDtRQUNqRjtRQUVBLE9BQU9oQztJQUVULEVBQUdDO0FBRUwsR0FBR00sSUFBSSxDQUFDLElBQUkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcHR4LW9wdGltaXplci8uL25vZGVfbW9kdWxlcy94bWwyanMvbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERURE5vdGF0aW9uLmpzP2NiY2IiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIE5vZGVUeXBlLCBYTUxEVEROb3RhdGlvbiwgWE1MTm9kZSxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIFhNTE5vZGUgPSByZXF1aXJlKCcuL1hNTE5vZGUnKTtcblxuICBOb2RlVHlwZSA9IHJlcXVpcmUoJy4vTm9kZVR5cGUnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTERURE5vdGF0aW9uID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoWE1MRFRETm90YXRpb24sIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gWE1MRFRETm90YXRpb24ocGFyZW50LCBuYW1lLCB2YWx1ZSkge1xuICAgICAgWE1MRFRETm90YXRpb24uX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyZW50KTtcbiAgICAgIGlmIChuYW1lID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBEVEQgbm90YXRpb24gbmFtZS4gXCIgKyB0aGlzLmRlYnVnSW5mbyhuYW1lKSk7XG4gICAgICB9XG4gICAgICBpZiAoIXZhbHVlLnB1YklEICYmICF2YWx1ZS5zeXNJRCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQdWJsaWMgb3Igc3lzdGVtIGlkZW50aWZpZXJzIGFyZSByZXF1aXJlZCBmb3IgYW4gZXh0ZXJuYWwgZW50aXR5LiBcIiArIHRoaXMuZGVidWdJbmZvKG5hbWUpKTtcbiAgICAgIH1cbiAgICAgIHRoaXMubmFtZSA9IHRoaXMuc3RyaW5naWZ5Lm5hbWUobmFtZSk7XG4gICAgICB0aGlzLnR5cGUgPSBOb2RlVHlwZS5Ob3RhdGlvbkRlY2xhcmF0aW9uO1xuICAgICAgaWYgKHZhbHVlLnB1YklEICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5wdWJJRCA9IHRoaXMuc3RyaW5naWZ5LmR0ZFB1YklEKHZhbHVlLnB1YklEKTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZS5zeXNJRCAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuc3lzSUQgPSB0aGlzLnN0cmluZ2lmeS5kdGRTeXNJRCh2YWx1ZS5zeXNJRCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTERURE5vdGF0aW9uLnByb3RvdHlwZSwgJ3B1YmxpY0lkJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHViSUQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRFRETm90YXRpb24ucHJvdG90eXBlLCAnc3lzdGVtSWQnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zeXNJRDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIFhNTERURE5vdGF0aW9uLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMud3JpdGVyLmR0ZE5vdGF0aW9uKHRoaXMsIHRoaXMub3B0aW9ucy53cml0ZXIuZmlsdGVyT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxEVEROb3RhdGlvbjtcblxuICB9KShYTUxOb2RlKTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6WyJOb2RlVHlwZSIsIlhNTERURE5vdGF0aW9uIiwiWE1MTm9kZSIsImV4dGVuZCIsImNoaWxkIiwicGFyZW50Iiwia2V5IiwiaGFzUHJvcCIsImNhbGwiLCJjdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfX3N1cGVyX18iLCJoYXNPd25Qcm9wZXJ0eSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic3VwZXJDbGFzcyIsIm5hbWUiLCJ2YWx1ZSIsIkVycm9yIiwiZGVidWdJbmZvIiwicHViSUQiLCJzeXNJRCIsInN0cmluZ2lmeSIsInR5cGUiLCJOb3RhdGlvbkRlY2xhcmF0aW9uIiwiZHRkUHViSUQiLCJkdGRTeXNJRCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwidG9TdHJpbmciLCJvcHRpb25zIiwid3JpdGVyIiwiZHRkTm90YXRpb24iLCJmaWx0ZXJPcHRpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDTDNotation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDeclaration.js":
/*!***************************************************************************!*\
  !*** ./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDeclaration.js ***!
  \***************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, XMLDeclaration, XMLNode, isObject, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    isObject = (__webpack_require__(/*! ./Utility */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/Utility.js\").isObject);\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLNode.js\");\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/NodeType.js\");\n    module.exports = XMLDeclaration = function(superClass) {\n        extend(XMLDeclaration, superClass);\n        function XMLDeclaration(parent, version, encoding, standalone) {\n            var ref;\n            XMLDeclaration.__super__.constructor.call(this, parent);\n            if (isObject(version)) {\n                ref = version, version = ref.version, encoding = ref.encoding, standalone = ref.standalone;\n            }\n            if (!version) {\n                version = \"1.0\";\n            }\n            this.type = NodeType.Declaration;\n            this.version = this.stringify.xmlVersion(version);\n            if (encoding != null) {\n                this.encoding = this.stringify.xmlEncoding(encoding);\n            }\n            if (standalone != null) {\n                this.standalone = this.stringify.xmlStandalone(standalone);\n            }\n        }\n        XMLDeclaration.prototype.toString = function(options) {\n            return this.options.writer.declaration(this, this.options.writer.filterOptions(options));\n        };\n        return XMLDeclaration;\n    }(XMLNode);\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveG1sMmpzL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxEZWNsYXJhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxtQ0FBbUM7QUFDbEM7SUFDQyxJQUFJQSxVQUFVQyxnQkFBZ0JDLFNBQVNDLFVBQ3JDQyxTQUFTLFNBQVNDLEtBQUssRUFBRUMsTUFBTTtRQUFJLElBQUssSUFBSUMsT0FBT0QsT0FBUTtZQUFFLElBQUlFLFFBQVFDLElBQUksQ0FBQ0gsUUFBUUMsTUFBTUYsS0FBSyxDQUFDRSxJQUFJLEdBQUdELE1BQU0sQ0FBQ0MsSUFBSTtRQUFFO1FBQUUsU0FBU0c7WUFBUyxJQUFJLENBQUNDLFdBQVcsR0FBR047UUFBTztRQUFFSyxLQUFLRSxTQUFTLEdBQUdOLE9BQU9NLFNBQVM7UUFBRVAsTUFBTU8sU0FBUyxHQUFHLElBQUlGO1FBQVFMLE1BQU1RLFNBQVMsR0FBR1AsT0FBT00sU0FBUztRQUFFLE9BQU9QO0lBQU8sR0FDelJHLFVBQVUsQ0FBQyxFQUFFTSxjQUFjO0lBRTdCWCxXQUFXWSxxSEFBNkI7SUFFeENiLFVBQVVhLG1CQUFPQSxDQUFDO0lBRWxCZixXQUFXZSxtQkFBT0EsQ0FBQztJQUVuQkMsT0FBT0MsT0FBTyxHQUFHaEIsaUJBQWlCLFNBQVVpQixVQUFVO1FBQ3BEZCxPQUFPSCxnQkFBZ0JpQjtRQUV2QixTQUFTakIsZUFBZUssTUFBTSxFQUFFYSxPQUFPLEVBQUVDLFFBQVEsRUFBRUMsVUFBVTtZQUMzRCxJQUFJQztZQUNKckIsZUFBZVksU0FBUyxDQUFDRixXQUFXLENBQUNGLElBQUksQ0FBQyxJQUFJLEVBQUVIO1lBQ2hELElBQUlILFNBQVNnQixVQUFVO2dCQUNyQkcsTUFBTUgsU0FBU0EsVUFBVUcsSUFBSUgsT0FBTyxFQUFFQyxXQUFXRSxJQUFJRixRQUFRLEVBQUVDLGFBQWFDLElBQUlELFVBQVU7WUFDNUY7WUFDQSxJQUFJLENBQUNGLFNBQVM7Z0JBQ1pBLFVBQVU7WUFDWjtZQUNBLElBQUksQ0FBQ0ksSUFBSSxHQUFHdkIsU0FBU3dCLFdBQVc7WUFDaEMsSUFBSSxDQUFDTCxPQUFPLEdBQUcsSUFBSSxDQUFDTSxTQUFTLENBQUNDLFVBQVUsQ0FBQ1A7WUFDekMsSUFBSUMsWUFBWSxNQUFNO2dCQUNwQixJQUFJLENBQUNBLFFBQVEsR0FBRyxJQUFJLENBQUNLLFNBQVMsQ0FBQ0UsV0FBVyxDQUFDUDtZQUM3QztZQUNBLElBQUlDLGNBQWMsTUFBTTtnQkFDdEIsSUFBSSxDQUFDQSxVQUFVLEdBQUcsSUFBSSxDQUFDSSxTQUFTLENBQUNHLGFBQWEsQ0FBQ1A7WUFDakQ7UUFDRjtRQUVBcEIsZUFBZVcsU0FBUyxDQUFDaUIsUUFBUSxHQUFHLFNBQVNDLE9BQU87WUFDbEQsT0FBTyxJQUFJLENBQUNBLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDQyxXQUFXLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQ0YsT0FBTyxDQUFDQyxNQUFNLENBQUNFLGFBQWEsQ0FBQ0g7UUFDakY7UUFFQSxPQUFPN0I7SUFFVCxFQUFHQztBQUVMLEdBQUdPLElBQUksQ0FBQyxJQUFJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHB0eC1vcHRpbWl6ZXIvLi9ub2RlX21vZHVsZXMveG1sMmpzL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxEZWNsYXJhdGlvbi5qcz9hZDU4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MRGVjbGFyYXRpb24sIFhNTE5vZGUsIGlzT2JqZWN0LFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgaXNPYmplY3QgPSByZXF1aXJlKCcuL1V0aWxpdHknKS5pc09iamVjdDtcblxuICBYTUxOb2RlID0gcmVxdWlyZSgnLi9YTUxOb2RlJyk7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxEZWNsYXJhdGlvbiA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTERlY2xhcmF0aW9uLCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTERlY2xhcmF0aW9uKHBhcmVudCwgdmVyc2lvbiwgZW5jb2RpbmcsIHN0YW5kYWxvbmUpIHtcbiAgICAgIHZhciByZWY7XG4gICAgICBYTUxEZWNsYXJhdGlvbi5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJlbnQpO1xuICAgICAgaWYgKGlzT2JqZWN0KHZlcnNpb24pKSB7XG4gICAgICAgIHJlZiA9IHZlcnNpb24sIHZlcnNpb24gPSByZWYudmVyc2lvbiwgZW5jb2RpbmcgPSByZWYuZW5jb2RpbmcsIHN0YW5kYWxvbmUgPSByZWYuc3RhbmRhbG9uZTtcbiAgICAgIH1cbiAgICAgIGlmICghdmVyc2lvbikge1xuICAgICAgICB2ZXJzaW9uID0gJzEuMCc7XG4gICAgICB9XG4gICAgICB0aGlzLnR5cGUgPSBOb2RlVHlwZS5EZWNsYXJhdGlvbjtcbiAgICAgIHRoaXMudmVyc2lvbiA9IHRoaXMuc3RyaW5naWZ5LnhtbFZlcnNpb24odmVyc2lvbik7XG4gICAgICBpZiAoZW5jb2RpbmcgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLmVuY29kaW5nID0gdGhpcy5zdHJpbmdpZnkueG1sRW5jb2RpbmcoZW5jb2RpbmcpO1xuICAgICAgfVxuICAgICAgaWYgKHN0YW5kYWxvbmUgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnN0YW5kYWxvbmUgPSB0aGlzLnN0cmluZ2lmeS54bWxTdGFuZGFsb25lKHN0YW5kYWxvbmUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIFhNTERlY2xhcmF0aW9uLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMud3JpdGVyLmRlY2xhcmF0aW9uKHRoaXMsIHRoaXMub3B0aW9ucy53cml0ZXIuZmlsdGVyT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxEZWNsYXJhdGlvbjtcblxuICB9KShYTUxOb2RlKTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6WyJOb2RlVHlwZSIsIlhNTERlY2xhcmF0aW9uIiwiWE1MTm9kZSIsImlzT2JqZWN0IiwiZXh0ZW5kIiwiY2hpbGQiLCJwYXJlbnQiLCJrZXkiLCJoYXNQcm9wIiwiY2FsbCIsImN0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIl9fc3VwZXJfXyIsImhhc093blByb3BlcnR5IiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzdXBlckNsYXNzIiwidmVyc2lvbiIsImVuY29kaW5nIiwic3RhbmRhbG9uZSIsInJlZiIsInR5cGUiLCJEZWNsYXJhdGlvbiIsInN0cmluZ2lmeSIsInhtbFZlcnNpb24iLCJ4bWxFbmNvZGluZyIsInhtbFN0YW5kYWxvbmUiLCJ0b1N0cmluZyIsIm9wdGlvbnMiLCJ3cml0ZXIiLCJkZWNsYXJhdGlvbiIsImZpbHRlck9wdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDeclaration.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDocType.js":
/*!***********************************************************************!*\
  !*** ./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDocType.js ***!
  \***********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLNamedNodeMap, XMLNode, isObject, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    isObject = (__webpack_require__(/*! ./Utility */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/Utility.js\").isObject);\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLNode.js\");\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLDTDAttList = __webpack_require__(/*! ./XMLDTDAttList */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDTDAttList.js\");\n    XMLDTDEntity = __webpack_require__(/*! ./XMLDTDEntity */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDTDEntity.js\");\n    XMLDTDElement = __webpack_require__(/*! ./XMLDTDElement */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDTDElement.js\");\n    XMLDTDNotation = __webpack_require__(/*! ./XMLDTDNotation */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDTDNotation.js\");\n    XMLNamedNodeMap = __webpack_require__(/*! ./XMLNamedNodeMap */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLNamedNodeMap.js\");\n    module.exports = XMLDocType = function(superClass) {\n        extend(XMLDocType, superClass);\n        function XMLDocType(parent, pubID, sysID) {\n            var child, i, len, ref, ref1, ref2;\n            XMLDocType.__super__.constructor.call(this, parent);\n            this.type = NodeType.DocType;\n            if (parent.children) {\n                ref = parent.children;\n                for(i = 0, len = ref.length; i < len; i++){\n                    child = ref[i];\n                    if (child.type === NodeType.Element) {\n                        this.name = child.name;\n                        break;\n                    }\n                }\n            }\n            this.documentObject = parent;\n            if (isObject(pubID)) {\n                ref1 = pubID, pubID = ref1.pubID, sysID = ref1.sysID;\n            }\n            if (sysID == null) {\n                ref2 = [\n                    pubID,\n                    sysID\n                ], sysID = ref2[0], pubID = ref2[1];\n            }\n            if (pubID != null) {\n                this.pubID = this.stringify.dtdPubID(pubID);\n            }\n            if (sysID != null) {\n                this.sysID = this.stringify.dtdSysID(sysID);\n            }\n        }\n        Object.defineProperty(XMLDocType.prototype, \"entities\", {\n            get: function() {\n                var child, i, len, nodes, ref;\n                nodes = {};\n                ref = this.children;\n                for(i = 0, len = ref.length; i < len; i++){\n                    child = ref[i];\n                    if (child.type === NodeType.EntityDeclaration && !child.pe) {\n                        nodes[child.name] = child;\n                    }\n                }\n                return new XMLNamedNodeMap(nodes);\n            }\n        });\n        Object.defineProperty(XMLDocType.prototype, \"notations\", {\n            get: function() {\n                var child, i, len, nodes, ref;\n                nodes = {};\n                ref = this.children;\n                for(i = 0, len = ref.length; i < len; i++){\n                    child = ref[i];\n                    if (child.type === NodeType.NotationDeclaration) {\n                        nodes[child.name] = child;\n                    }\n                }\n                return new XMLNamedNodeMap(nodes);\n            }\n        });\n        Object.defineProperty(XMLDocType.prototype, \"publicId\", {\n            get: function() {\n                return this.pubID;\n            }\n        });\n        Object.defineProperty(XMLDocType.prototype, \"systemId\", {\n            get: function() {\n                return this.sysID;\n            }\n        });\n        Object.defineProperty(XMLDocType.prototype, \"internalSubset\", {\n            get: function() {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n        });\n        XMLDocType.prototype.element = function(name, value) {\n            var child;\n            child = new XMLDTDElement(this, name, value);\n            this.children.push(child);\n            return this;\n        };\n        XMLDocType.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n            var child;\n            child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);\n            this.children.push(child);\n            return this;\n        };\n        XMLDocType.prototype.entity = function(name, value) {\n            var child;\n            child = new XMLDTDEntity(this, false, name, value);\n            this.children.push(child);\n            return this;\n        };\n        XMLDocType.prototype.pEntity = function(name, value) {\n            var child;\n            child = new XMLDTDEntity(this, true, name, value);\n            this.children.push(child);\n            return this;\n        };\n        XMLDocType.prototype.notation = function(name, value) {\n            var child;\n            child = new XMLDTDNotation(this, name, value);\n            this.children.push(child);\n            return this;\n        };\n        XMLDocType.prototype.toString = function(options) {\n            return this.options.writer.docType(this, this.options.writer.filterOptions(options));\n        };\n        XMLDocType.prototype.ele = function(name, value) {\n            return this.element(name, value);\n        };\n        XMLDocType.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n            return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);\n        };\n        XMLDocType.prototype.ent = function(name, value) {\n            return this.entity(name, value);\n        };\n        XMLDocType.prototype.pent = function(name, value) {\n            return this.pEntity(name, value);\n        };\n        XMLDocType.prototype.not = function(name, value) {\n            return this.notation(name, value);\n        };\n        XMLDocType.prototype.up = function() {\n            return this.root() || this.documentObject;\n        };\n        XMLDocType.prototype.isEqualNode = function(node) {\n            if (!XMLDocType.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {\n                return false;\n            }\n            if (node.name !== this.name) {\n                return false;\n            }\n            if (node.publicId !== this.publicId) {\n                return false;\n            }\n            if (node.systemId !== this.systemId) {\n                return false;\n            }\n            return true;\n        };\n        return XMLDocType;\n    }(XMLNode);\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDocType.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDocument.js":
/*!************************************************************************!*\
  !*** ./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDocument.js ***!
  \************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, XMLDOMConfiguration, XMLDOMImplementation, XMLDocument, XMLNode, XMLStringWriter, XMLStringifier, isPlainObject, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    isPlainObject = (__webpack_require__(/*! ./Utility */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/Utility.js\").isPlainObject);\n    XMLDOMImplementation = __webpack_require__(/*! ./XMLDOMImplementation */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDOMImplementation.js\");\n    XMLDOMConfiguration = __webpack_require__(/*! ./XMLDOMConfiguration */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDOMConfiguration.js\");\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLNode.js\");\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLStringifier = __webpack_require__(/*! ./XMLStringifier */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLStringifier.js\");\n    XMLStringWriter = __webpack_require__(/*! ./XMLStringWriter */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLStringWriter.js\");\n    module.exports = XMLDocument = function(superClass) {\n        extend(XMLDocument, superClass);\n        function XMLDocument(options) {\n            XMLDocument.__super__.constructor.call(this, null);\n            this.name = \"#document\";\n            this.type = NodeType.Document;\n            this.documentURI = null;\n            this.domConfig = new XMLDOMConfiguration();\n            options || (options = {});\n            if (!options.writer) {\n                options.writer = new XMLStringWriter();\n            }\n            this.options = options;\n            this.stringify = new XMLStringifier(options);\n        }\n        Object.defineProperty(XMLDocument.prototype, \"implementation\", {\n            value: new XMLDOMImplementation()\n        });\n        Object.defineProperty(XMLDocument.prototype, \"doctype\", {\n            get: function() {\n                var child, i, len, ref;\n                ref = this.children;\n                for(i = 0, len = ref.length; i < len; i++){\n                    child = ref[i];\n                    if (child.type === NodeType.DocType) {\n                        return child;\n                    }\n                }\n                return null;\n            }\n        });\n        Object.defineProperty(XMLDocument.prototype, \"documentElement\", {\n            get: function() {\n                return this.rootObject || null;\n            }\n        });\n        Object.defineProperty(XMLDocument.prototype, \"inputEncoding\", {\n            get: function() {\n                return null;\n            }\n        });\n        Object.defineProperty(XMLDocument.prototype, \"strictErrorChecking\", {\n            get: function() {\n                return false;\n            }\n        });\n        Object.defineProperty(XMLDocument.prototype, \"xmlEncoding\", {\n            get: function() {\n                if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n                    return this.children[0].encoding;\n                } else {\n                    return null;\n                }\n            }\n        });\n        Object.defineProperty(XMLDocument.prototype, \"xmlStandalone\", {\n            get: function() {\n                if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n                    return this.children[0].standalone === \"yes\";\n                } else {\n                    return false;\n                }\n            }\n        });\n        Object.defineProperty(XMLDocument.prototype, \"xmlVersion\", {\n            get: function() {\n                if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n                    return this.children[0].version;\n                } else {\n                    return \"1.0\";\n                }\n            }\n        });\n        Object.defineProperty(XMLDocument.prototype, \"URL\", {\n            get: function() {\n                return this.documentURI;\n            }\n        });\n        Object.defineProperty(XMLDocument.prototype, \"origin\", {\n            get: function() {\n                return null;\n            }\n        });\n        Object.defineProperty(XMLDocument.prototype, \"compatMode\", {\n            get: function() {\n                return null;\n            }\n        });\n        Object.defineProperty(XMLDocument.prototype, \"characterSet\", {\n            get: function() {\n                return null;\n            }\n        });\n        Object.defineProperty(XMLDocument.prototype, \"contentType\", {\n            get: function() {\n                return null;\n            }\n        });\n        XMLDocument.prototype.end = function(writer) {\n            var writerOptions;\n            writerOptions = {};\n            if (!writer) {\n                writer = this.options.writer;\n            } else if (isPlainObject(writer)) {\n                writerOptions = writer;\n                writer = this.options.writer;\n            }\n            return writer.document(this, writer.filterOptions(writerOptions));\n        };\n        XMLDocument.prototype.toString = function(options) {\n            return this.options.writer.document(this, this.options.writer.filterOptions(options));\n        };\n        XMLDocument.prototype.createElement = function(tagName) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.createDocumentFragment = function() {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.createTextNode = function(data) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.createComment = function(data) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.createCDATASection = function(data) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.createProcessingInstruction = function(target, data) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.createAttribute = function(name) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.createEntityReference = function(name) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.getElementsByTagName = function(tagname) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.importNode = function(importedNode, deep) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.createElementNS = function(namespaceURI, qualifiedName) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.createAttributeNS = function(namespaceURI, qualifiedName) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.getElementById = function(elementId) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.adoptNode = function(source) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.normalizeDocument = function() {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.renameNode = function(node, namespaceURI, qualifiedName) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.getElementsByClassName = function(classNames) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.createEvent = function(eventInterface) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.createRange = function() {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.createNodeIterator = function(root, whatToShow, filter) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLDocument.prototype.createTreeWalker = function(root, whatToShow, filter) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        return XMLDocument;\n    }(XMLNode);\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDocument.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDocumentCB.js":
/*!**************************************************************************!*\
  !*** ./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDocumentCB.js ***!
  \**************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, WriterState, XMLAttribute, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDocument, XMLDocumentCB, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStringWriter, XMLStringifier, XMLText, getValue, isFunction, isObject, isPlainObject, ref, hasProp = {}.hasOwnProperty;\n    ref = __webpack_require__(/*! ./Utility */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/Utility.js\"), isObject = ref.isObject, isFunction = ref.isFunction, isPlainObject = ref.isPlainObject, getValue = ref.getValue;\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLDocument = __webpack_require__(/*! ./XMLDocument */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDocument.js\");\n    XMLElement = __webpack_require__(/*! ./XMLElement */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLElement.js\");\n    XMLCData = __webpack_require__(/*! ./XMLCData */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLCData.js\");\n    XMLComment = __webpack_require__(/*! ./XMLComment */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLComment.js\");\n    XMLRaw = __webpack_require__(/*! ./XMLRaw */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLRaw.js\");\n    XMLText = __webpack_require__(/*! ./XMLText */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLText.js\");\n    XMLProcessingInstruction = __webpack_require__(/*! ./XMLProcessingInstruction */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLProcessingInstruction.js\");\n    XMLDeclaration = __webpack_require__(/*! ./XMLDeclaration */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDeclaration.js\");\n    XMLDocType = __webpack_require__(/*! ./XMLDocType */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDocType.js\");\n    XMLDTDAttList = __webpack_require__(/*! ./XMLDTDAttList */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDTDAttList.js\");\n    XMLDTDEntity = __webpack_require__(/*! ./XMLDTDEntity */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDTDEntity.js\");\n    XMLDTDElement = __webpack_require__(/*! ./XMLDTDElement */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDTDElement.js\");\n    XMLDTDNotation = __webpack_require__(/*! ./XMLDTDNotation */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDTDNotation.js\");\n    XMLAttribute = __webpack_require__(/*! ./XMLAttribute */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLAttribute.js\");\n    XMLStringifier = __webpack_require__(/*! ./XMLStringifier */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLStringifier.js\");\n    XMLStringWriter = __webpack_require__(/*! ./XMLStringWriter */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLStringWriter.js\");\n    WriterState = __webpack_require__(/*! ./WriterState */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/WriterState.js\");\n    module.exports = XMLDocumentCB = function() {\n        function XMLDocumentCB(options, onData, onEnd) {\n            var writerOptions;\n            this.name = \"?xml\";\n            this.type = NodeType.Document;\n            options || (options = {});\n            writerOptions = {};\n            if (!options.writer) {\n                options.writer = new XMLStringWriter();\n            } else if (isPlainObject(options.writer)) {\n                writerOptions = options.writer;\n                options.writer = new XMLStringWriter();\n            }\n            this.options = options;\n            this.writer = options.writer;\n            this.writerOptions = this.writer.filterOptions(writerOptions);\n            this.stringify = new XMLStringifier(options);\n            this.onDataCallback = onData || function() {};\n            this.onEndCallback = onEnd || function() {};\n            this.currentNode = null;\n            this.currentLevel = -1;\n            this.openTags = {};\n            this.documentStarted = false;\n            this.documentCompleted = false;\n            this.root = null;\n        }\n        XMLDocumentCB.prototype.createChildNode = function(node) {\n            var att, attName, attributes, child, i, len, ref1, ref2;\n            switch(node.type){\n                case NodeType.CData:\n                    this.cdata(node.value);\n                    break;\n                case NodeType.Comment:\n                    this.comment(node.value);\n                    break;\n                case NodeType.Element:\n                    attributes = {};\n                    ref1 = node.attribs;\n                    for(attName in ref1){\n                        if (!hasProp.call(ref1, attName)) continue;\n                        att = ref1[attName];\n                        attributes[attName] = att.value;\n                    }\n                    this.node(node.name, attributes);\n                    break;\n                case NodeType.Dummy:\n                    this.dummy();\n                    break;\n                case NodeType.Raw:\n                    this.raw(node.value);\n                    break;\n                case NodeType.Text:\n                    this.text(node.value);\n                    break;\n                case NodeType.ProcessingInstruction:\n                    this.instruction(node.target, node.value);\n                    break;\n                default:\n                    throw new Error(\"This XML node type is not supported in a JS object: \" + node.constructor.name);\n            }\n            ref2 = node.children;\n            for(i = 0, len = ref2.length; i < len; i++){\n                child = ref2[i];\n                this.createChildNode(child);\n                if (child.type === NodeType.Element) {\n                    this.up();\n                }\n            }\n            return this;\n        };\n        XMLDocumentCB.prototype.dummy = function() {\n            return this;\n        };\n        XMLDocumentCB.prototype.node = function(name, attributes, text) {\n            var ref1;\n            if (name == null) {\n                throw new Error(\"Missing node name.\");\n            }\n            if (this.root && this.currentLevel === -1) {\n                throw new Error(\"Document can only have one root node. \" + this.debugInfo(name));\n            }\n            this.openCurrent();\n            name = getValue(name);\n            if (attributes == null) {\n                attributes = {};\n            }\n            attributes = getValue(attributes);\n            if (!isObject(attributes)) {\n                ref1 = [\n                    attributes,\n                    text\n                ], text = ref1[0], attributes = ref1[1];\n            }\n            this.currentNode = new XMLElement(this, name, attributes);\n            this.currentNode.children = false;\n            this.currentLevel++;\n            this.openTags[this.currentLevel] = this.currentNode;\n            if (text != null) {\n                this.text(text);\n            }\n            return this;\n        };\n        XMLDocumentCB.prototype.element = function(name, attributes, text) {\n            var child, i, len, oldValidationFlag, ref1, root;\n            if (this.currentNode && this.currentNode.type === NodeType.DocType) {\n                this.dtdElement.apply(this, arguments);\n            } else {\n                if (Array.isArray(name) || isObject(name) || isFunction(name)) {\n                    oldValidationFlag = this.options.noValidation;\n                    this.options.noValidation = true;\n                    root = new XMLDocument(this.options).element(\"TEMP_ROOT\");\n                    root.element(name);\n                    this.options.noValidation = oldValidationFlag;\n                    ref1 = root.children;\n                    for(i = 0, len = ref1.length; i < len; i++){\n                        child = ref1[i];\n                        this.createChildNode(child);\n                        if (child.type === NodeType.Element) {\n                            this.up();\n                        }\n                    }\n                } else {\n                    this.node(name, attributes, text);\n                }\n            }\n            return this;\n        };\n        XMLDocumentCB.prototype.attribute = function(name, value) {\n            var attName, attValue;\n            if (!this.currentNode || this.currentNode.children) {\n                throw new Error(\"att() can only be used immediately after an ele() call in callback mode. \" + this.debugInfo(name));\n            }\n            if (name != null) {\n                name = getValue(name);\n            }\n            if (isObject(name)) {\n                for(attName in name){\n                    if (!hasProp.call(name, attName)) continue;\n                    attValue = name[attName];\n                    this.attribute(attName, attValue);\n                }\n            } else {\n                if (isFunction(value)) {\n                    value = value.apply();\n                }\n                if (this.options.keepNullAttributes && value == null) {\n                    this.currentNode.attribs[name] = new XMLAttribute(this, name, \"\");\n                } else if (value != null) {\n                    this.currentNode.attribs[name] = new XMLAttribute(this, name, value);\n                }\n            }\n            return this;\n        };\n        XMLDocumentCB.prototype.text = function(value) {\n            var node;\n            this.openCurrent();\n            node = new XMLText(this, value);\n            this.onData(this.writer.text(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n            return this;\n        };\n        XMLDocumentCB.prototype.cdata = function(value) {\n            var node;\n            this.openCurrent();\n            node = new XMLCData(this, value);\n            this.onData(this.writer.cdata(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n            return this;\n        };\n        XMLDocumentCB.prototype.comment = function(value) {\n            var node;\n            this.openCurrent();\n            node = new XMLComment(this, value);\n            this.onData(this.writer.comment(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n            return this;\n        };\n        XMLDocumentCB.prototype.raw = function(value) {\n            var node;\n            this.openCurrent();\n            node = new XMLRaw(this, value);\n            this.onData(this.writer.raw(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n            return this;\n        };\n        XMLDocumentCB.prototype.instruction = function(target, value) {\n            var i, insTarget, insValue, len, node;\n            this.openCurrent();\n            if (target != null) {\n                target = getValue(target);\n            }\n            if (value != null) {\n                value = getValue(value);\n            }\n            if (Array.isArray(target)) {\n                for(i = 0, len = target.length; i < len; i++){\n                    insTarget = target[i];\n                    this.instruction(insTarget);\n                }\n            } else if (isObject(target)) {\n                for(insTarget in target){\n                    if (!hasProp.call(target, insTarget)) continue;\n                    insValue = target[insTarget];\n                    this.instruction(insTarget, insValue);\n                }\n            } else {\n                if (isFunction(value)) {\n                    value = value.apply();\n                }\n                node = new XMLProcessingInstruction(this, target, value);\n                this.onData(this.writer.processingInstruction(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n            }\n            return this;\n        };\n        XMLDocumentCB.prototype.declaration = function(version, encoding, standalone) {\n            var node;\n            this.openCurrent();\n            if (this.documentStarted) {\n                throw new Error(\"declaration() must be the first node.\");\n            }\n            node = new XMLDeclaration(this, version, encoding, standalone);\n            this.onData(this.writer.declaration(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n            return this;\n        };\n        XMLDocumentCB.prototype.doctype = function(root, pubID, sysID) {\n            this.openCurrent();\n            if (root == null) {\n                throw new Error(\"Missing root node name.\");\n            }\n            if (this.root) {\n                throw new Error(\"dtd() must come before the root node.\");\n            }\n            this.currentNode = new XMLDocType(this, pubID, sysID);\n            this.currentNode.rootNodeName = root;\n            this.currentNode.children = false;\n            this.currentLevel++;\n            this.openTags[this.currentLevel] = this.currentNode;\n            return this;\n        };\n        XMLDocumentCB.prototype.dtdElement = function(name, value) {\n            var node;\n            this.openCurrent();\n            node = new XMLDTDElement(this, name, value);\n            this.onData(this.writer.dtdElement(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n            return this;\n        };\n        XMLDocumentCB.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n            var node;\n            this.openCurrent();\n            node = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);\n            this.onData(this.writer.dtdAttList(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n            return this;\n        };\n        XMLDocumentCB.prototype.entity = function(name, value) {\n            var node;\n            this.openCurrent();\n            node = new XMLDTDEntity(this, false, name, value);\n            this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n            return this;\n        };\n        XMLDocumentCB.prototype.pEntity = function(name, value) {\n            var node;\n            this.openCurrent();\n            node = new XMLDTDEntity(this, true, name, value);\n            this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n            return this;\n        };\n        XMLDocumentCB.prototype.notation = function(name, value) {\n            var node;\n            this.openCurrent();\n            node = new XMLDTDNotation(this, name, value);\n            this.onData(this.writer.dtdNotation(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n            return this;\n        };\n        XMLDocumentCB.prototype.up = function() {\n            if (this.currentLevel < 0) {\n                throw new Error(\"The document node has no parent.\");\n            }\n            if (this.currentNode) {\n                if (this.currentNode.children) {\n                    this.closeNode(this.currentNode);\n                } else {\n                    this.openNode(this.currentNode);\n                }\n                this.currentNode = null;\n            } else {\n                this.closeNode(this.openTags[this.currentLevel]);\n            }\n            delete this.openTags[this.currentLevel];\n            this.currentLevel--;\n            return this;\n        };\n        XMLDocumentCB.prototype.end = function() {\n            while(this.currentLevel >= 0){\n                this.up();\n            }\n            return this.onEnd();\n        };\n        XMLDocumentCB.prototype.openCurrent = function() {\n            if (this.currentNode) {\n                this.currentNode.children = true;\n                return this.openNode(this.currentNode);\n            }\n        };\n        XMLDocumentCB.prototype.openNode = function(node) {\n            var att, chunk, name, ref1;\n            if (!node.isOpen) {\n                if (!this.root && this.currentLevel === 0 && node.type === NodeType.Element) {\n                    this.root = node;\n                }\n                chunk = \"\";\n                if (node.type === NodeType.Element) {\n                    this.writerOptions.state = WriterState.OpenTag;\n                    chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + \"<\" + node.name;\n                    ref1 = node.attribs;\n                    for(name in ref1){\n                        if (!hasProp.call(ref1, name)) continue;\n                        att = ref1[name];\n                        chunk += this.writer.attribute(att, this.writerOptions, this.currentLevel);\n                    }\n                    chunk += (node.children ? \">\" : \"/>\") + this.writer.endline(node, this.writerOptions, this.currentLevel);\n                    this.writerOptions.state = WriterState.InsideTag;\n                } else {\n                    this.writerOptions.state = WriterState.OpenTag;\n                    chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + \"<!DOCTYPE \" + node.rootNodeName;\n                    if (node.pubID && node.sysID) {\n                        chunk += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n                    } else if (node.sysID) {\n                        chunk += ' SYSTEM \"' + node.sysID + '\"';\n                    }\n                    if (node.children) {\n                        chunk += \" [\";\n                        this.writerOptions.state = WriterState.InsideTag;\n                    } else {\n                        this.writerOptions.state = WriterState.CloseTag;\n                        chunk += \">\";\n                    }\n                    chunk += this.writer.endline(node, this.writerOptions, this.currentLevel);\n                }\n                this.onData(chunk, this.currentLevel);\n                return node.isOpen = true;\n            }\n        };\n        XMLDocumentCB.prototype.closeNode = function(node) {\n            var chunk;\n            if (!node.isClosed) {\n                chunk = \"\";\n                this.writerOptions.state = WriterState.CloseTag;\n                if (node.type === NodeType.Element) {\n                    chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + \"</\" + node.name + \">\" + this.writer.endline(node, this.writerOptions, this.currentLevel);\n                } else {\n                    chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + \"]>\" + this.writer.endline(node, this.writerOptions, this.currentLevel);\n                }\n                this.writerOptions.state = WriterState.None;\n                this.onData(chunk, this.currentLevel);\n                return node.isClosed = true;\n            }\n        };\n        XMLDocumentCB.prototype.onData = function(chunk, level) {\n            this.documentStarted = true;\n            return this.onDataCallback(chunk, level + 1);\n        };\n        XMLDocumentCB.prototype.onEnd = function() {\n            this.documentCompleted = true;\n            return this.onEndCallback();\n        };\n        XMLDocumentCB.prototype.debugInfo = function(name) {\n            if (name == null) {\n                return \"\";\n            } else {\n                return \"node: <\" + name + \">\";\n            }\n        };\n        XMLDocumentCB.prototype.ele = function() {\n            return this.element.apply(this, arguments);\n        };\n        XMLDocumentCB.prototype.nod = function(name, attributes, text) {\n            return this.node(name, attributes, text);\n        };\n        XMLDocumentCB.prototype.txt = function(value) {\n            return this.text(value);\n        };\n        XMLDocumentCB.prototype.dat = function(value) {\n            return this.cdata(value);\n        };\n        XMLDocumentCB.prototype.com = function(value) {\n            return this.comment(value);\n        };\n        XMLDocumentCB.prototype.ins = function(target, value) {\n            return this.instruction(target, value);\n        };\n        XMLDocumentCB.prototype.dec = function(version, encoding, standalone) {\n            return this.declaration(version, encoding, standalone);\n        };\n        XMLDocumentCB.prototype.dtd = function(root, pubID, sysID) {\n            return this.doctype(root, pubID, sysID);\n        };\n        XMLDocumentCB.prototype.e = function(name, attributes, text) {\n            return this.element(name, attributes, text);\n        };\n        XMLDocumentCB.prototype.n = function(name, attributes, text) {\n            return this.node(name, attributes, text);\n        };\n        XMLDocumentCB.prototype.t = function(value) {\n            return this.text(value);\n        };\n        XMLDocumentCB.prototype.d = function(value) {\n            return this.cdata(value);\n        };\n        XMLDocumentCB.prototype.c = function(value) {\n            return this.comment(value);\n        };\n        XMLDocumentCB.prototype.r = function(value) {\n            return this.raw(value);\n        };\n        XMLDocumentCB.prototype.i = function(target, value) {\n            return this.instruction(target, value);\n        };\n        XMLDocumentCB.prototype.att = function() {\n            if (this.currentNode && this.currentNode.type === NodeType.DocType) {\n                return this.attList.apply(this, arguments);\n            } else {\n                return this.attribute.apply(this, arguments);\n            }\n        };\n        XMLDocumentCB.prototype.a = function() {\n            if (this.currentNode && this.currentNode.type === NodeType.DocType) {\n                return this.attList.apply(this, arguments);\n            } else {\n                return this.attribute.apply(this, arguments);\n            }\n        };\n        XMLDocumentCB.prototype.ent = function(name, value) {\n            return this.entity(name, value);\n        };\n        XMLDocumentCB.prototype.pent = function(name, value) {\n            return this.pEntity(name, value);\n        };\n        XMLDocumentCB.prototype.not = function(name, value) {\n            return this.notation(name, value);\n        };\n        return XMLDocumentCB;\n    }();\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDocumentCB.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDummy.js":
/*!*********************************************************************!*\
  !*** ./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDummy.js ***!
  \*********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, XMLDummy, XMLNode, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLNode.js\");\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/NodeType.js\");\n    module.exports = XMLDummy = function(superClass) {\n        extend(XMLDummy, superClass);\n        function XMLDummy(parent) {\n            XMLDummy.__super__.constructor.call(this, parent);\n            this.type = NodeType.Dummy;\n        }\n        XMLDummy.prototype.clone = function() {\n            return Object.create(this);\n        };\n        XMLDummy.prototype.toString = function(options) {\n            return \"\";\n        };\n        return XMLDummy;\n    }(XMLNode);\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveG1sMmpzL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxEdW1teS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxtQ0FBbUM7QUFDbEM7SUFDQyxJQUFJQSxVQUFVQyxVQUFVQyxTQUN0QkMsU0FBUyxTQUFTQyxLQUFLLEVBQUVDLE1BQU07UUFBSSxJQUFLLElBQUlDLE9BQU9ELE9BQVE7WUFBRSxJQUFJRSxRQUFRQyxJQUFJLENBQUNILFFBQVFDLE1BQU1GLEtBQUssQ0FBQ0UsSUFBSSxHQUFHRCxNQUFNLENBQUNDLElBQUk7UUFBRTtRQUFFLFNBQVNHO1lBQVMsSUFBSSxDQUFDQyxXQUFXLEdBQUdOO1FBQU87UUFBRUssS0FBS0UsU0FBUyxHQUFHTixPQUFPTSxTQUFTO1FBQUVQLE1BQU1PLFNBQVMsR0FBRyxJQUFJRjtRQUFRTCxNQUFNUSxTQUFTLEdBQUdQLE9BQU9NLFNBQVM7UUFBRSxPQUFPUDtJQUFPLEdBQ3pSRyxVQUFVLENBQUMsRUFBRU0sY0FBYztJQUU3QlgsVUFBVVksbUJBQU9BLENBQUM7SUFFbEJkLFdBQVdjLG1CQUFPQSxDQUFDO0lBRW5CQyxPQUFPQyxPQUFPLEdBQUdmLFdBQVcsU0FBVWdCLFVBQVU7UUFDOUNkLE9BQU9GLFVBQVVnQjtRQUVqQixTQUFTaEIsU0FBU0ksTUFBTTtZQUN0QkosU0FBU1csU0FBUyxDQUFDRixXQUFXLENBQUNGLElBQUksQ0FBQyxJQUFJLEVBQUVIO1lBQzFDLElBQUksQ0FBQ2EsSUFBSSxHQUFHbEIsU0FBU21CLEtBQUs7UUFDNUI7UUFFQWxCLFNBQVNVLFNBQVMsQ0FBQ1MsS0FBSyxHQUFHO1lBQ3pCLE9BQU9DLE9BQU9DLE1BQU0sQ0FBQyxJQUFJO1FBQzNCO1FBRUFyQixTQUFTVSxTQUFTLENBQUNZLFFBQVEsR0FBRyxTQUFTQyxPQUFPO1lBQzVDLE9BQU87UUFDVDtRQUVBLE9BQU92QjtJQUVULEVBQUdDO0FBRUwsR0FBR00sSUFBSSxDQUFDLElBQUkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcHR4LW9wdGltaXplci8uL25vZGVfbW9kdWxlcy94bWwyanMvbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTER1bW15LmpzP2JhMjQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIE5vZGVUeXBlLCBYTUxEdW1teSwgWE1MTm9kZSxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIFhNTE5vZGUgPSByZXF1aXJlKCcuL1hNTE5vZGUnKTtcblxuICBOb2RlVHlwZSA9IHJlcXVpcmUoJy4vTm9kZVR5cGUnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTER1bW15ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoWE1MRHVtbXksIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gWE1MRHVtbXkocGFyZW50KSB7XG4gICAgICBYTUxEdW1teS5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJlbnQpO1xuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuRHVtbXk7XG4gICAgfVxuXG4gICAgWE1MRHVtbXkucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZSh0aGlzKTtcbiAgICB9O1xuXG4gICAgWE1MRHVtbXkucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRHVtbXk7XG5cbiAgfSkoWE1MTm9kZSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibmFtZXMiOlsiTm9kZVR5cGUiLCJYTUxEdW1teSIsIlhNTE5vZGUiLCJleHRlbmQiLCJjaGlsZCIsInBhcmVudCIsImtleSIsImhhc1Byb3AiLCJjYWxsIiwiY3RvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiX19zdXBlcl9fIiwiaGFzT3duUHJvcGVydHkiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInN1cGVyQ2xhc3MiLCJ0eXBlIiwiRHVtbXkiLCJjbG9uZSIsIk9iamVjdCIsImNyZWF0ZSIsInRvU3RyaW5nIiwib3B0aW9ucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDummy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLElement.js":
/*!***********************************************************************!*\
  !*** ./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLElement.js ***!
  \***********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, XMLAttribute, XMLElement, XMLNamedNodeMap, XMLNode, getValue, isFunction, isObject, ref, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    ref = __webpack_require__(/*! ./Utility */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/Utility.js\"), isObject = ref.isObject, isFunction = ref.isFunction, getValue = ref.getValue;\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLNode.js\");\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLAttribute = __webpack_require__(/*! ./XMLAttribute */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLAttribute.js\");\n    XMLNamedNodeMap = __webpack_require__(/*! ./XMLNamedNodeMap */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLNamedNodeMap.js\");\n    module.exports = XMLElement = function(superClass) {\n        extend(XMLElement, superClass);\n        function XMLElement(parent, name, attributes) {\n            var child, j, len, ref1;\n            XMLElement.__super__.constructor.call(this, parent);\n            if (name == null) {\n                throw new Error(\"Missing element name. \" + this.debugInfo());\n            }\n            this.name = this.stringify.name(name);\n            this.type = NodeType.Element;\n            this.attribs = {};\n            this.schemaTypeInfo = null;\n            if (attributes != null) {\n                this.attribute(attributes);\n            }\n            if (parent.type === NodeType.Document) {\n                this.isRoot = true;\n                this.documentObject = parent;\n                parent.rootObject = this;\n                if (parent.children) {\n                    ref1 = parent.children;\n                    for(j = 0, len = ref1.length; j < len; j++){\n                        child = ref1[j];\n                        if (child.type === NodeType.DocType) {\n                            child.name = this.name;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        Object.defineProperty(XMLElement.prototype, \"tagName\", {\n            get: function() {\n                return this.name;\n            }\n        });\n        Object.defineProperty(XMLElement.prototype, \"namespaceURI\", {\n            get: function() {\n                return \"\";\n            }\n        });\n        Object.defineProperty(XMLElement.prototype, \"prefix\", {\n            get: function() {\n                return \"\";\n            }\n        });\n        Object.defineProperty(XMLElement.prototype, \"localName\", {\n            get: function() {\n                return this.name;\n            }\n        });\n        Object.defineProperty(XMLElement.prototype, \"id\", {\n            get: function() {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n        });\n        Object.defineProperty(XMLElement.prototype, \"className\", {\n            get: function() {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n        });\n        Object.defineProperty(XMLElement.prototype, \"classList\", {\n            get: function() {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n        });\n        Object.defineProperty(XMLElement.prototype, \"attributes\", {\n            get: function() {\n                if (!this.attributeMap || !this.attributeMap.nodes) {\n                    this.attributeMap = new XMLNamedNodeMap(this.attribs);\n                }\n                return this.attributeMap;\n            }\n        });\n        XMLElement.prototype.clone = function() {\n            var att, attName, clonedSelf, ref1;\n            clonedSelf = Object.create(this);\n            if (clonedSelf.isRoot) {\n                clonedSelf.documentObject = null;\n            }\n            clonedSelf.attribs = {};\n            ref1 = this.attribs;\n            for(attName in ref1){\n                if (!hasProp.call(ref1, attName)) continue;\n                att = ref1[attName];\n                clonedSelf.attribs[attName] = att.clone();\n            }\n            clonedSelf.children = [];\n            this.children.forEach(function(child) {\n                var clonedChild;\n                clonedChild = child.clone();\n                clonedChild.parent = clonedSelf;\n                return clonedSelf.children.push(clonedChild);\n            });\n            return clonedSelf;\n        };\n        XMLElement.prototype.attribute = function(name, value) {\n            var attName, attValue;\n            if (name != null) {\n                name = getValue(name);\n            }\n            if (isObject(name)) {\n                for(attName in name){\n                    if (!hasProp.call(name, attName)) continue;\n                    attValue = name[attName];\n                    this.attribute(attName, attValue);\n                }\n            } else {\n                if (isFunction(value)) {\n                    value = value.apply();\n                }\n                if (this.options.keepNullAttributes && value == null) {\n                    this.attribs[name] = new XMLAttribute(this, name, \"\");\n                } else if (value != null) {\n                    this.attribs[name] = new XMLAttribute(this, name, value);\n                }\n            }\n            return this;\n        };\n        XMLElement.prototype.removeAttribute = function(name) {\n            var attName, j, len;\n            if (name == null) {\n                throw new Error(\"Missing attribute name. \" + this.debugInfo());\n            }\n            name = getValue(name);\n            if (Array.isArray(name)) {\n                for(j = 0, len = name.length; j < len; j++){\n                    attName = name[j];\n                    delete this.attribs[attName];\n                }\n            } else {\n                delete this.attribs[name];\n            }\n            return this;\n        };\n        XMLElement.prototype.toString = function(options) {\n            return this.options.writer.element(this, this.options.writer.filterOptions(options));\n        };\n        XMLElement.prototype.att = function(name, value) {\n            return this.attribute(name, value);\n        };\n        XMLElement.prototype.a = function(name, value) {\n            return this.attribute(name, value);\n        };\n        XMLElement.prototype.getAttribute = function(name) {\n            if (this.attribs.hasOwnProperty(name)) {\n                return this.attribs[name].value;\n            } else {\n                return null;\n            }\n        };\n        XMLElement.prototype.setAttribute = function(name, value) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLElement.prototype.getAttributeNode = function(name) {\n            if (this.attribs.hasOwnProperty(name)) {\n                return this.attribs[name];\n            } else {\n                return null;\n            }\n        };\n        XMLElement.prototype.setAttributeNode = function(newAttr) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLElement.prototype.removeAttributeNode = function(oldAttr) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLElement.prototype.getElementsByTagName = function(name) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLElement.prototype.getAttributeNS = function(namespaceURI, localName) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLElement.prototype.setAttributeNS = function(namespaceURI, qualifiedName, value) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLElement.prototype.removeAttributeNS = function(namespaceURI, localName) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLElement.prototype.getAttributeNodeNS = function(namespaceURI, localName) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLElement.prototype.setAttributeNodeNS = function(newAttr) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLElement.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLElement.prototype.hasAttribute = function(name) {\n            return this.attribs.hasOwnProperty(name);\n        };\n        XMLElement.prototype.hasAttributeNS = function(namespaceURI, localName) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLElement.prototype.setIdAttribute = function(name, isId) {\n            if (this.attribs.hasOwnProperty(name)) {\n                return this.attribs[name].isId;\n            } else {\n                return isId;\n            }\n        };\n        XMLElement.prototype.setIdAttributeNS = function(namespaceURI, localName, isId) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLElement.prototype.setIdAttributeNode = function(idAttr, isId) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLElement.prototype.getElementsByTagName = function(tagname) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLElement.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLElement.prototype.getElementsByClassName = function(classNames) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLElement.prototype.isEqualNode = function(node) {\n            var i, j, ref1;\n            if (!XMLElement.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {\n                return false;\n            }\n            if (node.namespaceURI !== this.namespaceURI) {\n                return false;\n            }\n            if (node.prefix !== this.prefix) {\n                return false;\n            }\n            if (node.localName !== this.localName) {\n                return false;\n            }\n            if (node.attribs.length !== this.attribs.length) {\n                return false;\n            }\n            for(i = j = 0, ref1 = this.attribs.length - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; i = 0 <= ref1 ? ++j : --j){\n                if (!this.attribs[i].isEqualNode(node.attribs[i])) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        return XMLElement;\n    }(XMLNode);\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLElement.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLNamedNodeMap.js":
/*!****************************************************************************!*\
  !*** ./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLNamedNodeMap.js ***!
  \****************************************************************************/
/***/ (function(module) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    var XMLNamedNodeMap;\n    module.exports = XMLNamedNodeMap = function() {\n        function XMLNamedNodeMap(nodes) {\n            this.nodes = nodes;\n        }\n        Object.defineProperty(XMLNamedNodeMap.prototype, \"length\", {\n            get: function() {\n                return Object.keys(this.nodes).length || 0;\n            }\n        });\n        XMLNamedNodeMap.prototype.clone = function() {\n            return this.nodes = null;\n        };\n        XMLNamedNodeMap.prototype.getNamedItem = function(name) {\n            return this.nodes[name];\n        };\n        XMLNamedNodeMap.prototype.setNamedItem = function(node) {\n            var oldNode;\n            oldNode = this.nodes[node.nodeName];\n            this.nodes[node.nodeName] = node;\n            return oldNode || null;\n        };\n        XMLNamedNodeMap.prototype.removeNamedItem = function(name) {\n            var oldNode;\n            oldNode = this.nodes[name];\n            delete this.nodes[name];\n            return oldNode || null;\n        };\n        XMLNamedNodeMap.prototype.item = function(index) {\n            return this.nodes[Object.keys(this.nodes)[index]] || null;\n        };\n        XMLNamedNodeMap.prototype.getNamedItemNS = function(namespaceURI, localName) {\n            throw new Error(\"This DOM method is not implemented.\");\n        };\n        XMLNamedNodeMap.prototype.setNamedItemNS = function(node) {\n            throw new Error(\"This DOM method is not implemented.\");\n        };\n        XMLNamedNodeMap.prototype.removeNamedItemNS = function(namespaceURI, localName) {\n            throw new Error(\"This DOM method is not implemented.\");\n        };\n        return XMLNamedNodeMap;\n    }();\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcHR4LW9wdGltaXplci8uL25vZGVfbW9kdWxlcy94bWwyanMvbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTE5hbWVkTm9kZU1hcC5qcz83Zjk4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBYTUxOYW1lZE5vZGVNYXA7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxOYW1lZE5vZGVNYXAgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gWE1MTmFtZWROb2RlTWFwKG5vZGVzKSB7XG4gICAgICB0aGlzLm5vZGVzID0gbm9kZXM7XG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTE5hbWVkTm9kZU1hcC5wcm90b3R5cGUsICdsZW5ndGgnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5ub2RlcykubGVuZ3RoIHx8IDA7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBYTUxOYW1lZE5vZGVNYXAucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub2RlcyA9IG51bGw7XG4gICAgfTtcblxuICAgIFhNTE5hbWVkTm9kZU1hcC5wcm90b3R5cGUuZ2V0TmFtZWRJdGVtID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZXNbbmFtZV07XG4gICAgfTtcblxuICAgIFhNTE5hbWVkTm9kZU1hcC5wcm90b3R5cGUuc2V0TmFtZWRJdGVtID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgdmFyIG9sZE5vZGU7XG4gICAgICBvbGROb2RlID0gdGhpcy5ub2Rlc1tub2RlLm5vZGVOYW1lXTtcbiAgICAgIHRoaXMubm9kZXNbbm9kZS5ub2RlTmFtZV0gPSBub2RlO1xuICAgICAgcmV0dXJuIG9sZE5vZGUgfHwgbnVsbDtcbiAgICB9O1xuXG4gICAgWE1MTmFtZWROb2RlTWFwLnByb3RvdHlwZS5yZW1vdmVOYW1lZEl0ZW0gPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgICB2YXIgb2xkTm9kZTtcbiAgICAgIG9sZE5vZGUgPSB0aGlzLm5vZGVzW25hbWVdO1xuICAgICAgZGVsZXRlIHRoaXMubm9kZXNbbmFtZV07XG4gICAgICByZXR1cm4gb2xkTm9kZSB8fCBudWxsO1xuICAgIH07XG5cbiAgICBYTUxOYW1lZE5vZGVNYXAucHJvdG90eXBlLml0ZW0gPSBmdW5jdGlvbihpbmRleCkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZXNbT2JqZWN0LmtleXModGhpcy5ub2RlcylbaW5kZXhdXSB8fCBudWxsO1xuICAgIH07XG5cbiAgICBYTUxOYW1lZE5vZGVNYXAucHJvdG90eXBlLmdldE5hbWVkSXRlbU5TID0gZnVuY3Rpb24obmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIpO1xuICAgIH07XG5cbiAgICBYTUxOYW1lZE5vZGVNYXAucHJvdG90eXBlLnNldE5hbWVkSXRlbU5TID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gICAgfTtcblxuICAgIFhNTE5hbWVkTm9kZU1hcC5wcm90b3R5cGUucmVtb3ZlTmFtZWRJdGVtTlMgPSBmdW5jdGlvbihuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxOYW1lZE5vZGVNYXA7XG5cbiAgfSkoKTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6WyJYTUxOYW1lZE5vZGVNYXAiLCJtb2R1bGUiLCJleHBvcnRzIiwibm9kZXMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInByb3RvdHlwZSIsImdldCIsImtleXMiLCJsZW5ndGgiLCJjbG9uZSIsImdldE5hbWVkSXRlbSIsIm5hbWUiLCJzZXROYW1lZEl0ZW0iLCJub2RlIiwib2xkTm9kZSIsIm5vZGVOYW1lIiwicmVtb3ZlTmFtZWRJdGVtIiwiaXRlbSIsImluZGV4IiwiZ2V0TmFtZWRJdGVtTlMiLCJuYW1lc3BhY2VVUkkiLCJsb2NhbE5hbWUiLCJFcnJvciIsInNldE5hbWVkSXRlbU5TIiwicmVtb3ZlTmFtZWRJdGVtTlMiLCJjYWxsIl0sIm1hcHBpbmdzIjoiQUFBQSxtQ0FBbUM7QUFDbEMsQ0FBQTtJQUNDLElBQUlBO0lBRUpDLE9BQU9DLE9BQU8sR0FBR0Ysa0JBQWtCLEFBQUM7UUFDbEMsU0FBU0EsZ0JBQWdCRyxLQUFLO1lBQzVCLElBQUksQ0FBQ0EsS0FBSyxHQUFHQTtRQUNmO1FBRUFDLE9BQU9DLGNBQWMsQ0FBQ0wsZ0JBQWdCTSxTQUFTLEVBQUUsVUFBVTtZQUN6REMsS0FBSztnQkFDSCxPQUFPSCxPQUFPSSxJQUFJLENBQUMsSUFBSSxDQUFDTCxLQUFLLEVBQUVNLE1BQU0sSUFBSTtZQUMzQztRQUNGO1FBRUFULGdCQUFnQk0sU0FBUyxDQUFDSSxLQUFLLEdBQUc7WUFDaEMsT0FBTyxJQUFJLENBQUNQLEtBQUssR0FBRztRQUN0QjtRQUVBSCxnQkFBZ0JNLFNBQVMsQ0FBQ0ssWUFBWSxHQUFHLFNBQVNDLElBQUk7WUFDcEQsT0FBTyxJQUFJLENBQUNULEtBQUssQ0FBQ1MsS0FBSztRQUN6QjtRQUVBWixnQkFBZ0JNLFNBQVMsQ0FBQ08sWUFBWSxHQUFHLFNBQVNDLElBQUk7WUFDcEQsSUFBSUM7WUFDSkEsVUFBVSxJQUFJLENBQUNaLEtBQUssQ0FBQ1csS0FBS0UsUUFBUSxDQUFDO1lBQ25DLElBQUksQ0FBQ2IsS0FBSyxDQUFDVyxLQUFLRSxRQUFRLENBQUMsR0FBR0Y7WUFDNUIsT0FBT0MsV0FBVztRQUNwQjtRQUVBZixnQkFBZ0JNLFNBQVMsQ0FBQ1csZUFBZSxHQUFHLFNBQVNMLElBQUk7WUFDdkQsSUFBSUc7WUFDSkEsVUFBVSxJQUFJLENBQUNaLEtBQUssQ0FBQ1MsS0FBSztZQUMxQixPQUFPLElBQUksQ0FBQ1QsS0FBSyxDQUFDUyxLQUFLO1lBQ3ZCLE9BQU9HLFdBQVc7UUFDcEI7UUFFQWYsZ0JBQWdCTSxTQUFTLENBQUNZLElBQUksR0FBRyxTQUFTQyxLQUFLO1lBQzdDLE9BQU8sSUFBSSxDQUFDaEIsS0FBSyxDQUFDQyxPQUFPSSxJQUFJLENBQUMsSUFBSSxDQUFDTCxLQUFLLENBQUMsQ0FBQ2dCLE1BQU0sQ0FBQyxJQUFJO1FBQ3ZEO1FBRUFuQixnQkFBZ0JNLFNBQVMsQ0FBQ2MsY0FBYyxHQUFHLFNBQVNDLFlBQVksRUFBRUMsU0FBUztZQUN6RSxNQUFNLElBQUlDLE1BQU07UUFDbEI7UUFFQXZCLGdCQUFnQk0sU0FBUyxDQUFDa0IsY0FBYyxHQUFHLFNBQVNWLElBQUk7WUFDdEQsTUFBTSxJQUFJUyxNQUFNO1FBQ2xCO1FBRUF2QixnQkFBZ0JNLFNBQVMsQ0FBQ21CLGlCQUFpQixHQUFHLFNBQVNKLFlBQVksRUFBRUMsU0FBUztZQUM1RSxNQUFNLElBQUlDLE1BQU07UUFDbEI7UUFFQSxPQUFPdkI7SUFFVDtBQUVGLENBQUEsRUFBRzBCLElBQUksQ0FBQyxJQUFJIiwiZmlsZSI6Iihzc3IpLy4vbm9kZV9tb2R1bGVzL3htbDJqcy9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MTmFtZWROb2RlTWFwLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLNamedNodeMap.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLNode.js":
/*!********************************************************************!*\
  !*** ./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLNode.js ***!
  \********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    var DocumentPosition, NodeType, XMLCData, XMLComment, XMLDeclaration, XMLDocType, XMLDummy, XMLElement, XMLNamedNodeMap, XMLNode, XMLNodeList, XMLProcessingInstruction, XMLRaw, XMLText, getValue, isEmpty, isFunction, isObject, ref1, hasProp = {}.hasOwnProperty;\n    ref1 = __webpack_require__(/*! ./Utility */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/Utility.js\"), isObject = ref1.isObject, isFunction = ref1.isFunction, isEmpty = ref1.isEmpty, getValue = ref1.getValue;\n    XMLElement = null;\n    XMLCData = null;\n    XMLComment = null;\n    XMLDeclaration = null;\n    XMLDocType = null;\n    XMLRaw = null;\n    XMLText = null;\n    XMLProcessingInstruction = null;\n    XMLDummy = null;\n    NodeType = null;\n    XMLNodeList = null;\n    XMLNamedNodeMap = null;\n    DocumentPosition = null;\n    module.exports = XMLNode = function() {\n        function XMLNode(parent1) {\n            this.parent = parent1;\n            if (this.parent) {\n                this.options = this.parent.options;\n                this.stringify = this.parent.stringify;\n            }\n            this.value = null;\n            this.children = [];\n            this.baseURI = null;\n            if (!XMLElement) {\n                XMLElement = __webpack_require__(/*! ./XMLElement */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLElement.js\");\n                XMLCData = __webpack_require__(/*! ./XMLCData */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLCData.js\");\n                XMLComment = __webpack_require__(/*! ./XMLComment */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLComment.js\");\n                XMLDeclaration = __webpack_require__(/*! ./XMLDeclaration */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDeclaration.js\");\n                XMLDocType = __webpack_require__(/*! ./XMLDocType */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDocType.js\");\n                XMLRaw = __webpack_require__(/*! ./XMLRaw */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLRaw.js\");\n                XMLText = __webpack_require__(/*! ./XMLText */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLText.js\");\n                XMLProcessingInstruction = __webpack_require__(/*! ./XMLProcessingInstruction */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLProcessingInstruction.js\");\n                XMLDummy = __webpack_require__(/*! ./XMLDummy */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDummy.js\");\n                NodeType = __webpack_require__(/*! ./NodeType */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/NodeType.js\");\n                XMLNodeList = __webpack_require__(/*! ./XMLNodeList */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLNodeList.js\");\n                XMLNamedNodeMap = __webpack_require__(/*! ./XMLNamedNodeMap */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLNamedNodeMap.js\");\n                DocumentPosition = __webpack_require__(/*! ./DocumentPosition */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/DocumentPosition.js\");\n            }\n        }\n        Object.defineProperty(XMLNode.prototype, \"nodeName\", {\n            get: function() {\n                return this.name;\n            }\n        });\n        Object.defineProperty(XMLNode.prototype, \"nodeType\", {\n            get: function() {\n                return this.type;\n            }\n        });\n        Object.defineProperty(XMLNode.prototype, \"nodeValue\", {\n            get: function() {\n                return this.value;\n            }\n        });\n        Object.defineProperty(XMLNode.prototype, \"parentNode\", {\n            get: function() {\n                return this.parent;\n            }\n        });\n        Object.defineProperty(XMLNode.prototype, \"childNodes\", {\n            get: function() {\n                if (!this.childNodeList || !this.childNodeList.nodes) {\n                    this.childNodeList = new XMLNodeList(this.children);\n                }\n                return this.childNodeList;\n            }\n        });\n        Object.defineProperty(XMLNode.prototype, \"firstChild\", {\n            get: function() {\n                return this.children[0] || null;\n            }\n        });\n        Object.defineProperty(XMLNode.prototype, \"lastChild\", {\n            get: function() {\n                return this.children[this.children.length - 1] || null;\n            }\n        });\n        Object.defineProperty(XMLNode.prototype, \"previousSibling\", {\n            get: function() {\n                var i;\n                i = this.parent.children.indexOf(this);\n                return this.parent.children[i - 1] || null;\n            }\n        });\n        Object.defineProperty(XMLNode.prototype, \"nextSibling\", {\n            get: function() {\n                var i;\n                i = this.parent.children.indexOf(this);\n                return this.parent.children[i + 1] || null;\n            }\n        });\n        Object.defineProperty(XMLNode.prototype, \"ownerDocument\", {\n            get: function() {\n                return this.document() || null;\n            }\n        });\n        Object.defineProperty(XMLNode.prototype, \"textContent\", {\n            get: function() {\n                var child, j, len, ref2, str;\n                if (this.nodeType === NodeType.Element || this.nodeType === NodeType.DocumentFragment) {\n                    str = \"\";\n                    ref2 = this.children;\n                    for(j = 0, len = ref2.length; j < len; j++){\n                        child = ref2[j];\n                        if (child.textContent) {\n                            str += child.textContent;\n                        }\n                    }\n                    return str;\n                } else {\n                    return null;\n                }\n            },\n            set: function(value) {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n        });\n        XMLNode.prototype.setParent = function(parent) {\n            var child, j, len, ref2, results;\n            this.parent = parent;\n            if (parent) {\n                this.options = parent.options;\n                this.stringify = parent.stringify;\n            }\n            ref2 = this.children;\n            results = [];\n            for(j = 0, len = ref2.length; j < len; j++){\n                child = ref2[j];\n                results.push(child.setParent(this));\n            }\n            return results;\n        };\n        XMLNode.prototype.element = function(name, attributes, text) {\n            var childNode, item, j, k, key, lastChild, len, len1, ref2, ref3, val;\n            lastChild = null;\n            if (attributes === null && text == null) {\n                ref2 = [\n                    {},\n                    null\n                ], attributes = ref2[0], text = ref2[1];\n            }\n            if (attributes == null) {\n                attributes = {};\n            }\n            attributes = getValue(attributes);\n            if (!isObject(attributes)) {\n                ref3 = [\n                    attributes,\n                    text\n                ], text = ref3[0], attributes = ref3[1];\n            }\n            if (name != null) {\n                name = getValue(name);\n            }\n            if (Array.isArray(name)) {\n                for(j = 0, len = name.length; j < len; j++){\n                    item = name[j];\n                    lastChild = this.element(item);\n                }\n            } else if (isFunction(name)) {\n                lastChild = this.element(name.apply());\n            } else if (isObject(name)) {\n                for(key in name){\n                    if (!hasProp.call(name, key)) continue;\n                    val = name[key];\n                    if (isFunction(val)) {\n                        val = val.apply();\n                    }\n                    if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {\n                        lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);\n                    } else if (!this.options.separateArrayItems && Array.isArray(val) && isEmpty(val)) {\n                        lastChild = this.dummy();\n                    } else if (isObject(val) && isEmpty(val)) {\n                        lastChild = this.element(key);\n                    } else if (!this.options.keepNullNodes && val == null) {\n                        lastChild = this.dummy();\n                    } else if (!this.options.separateArrayItems && Array.isArray(val)) {\n                        for(k = 0, len1 = val.length; k < len1; k++){\n                            item = val[k];\n                            childNode = {};\n                            childNode[key] = item;\n                            lastChild = this.element(childNode);\n                        }\n                    } else if (isObject(val)) {\n                        if (!this.options.ignoreDecorators && this.stringify.convertTextKey && key.indexOf(this.stringify.convertTextKey) === 0) {\n                            lastChild = this.element(val);\n                        } else {\n                            lastChild = this.element(key);\n                            lastChild.element(val);\n                        }\n                    } else {\n                        lastChild = this.element(key, val);\n                    }\n                }\n            } else if (!this.options.keepNullNodes && text === null) {\n                lastChild = this.dummy();\n            } else {\n                if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {\n                    lastChild = this.text(text);\n                } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {\n                    lastChild = this.cdata(text);\n                } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {\n                    lastChild = this.comment(text);\n                } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {\n                    lastChild = this.raw(text);\n                } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && name.indexOf(this.stringify.convertPIKey) === 0) {\n                    lastChild = this.instruction(name.substr(this.stringify.convertPIKey.length), text);\n                } else {\n                    lastChild = this.node(name, attributes, text);\n                }\n            }\n            if (lastChild == null) {\n                throw new Error(\"Could not create any elements with: \" + name + \". \" + this.debugInfo());\n            }\n            return lastChild;\n        };\n        XMLNode.prototype.insertBefore = function(name, attributes, text) {\n            var child, i, newChild, refChild, removed;\n            if (name != null ? name.type : void 0) {\n                newChild = name;\n                refChild = attributes;\n                newChild.setParent(this);\n                if (refChild) {\n                    i = children.indexOf(refChild);\n                    removed = children.splice(i);\n                    children.push(newChild);\n                    Array.prototype.push.apply(children, removed);\n                } else {\n                    children.push(newChild);\n                }\n                return newChild;\n            } else {\n                if (this.isRoot) {\n                    throw new Error(\"Cannot insert elements at root level. \" + this.debugInfo(name));\n                }\n                i = this.parent.children.indexOf(this);\n                removed = this.parent.children.splice(i);\n                child = this.parent.element(name, attributes, text);\n                Array.prototype.push.apply(this.parent.children, removed);\n                return child;\n            }\n        };\n        XMLNode.prototype.insertAfter = function(name, attributes, text) {\n            var child, i, removed;\n            if (this.isRoot) {\n                throw new Error(\"Cannot insert elements at root level. \" + this.debugInfo(name));\n            }\n            i = this.parent.children.indexOf(this);\n            removed = this.parent.children.splice(i + 1);\n            child = this.parent.element(name, attributes, text);\n            Array.prototype.push.apply(this.parent.children, removed);\n            return child;\n        };\n        XMLNode.prototype.remove = function() {\n            var i, ref2;\n            if (this.isRoot) {\n                throw new Error(\"Cannot remove the root element. \" + this.debugInfo());\n            }\n            i = this.parent.children.indexOf(this);\n            [].splice.apply(this.parent.children, [\n                i,\n                i - i + 1\n            ].concat(ref2 = [])), ref2;\n            return this.parent;\n        };\n        XMLNode.prototype.node = function(name, attributes, text) {\n            var child, ref2;\n            if (name != null) {\n                name = getValue(name);\n            }\n            attributes || (attributes = {});\n            attributes = getValue(attributes);\n            if (!isObject(attributes)) {\n                ref2 = [\n                    attributes,\n                    text\n                ], text = ref2[0], attributes = ref2[1];\n            }\n            child = new XMLElement(this, name, attributes);\n            if (text != null) {\n                child.text(text);\n            }\n            this.children.push(child);\n            return child;\n        };\n        XMLNode.prototype.text = function(value) {\n            var child;\n            if (isObject(value)) {\n                this.element(value);\n            }\n            child = new XMLText(this, value);\n            this.children.push(child);\n            return this;\n        };\n        XMLNode.prototype.cdata = function(value) {\n            var child;\n            child = new XMLCData(this, value);\n            this.children.push(child);\n            return this;\n        };\n        XMLNode.prototype.comment = function(value) {\n            var child;\n            child = new XMLComment(this, value);\n            this.children.push(child);\n            return this;\n        };\n        XMLNode.prototype.commentBefore = function(value) {\n            var child, i, removed;\n            i = this.parent.children.indexOf(this);\n            removed = this.parent.children.splice(i);\n            child = this.parent.comment(value);\n            Array.prototype.push.apply(this.parent.children, removed);\n            return this;\n        };\n        XMLNode.prototype.commentAfter = function(value) {\n            var child, i, removed;\n            i = this.parent.children.indexOf(this);\n            removed = this.parent.children.splice(i + 1);\n            child = this.parent.comment(value);\n            Array.prototype.push.apply(this.parent.children, removed);\n            return this;\n        };\n        XMLNode.prototype.raw = function(value) {\n            var child;\n            child = new XMLRaw(this, value);\n            this.children.push(child);\n            return this;\n        };\n        XMLNode.prototype.dummy = function() {\n            var child;\n            child = new XMLDummy(this);\n            return child;\n        };\n        XMLNode.prototype.instruction = function(target, value) {\n            var insTarget, insValue, instruction, j, len;\n            if (target != null) {\n                target = getValue(target);\n            }\n            if (value != null) {\n                value = getValue(value);\n            }\n            if (Array.isArray(target)) {\n                for(j = 0, len = target.length; j < len; j++){\n                    insTarget = target[j];\n                    this.instruction(insTarget);\n                }\n            } else if (isObject(target)) {\n                for(insTarget in target){\n                    if (!hasProp.call(target, insTarget)) continue;\n                    insValue = target[insTarget];\n                    this.instruction(insTarget, insValue);\n                }\n            } else {\n                if (isFunction(value)) {\n                    value = value.apply();\n                }\n                instruction = new XMLProcessingInstruction(this, target, value);\n                this.children.push(instruction);\n            }\n            return this;\n        };\n        XMLNode.prototype.instructionBefore = function(target, value) {\n            var child, i, removed;\n            i = this.parent.children.indexOf(this);\n            removed = this.parent.children.splice(i);\n            child = this.parent.instruction(target, value);\n            Array.prototype.push.apply(this.parent.children, removed);\n            return this;\n        };\n        XMLNode.prototype.instructionAfter = function(target, value) {\n            var child, i, removed;\n            i = this.parent.children.indexOf(this);\n            removed = this.parent.children.splice(i + 1);\n            child = this.parent.instruction(target, value);\n            Array.prototype.push.apply(this.parent.children, removed);\n            return this;\n        };\n        XMLNode.prototype.declaration = function(version, encoding, standalone) {\n            var doc, xmldec;\n            doc = this.document();\n            xmldec = new XMLDeclaration(doc, version, encoding, standalone);\n            if (doc.children.length === 0) {\n                doc.children.unshift(xmldec);\n            } else if (doc.children[0].type === NodeType.Declaration) {\n                doc.children[0] = xmldec;\n            } else {\n                doc.children.unshift(xmldec);\n            }\n            return doc.root() || doc;\n        };\n        XMLNode.prototype.dtd = function(pubID, sysID) {\n            var child, doc, doctype, i, j, k, len, len1, ref2, ref3;\n            doc = this.document();\n            doctype = new XMLDocType(doc, pubID, sysID);\n            ref2 = doc.children;\n            for(i = j = 0, len = ref2.length; j < len; i = ++j){\n                child = ref2[i];\n                if (child.type === NodeType.DocType) {\n                    doc.children[i] = doctype;\n                    return doctype;\n                }\n            }\n            ref3 = doc.children;\n            for(i = k = 0, len1 = ref3.length; k < len1; i = ++k){\n                child = ref3[i];\n                if (child.isRoot) {\n                    doc.children.splice(i, 0, doctype);\n                    return doctype;\n                }\n            }\n            doc.children.push(doctype);\n            return doctype;\n        };\n        XMLNode.prototype.up = function() {\n            if (this.isRoot) {\n                throw new Error(\"The root node has no parent. Use doc() if you need to get the document object.\");\n            }\n            return this.parent;\n        };\n        XMLNode.prototype.root = function() {\n            var node;\n            node = this;\n            while(node){\n                if (node.type === NodeType.Document) {\n                    return node.rootObject;\n                } else if (node.isRoot) {\n                    return node;\n                } else {\n                    node = node.parent;\n                }\n            }\n        };\n        XMLNode.prototype.document = function() {\n            var node;\n            node = this;\n            while(node){\n                if (node.type === NodeType.Document) {\n                    return node;\n                } else {\n                    node = node.parent;\n                }\n            }\n        };\n        XMLNode.prototype.end = function(options) {\n            return this.document().end(options);\n        };\n        XMLNode.prototype.prev = function() {\n            var i;\n            i = this.parent.children.indexOf(this);\n            if (i < 1) {\n                throw new Error(\"Already at the first node. \" + this.debugInfo());\n            }\n            return this.parent.children[i - 1];\n        };\n        XMLNode.prototype.next = function() {\n            var i;\n            i = this.parent.children.indexOf(this);\n            if (i === -1 || i === this.parent.children.length - 1) {\n                throw new Error(\"Already at the last node. \" + this.debugInfo());\n            }\n            return this.parent.children[i + 1];\n        };\n        XMLNode.prototype.importDocument = function(doc) {\n            var clonedRoot;\n            clonedRoot = doc.root().clone();\n            clonedRoot.parent = this;\n            clonedRoot.isRoot = false;\n            this.children.push(clonedRoot);\n            return this;\n        };\n        XMLNode.prototype.debugInfo = function(name) {\n            var ref2, ref3;\n            name = name || this.name;\n            if (name == null && !((ref2 = this.parent) != null ? ref2.name : void 0)) {\n                return \"\";\n            } else if (name == null) {\n                return \"parent: <\" + this.parent.name + \">\";\n            } else if (!((ref3 = this.parent) != null ? ref3.name : void 0)) {\n                return \"node: <\" + name + \">\";\n            } else {\n                return \"node: <\" + name + \">, parent: <\" + this.parent.name + \">\";\n            }\n        };\n        XMLNode.prototype.ele = function(name, attributes, text) {\n            return this.element(name, attributes, text);\n        };\n        XMLNode.prototype.nod = function(name, attributes, text) {\n            return this.node(name, attributes, text);\n        };\n        XMLNode.prototype.txt = function(value) {\n            return this.text(value);\n        };\n        XMLNode.prototype.dat = function(value) {\n            return this.cdata(value);\n        };\n        XMLNode.prototype.com = function(value) {\n            return this.comment(value);\n        };\n        XMLNode.prototype.ins = function(target, value) {\n            return this.instruction(target, value);\n        };\n        XMLNode.prototype.doc = function() {\n            return this.document();\n        };\n        XMLNode.prototype.dec = function(version, encoding, standalone) {\n            return this.declaration(version, encoding, standalone);\n        };\n        XMLNode.prototype.e = function(name, attributes, text) {\n            return this.element(name, attributes, text);\n        };\n        XMLNode.prototype.n = function(name, attributes, text) {\n            return this.node(name, attributes, text);\n        };\n        XMLNode.prototype.t = function(value) {\n            return this.text(value);\n        };\n        XMLNode.prototype.d = function(value) {\n            return this.cdata(value);\n        };\n        XMLNode.prototype.c = function(value) {\n            return this.comment(value);\n        };\n        XMLNode.prototype.r = function(value) {\n            return this.raw(value);\n        };\n        XMLNode.prototype.i = function(target, value) {\n            return this.instruction(target, value);\n        };\n        XMLNode.prototype.u = function() {\n            return this.up();\n        };\n        XMLNode.prototype.importXMLBuilder = function(doc) {\n            return this.importDocument(doc);\n        };\n        XMLNode.prototype.replaceChild = function(newChild, oldChild) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLNode.prototype.removeChild = function(oldChild) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLNode.prototype.appendChild = function(newChild) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLNode.prototype.hasChildNodes = function() {\n            return this.children.length !== 0;\n        };\n        XMLNode.prototype.cloneNode = function(deep) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLNode.prototype.normalize = function() {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLNode.prototype.isSupported = function(feature, version) {\n            return true;\n        };\n        XMLNode.prototype.hasAttributes = function() {\n            return this.attribs.length !== 0;\n        };\n        XMLNode.prototype.compareDocumentPosition = function(other) {\n            var ref, res;\n            ref = this;\n            if (ref === other) {\n                return 0;\n            } else if (this.document() !== other.document()) {\n                res = DocumentPosition.Disconnected | DocumentPosition.ImplementationSpecific;\n                if (Math.random() < 0.5) {\n                    res |= DocumentPosition.Preceding;\n                } else {\n                    res |= DocumentPosition.Following;\n                }\n                return res;\n            } else if (ref.isAncestor(other)) {\n                return DocumentPosition.Contains | DocumentPosition.Preceding;\n            } else if (ref.isDescendant(other)) {\n                return DocumentPosition.Contains | DocumentPosition.Following;\n            } else if (ref.isPreceding(other)) {\n                return DocumentPosition.Preceding;\n            } else {\n                return DocumentPosition.Following;\n            }\n        };\n        XMLNode.prototype.isSameNode = function(other) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLNode.prototype.lookupPrefix = function(namespaceURI) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLNode.prototype.isDefaultNamespace = function(namespaceURI) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLNode.prototype.lookupNamespaceURI = function(prefix) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLNode.prototype.isEqualNode = function(node) {\n            var i, j, ref2;\n            if (node.nodeType !== this.nodeType) {\n                return false;\n            }\n            if (node.children.length !== this.children.length) {\n                return false;\n            }\n            for(i = j = 0, ref2 = this.children.length - 1; 0 <= ref2 ? j <= ref2 : j >= ref2; i = 0 <= ref2 ? ++j : --j){\n                if (!this.children[i].isEqualNode(node.children[i])) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        XMLNode.prototype.getFeature = function(feature, version) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLNode.prototype.setUserData = function(key, data, handler) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLNode.prototype.getUserData = function(key) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLNode.prototype.contains = function(other) {\n            if (!other) {\n                return false;\n            }\n            return other === this || this.isDescendant(other);\n        };\n        XMLNode.prototype.isDescendant = function(node) {\n            var child, isDescendantChild, j, len, ref2;\n            ref2 = this.children;\n            for(j = 0, len = ref2.length; j < len; j++){\n                child = ref2[j];\n                if (node === child) {\n                    return true;\n                }\n                isDescendantChild = child.isDescendant(node);\n                if (isDescendantChild) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        XMLNode.prototype.isAncestor = function(node) {\n            return node.isDescendant(this);\n        };\n        XMLNode.prototype.isPreceding = function(node) {\n            var nodePos, thisPos;\n            nodePos = this.treePosition(node);\n            thisPos = this.treePosition(this);\n            if (nodePos === -1 || thisPos === -1) {\n                return false;\n            } else {\n                return nodePos < thisPos;\n            }\n        };\n        XMLNode.prototype.isFollowing = function(node) {\n            var nodePos, thisPos;\n            nodePos = this.treePosition(node);\n            thisPos = this.treePosition(this);\n            if (nodePos === -1 || thisPos === -1) {\n                return false;\n            } else {\n                return nodePos > thisPos;\n            }\n        };\n        XMLNode.prototype.treePosition = function(node) {\n            var found, pos;\n            pos = 0;\n            found = false;\n            this.foreachTreeNode(this.document(), function(childNode) {\n                pos++;\n                if (!found && childNode === node) {\n                    return found = true;\n                }\n            });\n            if (found) {\n                return pos;\n            } else {\n                return -1;\n            }\n        };\n        XMLNode.prototype.foreachTreeNode = function(node, func) {\n            var child, j, len, ref2, res;\n            node || (node = this.document());\n            ref2 = node.children;\n            for(j = 0, len = ref2.length; j < len; j++){\n                child = ref2[j];\n                if (res = func(child)) {\n                    return res;\n                } else {\n                    res = this.foreachTreeNode(child, func);\n                    if (res) {\n                        return res;\n                    }\n                }\n            }\n        };\n        return XMLNode;\n    }();\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLNodeList.js":
/*!************************************************************************!*\
  !*** ./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLNodeList.js ***!
  \************************************************************************/
/***/ (function(module) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    var XMLNodeList;\n    module.exports = XMLNodeList = function() {\n        function XMLNodeList(nodes) {\n            this.nodes = nodes;\n        }\n        Object.defineProperty(XMLNodeList.prototype, \"length\", {\n            get: function() {\n                return this.nodes.length || 0;\n            }\n        });\n        XMLNodeList.prototype.clone = function() {\n            return this.nodes = null;\n        };\n        XMLNodeList.prototype.item = function(index) {\n            return this.nodes[index] || null;\n        };\n        return XMLNodeList;\n    }();\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcHR4LW9wdGltaXplci8uL25vZGVfbW9kdWxlcy94bWwyanMvbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTE5vZGVMaXN0LmpzPzcxNDkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIFhNTE5vZGVMaXN0O1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MTm9kZUxpc3QgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gWE1MTm9kZUxpc3Qobm9kZXMpIHtcbiAgICAgIHRoaXMubm9kZXMgPSBub2RlcztcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MTm9kZUxpc3QucHJvdG90eXBlLCAnbGVuZ3RoJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZXMubGVuZ3RoIHx8IDA7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBYTUxOb2RlTGlzdC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vZGVzID0gbnVsbDtcbiAgICB9O1xuXG4gICAgWE1MTm9kZUxpc3QucHJvdG90eXBlLml0ZW0gPSBmdW5jdGlvbihpbmRleCkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZXNbaW5kZXhdIHx8IG51bGw7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxOb2RlTGlzdDtcblxuICB9KSgpO1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm5hbWVzIjpbIlhNTE5vZGVMaXN0IiwibW9kdWxlIiwiZXhwb3J0cyIsIm5vZGVzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJwcm90b3R5cGUiLCJnZXQiLCJsZW5ndGgiLCJjbG9uZSIsIml0ZW0iLCJpbmRleCIsImNhbGwiXSwibWFwcGluZ3MiOiJBQUFBLG1DQUFtQztBQUNsQyxDQUFBO0lBQ0MsSUFBSUE7SUFFSkMsT0FBT0MsT0FBTyxHQUFHRixjQUFjLEFBQUM7UUFDOUIsU0FBU0EsWUFBWUcsS0FBSztZQUN4QixJQUFJLENBQUNBLEtBQUssR0FBR0E7UUFDZjtRQUVBQyxPQUFPQyxjQUFjLENBQUNMLFlBQVlNLFNBQVMsRUFBRSxVQUFVO1lBQ3JEQyxLQUFLO2dCQUNILE9BQU8sSUFBSSxDQUFDSixLQUFLLENBQUNLLE1BQU0sSUFBSTtZQUM5QjtRQUNGO1FBRUFSLFlBQVlNLFNBQVMsQ0FBQ0csS0FBSyxHQUFHO1lBQzVCLE9BQU8sSUFBSSxDQUFDTixLQUFLLEdBQUc7UUFDdEI7UUFFQUgsWUFBWU0sU0FBUyxDQUFDSSxJQUFJLEdBQUcsU0FBU0MsS0FBSztZQUN6QyxPQUFPLElBQUksQ0FBQ1IsS0FBSyxDQUFDUSxNQUFNLElBQUk7UUFDOUI7UUFFQSxPQUFPWDtJQUVUO0FBRUYsQ0FBQSxFQUFHWSxJQUFJLENBQUMsSUFBSSIsImZpbGUiOiIoc3NyKS8uL25vZGVfbW9kdWxlcy94bWwyanMvbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTE5vZGVMaXN0LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLNodeList.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLProcessingInstruction.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLProcessingInstruction.js ***!
  \*************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, XMLCharacterData, XMLProcessingInstruction, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLCharacterData = __webpack_require__(/*! ./XMLCharacterData */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLCharacterData.js\");\n    module.exports = XMLProcessingInstruction = function(superClass) {\n        extend(XMLProcessingInstruction, superClass);\n        function XMLProcessingInstruction(parent, target, value) {\n            XMLProcessingInstruction.__super__.constructor.call(this, parent);\n            if (target == null) {\n                throw new Error(\"Missing instruction target. \" + this.debugInfo());\n            }\n            this.type = NodeType.ProcessingInstruction;\n            this.target = this.stringify.insTarget(target);\n            this.name = this.target;\n            if (value) {\n                this.value = this.stringify.insValue(value);\n            }\n        }\n        XMLProcessingInstruction.prototype.clone = function() {\n            return Object.create(this);\n        };\n        XMLProcessingInstruction.prototype.toString = function(options) {\n            return this.options.writer.processingInstruction(this, this.options.writer.filterOptions(options));\n        };\n        XMLProcessingInstruction.prototype.isEqualNode = function(node) {\n            if (!XMLProcessingInstruction.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {\n                return false;\n            }\n            if (node.target !== this.target) {\n                return false;\n            }\n            return true;\n        };\n        return XMLProcessingInstruction;\n    }(XMLCharacterData);\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveG1sMmpzL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQUEsbUNBQW1DO0FBQ2xDO0lBQ0MsSUFBSUEsVUFBVUMsa0JBQWtCQywwQkFDOUJDLFNBQVMsU0FBU0MsS0FBSyxFQUFFQyxNQUFNO1FBQUksSUFBSyxJQUFJQyxPQUFPRCxPQUFRO1lBQUUsSUFBSUUsUUFBUUMsSUFBSSxDQUFDSCxRQUFRQyxNQUFNRixLQUFLLENBQUNFLElBQUksR0FBR0QsTUFBTSxDQUFDQyxJQUFJO1FBQUU7UUFBRSxTQUFTRztZQUFTLElBQUksQ0FBQ0MsV0FBVyxHQUFHTjtRQUFPO1FBQUVLLEtBQUtFLFNBQVMsR0FBR04sT0FBT00sU0FBUztRQUFFUCxNQUFNTyxTQUFTLEdBQUcsSUFBSUY7UUFBUUwsTUFBTVEsU0FBUyxHQUFHUCxPQUFPTSxTQUFTO1FBQUUsT0FBT1A7SUFBTyxHQUN6UkcsVUFBVSxDQUFDLEVBQUVNLGNBQWM7SUFFN0JiLFdBQVdjLG1CQUFPQSxDQUFDO0lBRW5CYixtQkFBbUJhLG1CQUFPQSxDQUFDO0lBRTNCQyxPQUFPQyxPQUFPLEdBQUdkLDJCQUEyQixTQUFVZSxVQUFVO1FBQzlEZCxPQUFPRCwwQkFBMEJlO1FBRWpDLFNBQVNmLHlCQUF5QkcsTUFBTSxFQUFFYSxNQUFNLEVBQUVDLEtBQUs7WUFDckRqQix5QkFBeUJVLFNBQVMsQ0FBQ0YsV0FBVyxDQUFDRixJQUFJLENBQUMsSUFBSSxFQUFFSDtZQUMxRCxJQUFJYSxVQUFVLE1BQU07Z0JBQ2xCLE1BQU0sSUFBSUUsTUFBTSxpQ0FBaUMsSUFBSSxDQUFDQyxTQUFTO1lBQ2pFO1lBQ0EsSUFBSSxDQUFDQyxJQUFJLEdBQUd0QixTQUFTdUIscUJBQXFCO1lBQzFDLElBQUksQ0FBQ0wsTUFBTSxHQUFHLElBQUksQ0FBQ00sU0FBUyxDQUFDQyxTQUFTLENBQUNQO1lBQ3ZDLElBQUksQ0FBQ1EsSUFBSSxHQUFHLElBQUksQ0FBQ1IsTUFBTTtZQUN2QixJQUFJQyxPQUFPO2dCQUNULElBQUksQ0FBQ0EsS0FBSyxHQUFHLElBQUksQ0FBQ0ssU0FBUyxDQUFDRyxRQUFRLENBQUNSO1lBQ3ZDO1FBQ0Y7UUFFQWpCLHlCQUF5QlMsU0FBUyxDQUFDaUIsS0FBSyxHQUFHO1lBQ3pDLE9BQU9DLE9BQU9DLE1BQU0sQ0FBQyxJQUFJO1FBQzNCO1FBRUE1Qix5QkFBeUJTLFNBQVMsQ0FBQ29CLFFBQVEsR0FBRyxTQUFTQyxPQUFPO1lBQzVELE9BQU8sSUFBSSxDQUFDQSxPQUFPLENBQUNDLE1BQU0sQ0FBQ0MscUJBQXFCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQ0YsT0FBTyxDQUFDQyxNQUFNLENBQUNFLGFBQWEsQ0FBQ0g7UUFDM0Y7UUFFQTlCLHlCQUF5QlMsU0FBUyxDQUFDeUIsV0FBVyxHQUFHLFNBQVNDLElBQUk7WUFDNUQsSUFBSSxDQUFDbkMseUJBQXlCVSxTQUFTLENBQUN3QixXQUFXLENBQUNFLEtBQUssQ0FBQyxJQUFJLEVBQUVDLFdBQVdILFdBQVcsQ0FBQ0MsT0FBTztnQkFDNUYsT0FBTztZQUNUO1lBQ0EsSUFBSUEsS0FBS25CLE1BQU0sS0FBSyxJQUFJLENBQUNBLE1BQU0sRUFBRTtnQkFDL0IsT0FBTztZQUNUO1lBQ0EsT0FBTztRQUNUO1FBRUEsT0FBT2hCO0lBRVQsRUFBR0Q7QUFFTCxHQUFHTyxJQUFJLENBQUMsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL3BwdHgtb3B0aW1pemVyLy4vbm9kZV9tb2R1bGVzL3htbDJqcy9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uLmpzP2I0MTkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIE5vZGVUeXBlLCBYTUxDaGFyYWN0ZXJEYXRhLCBYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24sXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBOb2RlVHlwZSA9IHJlcXVpcmUoJy4vTm9kZVR5cGUnKTtcblxuICBYTUxDaGFyYWN0ZXJEYXRhID0gcmVxdWlyZSgnLi9YTUxDaGFyYWN0ZXJEYXRhJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24gPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICAgIGV4dGVuZChYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24sIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uKHBhcmVudCwgdGFyZ2V0LCB2YWx1ZSkge1xuICAgICAgWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHBhcmVudCk7XG4gICAgICBpZiAodGFyZ2V0ID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBpbnN0cnVjdGlvbiB0YXJnZXQuIFwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgICB9XG4gICAgICB0aGlzLnR5cGUgPSBOb2RlVHlwZS5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb247XG4gICAgICB0aGlzLnRhcmdldCA9IHRoaXMuc3RyaW5naWZ5Lmluc1RhcmdldCh0YXJnZXQpO1xuICAgICAgdGhpcy5uYW1lID0gdGhpcy50YXJnZXQ7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuc3RyaW5naWZ5Lmluc1ZhbHVlKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24ucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZSh0aGlzKTtcbiAgICB9O1xuXG4gICAgWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMud3JpdGVyLnByb2Nlc3NpbmdJbnN0cnVjdGlvbih0aGlzLCB0aGlzLm9wdGlvbnMud3JpdGVyLmZpbHRlck9wdGlvbnMob3B0aW9ucykpO1xuICAgIH07XG5cbiAgICBYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24ucHJvdG90eXBlLmlzRXF1YWxOb2RlID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgaWYgKCFYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24uX19zdXBlcl9fLmlzRXF1YWxOb2RlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykuaXNFcXVhbE5vZGUobm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUudGFyZ2V0ICE9PSB0aGlzLnRhcmdldCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbjtcblxuICB9KShYTUxDaGFyYWN0ZXJEYXRhKTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6WyJOb2RlVHlwZSIsIlhNTENoYXJhY3RlckRhdGEiLCJYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24iLCJleHRlbmQiLCJjaGlsZCIsInBhcmVudCIsImtleSIsImhhc1Byb3AiLCJjYWxsIiwiY3RvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiX19zdXBlcl9fIiwiaGFzT3duUHJvcGVydHkiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInN1cGVyQ2xhc3MiLCJ0YXJnZXQiLCJ2YWx1ZSIsIkVycm9yIiwiZGVidWdJbmZvIiwidHlwZSIsIlByb2Nlc3NpbmdJbnN0cnVjdGlvbiIsInN0cmluZ2lmeSIsImluc1RhcmdldCIsIm5hbWUiLCJpbnNWYWx1ZSIsImNsb25lIiwiT2JqZWN0IiwiY3JlYXRlIiwidG9TdHJpbmciLCJvcHRpb25zIiwid3JpdGVyIiwicHJvY2Vzc2luZ0luc3RydWN0aW9uIiwiZmlsdGVyT3B0aW9ucyIsImlzRXF1YWxOb2RlIiwibm9kZSIsImFwcGx5IiwiYXJndW1lbnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLProcessingInstruction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLRaw.js":
/*!*******************************************************************!*\
  !*** ./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLRaw.js ***!
  \*******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, XMLNode, XMLRaw, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLNode.js\");\n    module.exports = XMLRaw = function(superClass) {\n        extend(XMLRaw, superClass);\n        function XMLRaw(parent, text) {\n            XMLRaw.__super__.constructor.call(this, parent);\n            if (text == null) {\n                throw new Error(\"Missing raw text. \" + this.debugInfo());\n            }\n            this.type = NodeType.Raw;\n            this.value = this.stringify.raw(text);\n        }\n        XMLRaw.prototype.clone = function() {\n            return Object.create(this);\n        };\n        XMLRaw.prototype.toString = function(options) {\n            return this.options.writer.raw(this, this.options.writer.filterOptions(options));\n        };\n        return XMLRaw;\n    }(XMLNode);\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveG1sMmpzL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxSYXcuanMiLCJtYXBwaW5ncyI6IkFBQUEsbUNBQW1DO0FBQ2xDO0lBQ0MsSUFBSUEsVUFBVUMsU0FBU0MsUUFDckJDLFNBQVMsU0FBU0MsS0FBSyxFQUFFQyxNQUFNO1FBQUksSUFBSyxJQUFJQyxPQUFPRCxPQUFRO1lBQUUsSUFBSUUsUUFBUUMsSUFBSSxDQUFDSCxRQUFRQyxNQUFNRixLQUFLLENBQUNFLElBQUksR0FBR0QsTUFBTSxDQUFDQyxJQUFJO1FBQUU7UUFBRSxTQUFTRztZQUFTLElBQUksQ0FBQ0MsV0FBVyxHQUFHTjtRQUFPO1FBQUVLLEtBQUtFLFNBQVMsR0FBR04sT0FBT00sU0FBUztRQUFFUCxNQUFNTyxTQUFTLEdBQUcsSUFBSUY7UUFBUUwsTUFBTVEsU0FBUyxHQUFHUCxPQUFPTSxTQUFTO1FBQUUsT0FBT1A7SUFBTyxHQUN6UkcsVUFBVSxDQUFDLEVBQUVNLGNBQWM7SUFFN0JiLFdBQVdjLG1CQUFPQSxDQUFDO0lBRW5CYixVQUFVYSxtQkFBT0EsQ0FBQztJQUVsQkMsT0FBT0MsT0FBTyxHQUFHZCxTQUFTLFNBQVVlLFVBQVU7UUFDNUNkLE9BQU9ELFFBQVFlO1FBRWYsU0FBU2YsT0FBT0csTUFBTSxFQUFFYSxJQUFJO1lBQzFCaEIsT0FBT1UsU0FBUyxDQUFDRixXQUFXLENBQUNGLElBQUksQ0FBQyxJQUFJLEVBQUVIO1lBQ3hDLElBQUlhLFFBQVEsTUFBTTtnQkFDaEIsTUFBTSxJQUFJQyxNQUFNLHVCQUF1QixJQUFJLENBQUNDLFNBQVM7WUFDdkQ7WUFDQSxJQUFJLENBQUNDLElBQUksR0FBR3JCLFNBQVNzQixHQUFHO1lBQ3hCLElBQUksQ0FBQ0MsS0FBSyxHQUFHLElBQUksQ0FBQ0MsU0FBUyxDQUFDQyxHQUFHLENBQUNQO1FBQ2xDO1FBRUFoQixPQUFPUyxTQUFTLENBQUNlLEtBQUssR0FBRztZQUN2QixPQUFPQyxPQUFPQyxNQUFNLENBQUMsSUFBSTtRQUMzQjtRQUVBMUIsT0FBT1MsU0FBUyxDQUFDa0IsUUFBUSxHQUFHLFNBQVNDLE9BQU87WUFDMUMsT0FBTyxJQUFJLENBQUNBLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDTixHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQ0ssT0FBTyxDQUFDQyxNQUFNLENBQUNDLGFBQWEsQ0FBQ0Y7UUFDekU7UUFFQSxPQUFPNUI7SUFFVCxFQUFHRDtBQUVMLEdBQUdPLElBQUksQ0FBQyxJQUFJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHB0eC1vcHRpbWl6ZXIvLi9ub2RlX21vZHVsZXMveG1sMmpzL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxSYXcuanM/YTk2MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuN1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgTm9kZVR5cGUsIFhNTE5vZGUsIFhNTFJhdyxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9Ob2RlVHlwZScpO1xuXG4gIFhNTE5vZGUgPSByZXF1aXJlKCcuL1hNTE5vZGUnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTFJhdyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTFJhdywgc3VwZXJDbGFzcyk7XG5cbiAgICBmdW5jdGlvbiBYTUxSYXcocGFyZW50LCB0ZXh0KSB7XG4gICAgICBYTUxSYXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyZW50KTtcbiAgICAgIGlmICh0ZXh0ID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyByYXcgdGV4dC4gXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICAgIH1cbiAgICAgIHRoaXMudHlwZSA9IE5vZGVUeXBlLlJhdztcbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnN0cmluZ2lmeS5yYXcodGV4dCk7XG4gICAgfVxuXG4gICAgWE1MUmF3LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5jcmVhdGUodGhpcyk7XG4gICAgfTtcblxuICAgIFhNTFJhdy5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5yYXcodGhpcywgdGhpcy5vcHRpb25zLndyaXRlci5maWx0ZXJPcHRpb25zKG9wdGlvbnMpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTFJhdztcblxuICB9KShYTUxOb2RlKTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6WyJOb2RlVHlwZSIsIlhNTE5vZGUiLCJYTUxSYXciLCJleHRlbmQiLCJjaGlsZCIsInBhcmVudCIsImtleSIsImhhc1Byb3AiLCJjYWxsIiwiY3RvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiX19zdXBlcl9fIiwiaGFzT3duUHJvcGVydHkiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInN1cGVyQ2xhc3MiLCJ0ZXh0IiwiRXJyb3IiLCJkZWJ1Z0luZm8iLCJ0eXBlIiwiUmF3IiwidmFsdWUiLCJzdHJpbmdpZnkiLCJyYXciLCJjbG9uZSIsIk9iamVjdCIsImNyZWF0ZSIsInRvU3RyaW5nIiwib3B0aW9ucyIsIndyaXRlciIsImZpbHRlck9wdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLRaw.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLStreamWriter.js":
/*!****************************************************************************!*\
  !*** ./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLStreamWriter.js ***!
  \****************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, WriterState, XMLStreamWriter, XMLWriterBase, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLWriterBase = __webpack_require__(/*! ./XMLWriterBase */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLWriterBase.js\");\n    WriterState = __webpack_require__(/*! ./WriterState */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/WriterState.js\");\n    module.exports = XMLStreamWriter = function(superClass) {\n        extend(XMLStreamWriter, superClass);\n        function XMLStreamWriter(stream, options) {\n            this.stream = stream;\n            XMLStreamWriter.__super__.constructor.call(this, options);\n        }\n        XMLStreamWriter.prototype.endline = function(node, options, level) {\n            if (node.isLastRootNode && options.state === WriterState.CloseTag) {\n                return \"\";\n            } else {\n                return XMLStreamWriter.__super__.endline.call(this, node, options, level);\n            }\n        };\n        XMLStreamWriter.prototype.document = function(doc, options) {\n            var child, i, j, k, len, len1, ref, ref1, results;\n            ref = doc.children;\n            for(i = j = 0, len = ref.length; j < len; i = ++j){\n                child = ref[i];\n                child.isLastRootNode = i === doc.children.length - 1;\n            }\n            options = this.filterOptions(options);\n            ref1 = doc.children;\n            results = [];\n            for(k = 0, len1 = ref1.length; k < len1; k++){\n                child = ref1[k];\n                results.push(this.writeChildNode(child, options, 0));\n            }\n            return results;\n        };\n        XMLStreamWriter.prototype.attribute = function(att, options, level) {\n            return this.stream.write(XMLStreamWriter.__super__.attribute.call(this, att, options, level));\n        };\n        XMLStreamWriter.prototype.cdata = function(node, options, level) {\n            return this.stream.write(XMLStreamWriter.__super__.cdata.call(this, node, options, level));\n        };\n        XMLStreamWriter.prototype.comment = function(node, options, level) {\n            return this.stream.write(XMLStreamWriter.__super__.comment.call(this, node, options, level));\n        };\n        XMLStreamWriter.prototype.declaration = function(node, options, level) {\n            return this.stream.write(XMLStreamWriter.__super__.declaration.call(this, node, options, level));\n        };\n        XMLStreamWriter.prototype.docType = function(node, options, level) {\n            var child, j, len, ref;\n            level || (level = 0);\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            this.stream.write(this.indent(node, options, level));\n            this.stream.write(\"<!DOCTYPE \" + node.root().name);\n            if (node.pubID && node.sysID) {\n                this.stream.write(' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"');\n            } else if (node.sysID) {\n                this.stream.write(' SYSTEM \"' + node.sysID + '\"');\n            }\n            if (node.children.length > 0) {\n                this.stream.write(\" [\");\n                this.stream.write(this.endline(node, options, level));\n                options.state = WriterState.InsideTag;\n                ref = node.children;\n                for(j = 0, len = ref.length; j < len; j++){\n                    child = ref[j];\n                    this.writeChildNode(child, options, level + 1);\n                }\n                options.state = WriterState.CloseTag;\n                this.stream.write(\"]\");\n            }\n            options.state = WriterState.CloseTag;\n            this.stream.write(options.spaceBeforeSlash + \">\");\n            this.stream.write(this.endline(node, options, level));\n            options.state = WriterState.None;\n            return this.closeNode(node, options, level);\n        };\n        XMLStreamWriter.prototype.element = function(node, options, level) {\n            var att, child, childNodeCount, firstChildNode, j, len, name, prettySuppressed, ref, ref1;\n            level || (level = 0);\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            this.stream.write(this.indent(node, options, level) + \"<\" + node.name);\n            ref = node.attribs;\n            for(name in ref){\n                if (!hasProp.call(ref, name)) continue;\n                att = ref[name];\n                this.attribute(att, options, level);\n            }\n            childNodeCount = node.children.length;\n            firstChildNode = childNodeCount === 0 ? null : node.children[0];\n            if (childNodeCount === 0 || node.children.every(function(e) {\n                return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === \"\";\n            })) {\n                if (options.allowEmpty) {\n                    this.stream.write(\">\");\n                    options.state = WriterState.CloseTag;\n                    this.stream.write(\"</\" + node.name + \">\");\n                } else {\n                    options.state = WriterState.CloseTag;\n                    this.stream.write(options.spaceBeforeSlash + \"/>\");\n                }\n            } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && firstChildNode.value != null) {\n                this.stream.write(\">\");\n                options.state = WriterState.InsideTag;\n                options.suppressPrettyCount++;\n                prettySuppressed = true;\n                this.writeChildNode(firstChildNode, options, level + 1);\n                options.suppressPrettyCount--;\n                prettySuppressed = false;\n                options.state = WriterState.CloseTag;\n                this.stream.write(\"</\" + node.name + \">\");\n            } else {\n                this.stream.write(\">\" + this.endline(node, options, level));\n                options.state = WriterState.InsideTag;\n                ref1 = node.children;\n                for(j = 0, len = ref1.length; j < len; j++){\n                    child = ref1[j];\n                    this.writeChildNode(child, options, level + 1);\n                }\n                options.state = WriterState.CloseTag;\n                this.stream.write(this.indent(node, options, level) + \"</\" + node.name + \">\");\n            }\n            this.stream.write(this.endline(node, options, level));\n            options.state = WriterState.None;\n            return this.closeNode(node, options, level);\n        };\n        XMLStreamWriter.prototype.processingInstruction = function(node, options, level) {\n            return this.stream.write(XMLStreamWriter.__super__.processingInstruction.call(this, node, options, level));\n        };\n        XMLStreamWriter.prototype.raw = function(node, options, level) {\n            return this.stream.write(XMLStreamWriter.__super__.raw.call(this, node, options, level));\n        };\n        XMLStreamWriter.prototype.text = function(node, options, level) {\n            return this.stream.write(XMLStreamWriter.__super__.text.call(this, node, options, level));\n        };\n        XMLStreamWriter.prototype.dtdAttList = function(node, options, level) {\n            return this.stream.write(XMLStreamWriter.__super__.dtdAttList.call(this, node, options, level));\n        };\n        XMLStreamWriter.prototype.dtdElement = function(node, options, level) {\n            return this.stream.write(XMLStreamWriter.__super__.dtdElement.call(this, node, options, level));\n        };\n        XMLStreamWriter.prototype.dtdEntity = function(node, options, level) {\n            return this.stream.write(XMLStreamWriter.__super__.dtdEntity.call(this, node, options, level));\n        };\n        XMLStreamWriter.prototype.dtdNotation = function(node, options, level) {\n            return this.stream.write(XMLStreamWriter.__super__.dtdNotation.call(this, node, options, level));\n        };\n        return XMLStreamWriter;\n    }(XMLWriterBase);\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLStreamWriter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLStringWriter.js":
/*!****************************************************************************!*\
  !*** ./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLStringWriter.js ***!
  \****************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    var XMLStringWriter, XMLWriterBase, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    XMLWriterBase = __webpack_require__(/*! ./XMLWriterBase */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLWriterBase.js\");\n    module.exports = XMLStringWriter = function(superClass) {\n        extend(XMLStringWriter, superClass);\n        function XMLStringWriter(options) {\n            XMLStringWriter.__super__.constructor.call(this, options);\n        }\n        XMLStringWriter.prototype.document = function(doc, options) {\n            var child, i, len, r, ref;\n            options = this.filterOptions(options);\n            r = \"\";\n            ref = doc.children;\n            for(i = 0, len = ref.length; i < len; i++){\n                child = ref[i];\n                r += this.writeChildNode(child, options, 0);\n            }\n            if (options.pretty && r.slice(-options.newline.length) === options.newline) {\n                r = r.slice(0, -options.newline.length);\n            }\n            return r;\n        };\n        return XMLStringWriter;\n    }(XMLWriterBase);\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveG1sMmpzL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxTdHJpbmdXcml0ZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsbUNBQW1DO0FBQ2xDO0lBQ0MsSUFBSUEsaUJBQWlCQyxlQUNuQkMsU0FBUyxTQUFTQyxLQUFLLEVBQUVDLE1BQU07UUFBSSxJQUFLLElBQUlDLE9BQU9ELE9BQVE7WUFBRSxJQUFJRSxRQUFRQyxJQUFJLENBQUNILFFBQVFDLE1BQU1GLEtBQUssQ0FBQ0UsSUFBSSxHQUFHRCxNQUFNLENBQUNDLElBQUk7UUFBRTtRQUFFLFNBQVNHO1lBQVMsSUFBSSxDQUFDQyxXQUFXLEdBQUdOO1FBQU87UUFBRUssS0FBS0UsU0FBUyxHQUFHTixPQUFPTSxTQUFTO1FBQUVQLE1BQU1PLFNBQVMsR0FBRyxJQUFJRjtRQUFRTCxNQUFNUSxTQUFTLEdBQUdQLE9BQU9NLFNBQVM7UUFBRSxPQUFPUDtJQUFPLEdBQ3pSRyxVQUFVLENBQUMsRUFBRU0sY0FBYztJQUU3QlgsZ0JBQWdCWSxtQkFBT0EsQ0FBQztJQUV4QkMsT0FBT0MsT0FBTyxHQUFHZixrQkFBa0IsU0FBVWdCLFVBQVU7UUFDckRkLE9BQU9GLGlCQUFpQmdCO1FBRXhCLFNBQVNoQixnQkFBZ0JpQixPQUFPO1lBQzlCakIsZ0JBQWdCVyxTQUFTLENBQUNGLFdBQVcsQ0FBQ0YsSUFBSSxDQUFDLElBQUksRUFBRVU7UUFDbkQ7UUFFQWpCLGdCQUFnQlUsU0FBUyxDQUFDUSxRQUFRLEdBQUcsU0FBU0MsR0FBRyxFQUFFRixPQUFPO1lBQ3hELElBQUlkLE9BQU9pQixHQUFHQyxLQUFLQyxHQUFHQztZQUN0Qk4sVUFBVSxJQUFJLENBQUNPLGFBQWEsQ0FBQ1A7WUFDN0JLLElBQUk7WUFDSkMsTUFBTUosSUFBSU0sUUFBUTtZQUNsQixJQUFLTCxJQUFJLEdBQUdDLE1BQU1FLElBQUlHLE1BQU0sRUFBRU4sSUFBSUMsS0FBS0QsSUFBSztnQkFDMUNqQixRQUFRb0IsR0FBRyxDQUFDSCxFQUFFO2dCQUNkRSxLQUFLLElBQUksQ0FBQ0ssY0FBYyxDQUFDeEIsT0FBT2MsU0FBUztZQUMzQztZQUNBLElBQUlBLFFBQVFXLE1BQU0sSUFBSU4sRUFBRU8sS0FBSyxDQUFDLENBQUNaLFFBQVFhLE9BQU8sQ0FBQ0osTUFBTSxNQUFNVCxRQUFRYSxPQUFPLEVBQUU7Z0JBQzFFUixJQUFJQSxFQUFFTyxLQUFLLENBQUMsR0FBRyxDQUFDWixRQUFRYSxPQUFPLENBQUNKLE1BQU07WUFDeEM7WUFDQSxPQUFPSjtRQUNUO1FBRUEsT0FBT3RCO0lBRVQsRUFBR0M7QUFFTCxHQUFHTSxJQUFJLENBQUMsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL3BwdHgtb3B0aW1pemVyLy4vbm9kZV9tb2R1bGVzL3htbDJqcy9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MU3RyaW5nV3JpdGVyLmpzPzFjM2MiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIFhNTFN0cmluZ1dyaXRlciwgWE1MV3JpdGVyQmFzZSxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIFhNTFdyaXRlckJhc2UgPSByZXF1aXJlKCcuL1hNTFdyaXRlckJhc2UnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTFN0cmluZ1dyaXRlciA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTFN0cmluZ1dyaXRlciwgc3VwZXJDbGFzcyk7XG5cbiAgICBmdW5jdGlvbiBYTUxTdHJpbmdXcml0ZXIob3B0aW9ucykge1xuICAgICAgWE1MU3RyaW5nV3JpdGVyLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIFhNTFN0cmluZ1dyaXRlci5wcm90b3R5cGUuZG9jdW1lbnQgPSBmdW5jdGlvbihkb2MsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBjaGlsZCwgaSwgbGVuLCByLCByZWY7XG4gICAgICBvcHRpb25zID0gdGhpcy5maWx0ZXJPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgciA9ICcnO1xuICAgICAgcmVmID0gZG9jLmNoaWxkcmVuO1xuICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGNoaWxkID0gcmVmW2ldO1xuICAgICAgICByICs9IHRoaXMud3JpdGVDaGlsZE5vZGUoY2hpbGQsIG9wdGlvbnMsIDApO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMucHJldHR5ICYmIHIuc2xpY2UoLW9wdGlvbnMubmV3bGluZS5sZW5ndGgpID09PSBvcHRpb25zLm5ld2xpbmUpIHtcbiAgICAgICAgciA9IHIuc2xpY2UoMCwgLW9wdGlvbnMubmV3bGluZS5sZW5ndGgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHI7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxTdHJpbmdXcml0ZXI7XG5cbiAgfSkoWE1MV3JpdGVyQmFzZSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibmFtZXMiOlsiWE1MU3RyaW5nV3JpdGVyIiwiWE1MV3JpdGVyQmFzZSIsImV4dGVuZCIsImNoaWxkIiwicGFyZW50Iiwia2V5IiwiaGFzUHJvcCIsImNhbGwiLCJjdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfX3N1cGVyX18iLCJoYXNPd25Qcm9wZXJ0eSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic3VwZXJDbGFzcyIsIm9wdGlvbnMiLCJkb2N1bWVudCIsImRvYyIsImkiLCJsZW4iLCJyIiwicmVmIiwiZmlsdGVyT3B0aW9ucyIsImNoaWxkcmVuIiwibGVuZ3RoIiwid3JpdGVDaGlsZE5vZGUiLCJwcmV0dHkiLCJzbGljZSIsIm5ld2xpbmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLStringWriter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLStringifier.js":
/*!***************************************************************************!*\
  !*** ./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLStringifier.js ***!
  \***************************************************************************/
/***/ (function(module) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    var XMLStringifier, bind = function(fn, me) {\n        return function() {\n            return fn.apply(me, arguments);\n        };\n    }, hasProp = {}.hasOwnProperty;\n    module.exports = XMLStringifier = function() {\n        function XMLStringifier(options) {\n            this.assertLegalName = bind(this.assertLegalName, this);\n            this.assertLegalChar = bind(this.assertLegalChar, this);\n            var key, ref, value;\n            options || (options = {});\n            this.options = options;\n            if (!this.options.version) {\n                this.options.version = \"1.0\";\n            }\n            ref = options.stringify || {};\n            for(key in ref){\n                if (!hasProp.call(ref, key)) continue;\n                value = ref[key];\n                this[key] = value;\n            }\n        }\n        XMLStringifier.prototype.name = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            return this.assertLegalName(\"\" + val || \"\");\n        };\n        XMLStringifier.prototype.text = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            return this.assertLegalChar(this.textEscape(\"\" + val || \"\"));\n        };\n        XMLStringifier.prototype.cdata = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            val = \"\" + val || \"\";\n            val = val.replace(\"]]>\", \"]]]]><![CDATA[>\");\n            return this.assertLegalChar(val);\n        };\n        XMLStringifier.prototype.comment = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            val = \"\" + val || \"\";\n            if (val.match(/--/)) {\n                throw new Error(\"Comment text cannot contain double-hypen: \" + val);\n            }\n            return this.assertLegalChar(val);\n        };\n        XMLStringifier.prototype.raw = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            return \"\" + val || \"\";\n        };\n        XMLStringifier.prototype.attValue = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            return this.assertLegalChar(this.attEscape(val = \"\" + val || \"\"));\n        };\n        XMLStringifier.prototype.insTarget = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            return this.assertLegalChar(\"\" + val || \"\");\n        };\n        XMLStringifier.prototype.insValue = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            val = \"\" + val || \"\";\n            if (val.match(/\\?>/)) {\n                throw new Error(\"Invalid processing instruction value: \" + val);\n            }\n            return this.assertLegalChar(val);\n        };\n        XMLStringifier.prototype.xmlVersion = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            val = \"\" + val || \"\";\n            if (!val.match(/1\\.[0-9]+/)) {\n                throw new Error(\"Invalid version number: \" + val);\n            }\n            return val;\n        };\n        XMLStringifier.prototype.xmlEncoding = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            val = \"\" + val || \"\";\n            if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/)) {\n                throw new Error(\"Invalid encoding: \" + val);\n            }\n            return this.assertLegalChar(val);\n        };\n        XMLStringifier.prototype.xmlStandalone = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            if (val) {\n                return \"yes\";\n            } else {\n                return \"no\";\n            }\n        };\n        XMLStringifier.prototype.dtdPubID = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            return this.assertLegalChar(\"\" + val || \"\");\n        };\n        XMLStringifier.prototype.dtdSysID = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            return this.assertLegalChar(\"\" + val || \"\");\n        };\n        XMLStringifier.prototype.dtdElementValue = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            return this.assertLegalChar(\"\" + val || \"\");\n        };\n        XMLStringifier.prototype.dtdAttType = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            return this.assertLegalChar(\"\" + val || \"\");\n        };\n        XMLStringifier.prototype.dtdAttDefault = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            return this.assertLegalChar(\"\" + val || \"\");\n        };\n        XMLStringifier.prototype.dtdEntityValue = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            return this.assertLegalChar(\"\" + val || \"\");\n        };\n        XMLStringifier.prototype.dtdNData = function(val) {\n            if (this.options.noValidation) {\n                return val;\n            }\n            return this.assertLegalChar(\"\" + val || \"\");\n        };\n        XMLStringifier.prototype.convertAttKey = \"@\";\n        XMLStringifier.prototype.convertPIKey = \"?\";\n        XMLStringifier.prototype.convertTextKey = \"#text\";\n        XMLStringifier.prototype.convertCDataKey = \"#cdata\";\n        XMLStringifier.prototype.convertCommentKey = \"#comment\";\n        XMLStringifier.prototype.convertRawKey = \"#raw\";\n        XMLStringifier.prototype.assertLegalChar = function(str) {\n            var regex, res;\n            if (this.options.noValidation) {\n                return str;\n            }\n            regex = \"\";\n            if (this.options.version === \"1.0\") {\n                regex = /[\\0-\\x08\\x0B\\f\\x0E-\\x1F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n                if (res = str.match(regex)) {\n                    throw new Error(\"Invalid character in string: \" + str + \" at index \" + res.index);\n                }\n            } else if (this.options.version === \"1.1\") {\n                regex = /[\\0\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n                if (res = str.match(regex)) {\n                    throw new Error(\"Invalid character in string: \" + str + \" at index \" + res.index);\n                }\n            }\n            return str;\n        };\n        XMLStringifier.prototype.assertLegalName = function(str) {\n            var regex;\n            if (this.options.noValidation) {\n                return str;\n            }\n            this.assertLegalChar(str);\n            regex = /^([:A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])([\\x2D\\.0-:A-Z_a-z\\xB7\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u203F\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])*$/;\n            if (!str.match(regex)) {\n                throw new Error(\"Invalid character in name\");\n            }\n            return str;\n        };\n        XMLStringifier.prototype.textEscape = function(str) {\n            var ampregex;\n            if (this.options.noValidation) {\n                return str;\n            }\n            ampregex = this.options.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n            return str.replace(ampregex, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\\r/g, \"&#xD;\");\n        };\n        XMLStringifier.prototype.attEscape = function(str) {\n            var ampregex;\n            if (this.options.noValidation) {\n                return str;\n            }\n            ampregex = this.options.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n            return str.replace(ampregex, \"&amp;\").replace(/</g, \"&lt;\").replace(/\"/g, \"&quot;\").replace(/\\t/g, \"&#x9;\").replace(/\\n/g, \"&#xA;\").replace(/\\r/g, \"&#xD;\");\n        };\n        return XMLStringifier;\n    }();\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLStringifier.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLText.js":
/*!********************************************************************!*\
  !*** ./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLText.js ***!
  \********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, XMLCharacterData, XMLText, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLCharacterData = __webpack_require__(/*! ./XMLCharacterData */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLCharacterData.js\");\n    module.exports = XMLText = function(superClass) {\n        extend(XMLText, superClass);\n        function XMLText(parent, text) {\n            XMLText.__super__.constructor.call(this, parent);\n            if (text == null) {\n                throw new Error(\"Missing element text. \" + this.debugInfo());\n            }\n            this.name = \"#text\";\n            this.type = NodeType.Text;\n            this.value = this.stringify.text(text);\n        }\n        Object.defineProperty(XMLText.prototype, \"isElementContentWhitespace\", {\n            get: function() {\n                throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n            }\n        });\n        Object.defineProperty(XMLText.prototype, \"wholeText\", {\n            get: function() {\n                var next, prev, str;\n                str = \"\";\n                prev = this.previousSibling;\n                while(prev){\n                    str = prev.data + str;\n                    prev = prev.previousSibling;\n                }\n                str += this.data;\n                next = this.nextSibling;\n                while(next){\n                    str = str + next.data;\n                    next = next.nextSibling;\n                }\n                return str;\n            }\n        });\n        XMLText.prototype.clone = function() {\n            return Object.create(this);\n        };\n        XMLText.prototype.toString = function(options) {\n            return this.options.writer.text(this, this.options.writer.filterOptions(options));\n        };\n        XMLText.prototype.splitText = function(offset) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        XMLText.prototype.replaceWholeText = function(content) {\n            throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        };\n        return XMLText;\n    }(XMLCharacterData);\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveG1sMmpzL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxUZXh0LmpzIiwibWFwcGluZ3MiOiJBQUFBLG1DQUFtQztBQUNsQztJQUNDLElBQUlBLFVBQVVDLGtCQUFrQkMsU0FDOUJDLFNBQVMsU0FBU0MsS0FBSyxFQUFFQyxNQUFNO1FBQUksSUFBSyxJQUFJQyxPQUFPRCxPQUFRO1lBQUUsSUFBSUUsUUFBUUMsSUFBSSxDQUFDSCxRQUFRQyxNQUFNRixLQUFLLENBQUNFLElBQUksR0FBR0QsTUFBTSxDQUFDQyxJQUFJO1FBQUU7UUFBRSxTQUFTRztZQUFTLElBQUksQ0FBQ0MsV0FBVyxHQUFHTjtRQUFPO1FBQUVLLEtBQUtFLFNBQVMsR0FBR04sT0FBT00sU0FBUztRQUFFUCxNQUFNTyxTQUFTLEdBQUcsSUFBSUY7UUFBUUwsTUFBTVEsU0FBUyxHQUFHUCxPQUFPTSxTQUFTO1FBQUUsT0FBT1A7SUFBTyxHQUN6UkcsVUFBVSxDQUFDLEVBQUVNLGNBQWM7SUFFN0JiLFdBQVdjLG1CQUFPQSxDQUFDO0lBRW5CYixtQkFBbUJhLG1CQUFPQSxDQUFDO0lBRTNCQyxPQUFPQyxPQUFPLEdBQUdkLFVBQVUsU0FBVWUsVUFBVTtRQUM3Q2QsT0FBT0QsU0FBU2U7UUFFaEIsU0FBU2YsUUFBUUcsTUFBTSxFQUFFYSxJQUFJO1lBQzNCaEIsUUFBUVUsU0FBUyxDQUFDRixXQUFXLENBQUNGLElBQUksQ0FBQyxJQUFJLEVBQUVIO1lBQ3pDLElBQUlhLFFBQVEsTUFBTTtnQkFDaEIsTUFBTSxJQUFJQyxNQUFNLDJCQUEyQixJQUFJLENBQUNDLFNBQVM7WUFDM0Q7WUFDQSxJQUFJLENBQUNDLElBQUksR0FBRztZQUNaLElBQUksQ0FBQ0MsSUFBSSxHQUFHdEIsU0FBU3VCLElBQUk7WUFDekIsSUFBSSxDQUFDQyxLQUFLLEdBQUcsSUFBSSxDQUFDQyxTQUFTLENBQUNQLElBQUksQ0FBQ0E7UUFDbkM7UUFFQVEsT0FBT0MsY0FBYyxDQUFDekIsUUFBUVMsU0FBUyxFQUFFLDhCQUE4QjtZQUNyRWlCLEtBQUs7Z0JBQ0gsTUFBTSxJQUFJVCxNQUFNLHdDQUF3QyxJQUFJLENBQUNDLFNBQVM7WUFDeEU7UUFDRjtRQUVBTSxPQUFPQyxjQUFjLENBQUN6QixRQUFRUyxTQUFTLEVBQUUsYUFBYTtZQUNwRGlCLEtBQUs7Z0JBQ0gsSUFBSUMsTUFBTUMsTUFBTUM7Z0JBQ2hCQSxNQUFNO2dCQUNORCxPQUFPLElBQUksQ0FBQ0UsZUFBZTtnQkFDM0IsTUFBT0YsS0FBTTtvQkFDWEMsTUFBTUQsS0FBS0csSUFBSSxHQUFHRjtvQkFDbEJELE9BQU9BLEtBQUtFLGVBQWU7Z0JBQzdCO2dCQUNBRCxPQUFPLElBQUksQ0FBQ0UsSUFBSTtnQkFDaEJKLE9BQU8sSUFBSSxDQUFDSyxXQUFXO2dCQUN2QixNQUFPTCxLQUFNO29CQUNYRSxNQUFNQSxNQUFNRixLQUFLSSxJQUFJO29CQUNyQkosT0FBT0EsS0FBS0ssV0FBVztnQkFDekI7Z0JBQ0EsT0FBT0g7WUFDVDtRQUNGO1FBRUE3QixRQUFRUyxTQUFTLENBQUN3QixLQUFLLEdBQUc7WUFDeEIsT0FBT1QsT0FBT1UsTUFBTSxDQUFDLElBQUk7UUFDM0I7UUFFQWxDLFFBQVFTLFNBQVMsQ0FBQzBCLFFBQVEsR0FBRyxTQUFTQyxPQUFPO1lBQzNDLE9BQU8sSUFBSSxDQUFDQSxPQUFPLENBQUNDLE1BQU0sQ0FBQ3JCLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDb0IsT0FBTyxDQUFDQyxNQUFNLENBQUNDLGFBQWEsQ0FBQ0Y7UUFDMUU7UUFFQXBDLFFBQVFTLFNBQVMsQ0FBQzhCLFNBQVMsR0FBRyxTQUFTQyxNQUFNO1lBQzNDLE1BQU0sSUFBSXZCLE1BQU0sd0NBQXdDLElBQUksQ0FBQ0MsU0FBUztRQUN4RTtRQUVBbEIsUUFBUVMsU0FBUyxDQUFDZ0MsZ0JBQWdCLEdBQUcsU0FBU0MsT0FBTztZQUNuRCxNQUFNLElBQUl6QixNQUFNLHdDQUF3QyxJQUFJLENBQUNDLFNBQVM7UUFDeEU7UUFFQSxPQUFPbEI7SUFFVCxFQUFHRDtBQUVMLEdBQUdPLElBQUksQ0FBQyxJQUFJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHB0eC1vcHRpbWl6ZXIvLi9ub2RlX21vZHVsZXMveG1sMmpzL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxUZXh0LmpzPzA0MWYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEyLjdcbihmdW5jdGlvbigpIHtcbiAgdmFyIE5vZGVUeXBlLCBYTUxDaGFyYWN0ZXJEYXRhLCBYTUxUZXh0LFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgWE1MQ2hhcmFjdGVyRGF0YSA9IHJlcXVpcmUoJy4vWE1MQ2hhcmFjdGVyRGF0YScpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MVGV4dCA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTFRleHQsIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gWE1MVGV4dChwYXJlbnQsIHRleHQpIHtcbiAgICAgIFhNTFRleHQuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyZW50KTtcbiAgICAgIGlmICh0ZXh0ID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBlbGVtZW50IHRleHQuIFwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgICB9XG4gICAgICB0aGlzLm5hbWUgPSBcIiN0ZXh0XCI7XG4gICAgICB0aGlzLnR5cGUgPSBOb2RlVHlwZS5UZXh0O1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuc3RyaW5naWZ5LnRleHQodGV4dCk7XG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTFRleHQucHJvdG90eXBlLCAnaXNFbGVtZW50Q29udGVudFdoaXRlc3BhY2UnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MVGV4dC5wcm90b3R5cGUsICd3aG9sZVRleHQnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbmV4dCwgcHJldiwgc3RyO1xuICAgICAgICBzdHIgPSAnJztcbiAgICAgICAgcHJldiA9IHRoaXMucHJldmlvdXNTaWJsaW5nO1xuICAgICAgICB3aGlsZSAocHJldikge1xuICAgICAgICAgIHN0ciA9IHByZXYuZGF0YSArIHN0cjtcbiAgICAgICAgICBwcmV2ID0gcHJldi5wcmV2aW91c1NpYmxpbmc7XG4gICAgICAgIH1cbiAgICAgICAgc3RyICs9IHRoaXMuZGF0YTtcbiAgICAgICAgbmV4dCA9IHRoaXMubmV4dFNpYmxpbmc7XG4gICAgICAgIHdoaWxlIChuZXh0KSB7XG4gICAgICAgICAgc3RyID0gc3RyICsgbmV4dC5kYXRhO1xuICAgICAgICAgIG5leHQgPSBuZXh0Lm5leHRTaWJsaW5nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBYTUxUZXh0LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5jcmVhdGUodGhpcyk7XG4gICAgfTtcblxuICAgIFhNTFRleHQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy53cml0ZXIudGV4dCh0aGlzLCB0aGlzLm9wdGlvbnMud3JpdGVyLmZpbHRlck9wdGlvbnMob3B0aW9ucykpO1xuICAgIH07XG5cbiAgICBYTUxUZXh0LnByb3RvdHlwZS5zcGxpdFRleHQgPSBmdW5jdGlvbihvZmZzZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgWE1MVGV4dC5wcm90b3R5cGUucmVwbGFjZVdob2xlVGV4dCA9IGZ1bmN0aW9uKGNvbnRlbnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTFRleHQ7XG5cbiAgfSkoWE1MQ2hhcmFjdGVyRGF0YSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibmFtZXMiOlsiTm9kZVR5cGUiLCJYTUxDaGFyYWN0ZXJEYXRhIiwiWE1MVGV4dCIsImV4dGVuZCIsImNoaWxkIiwicGFyZW50Iiwia2V5IiwiaGFzUHJvcCIsImNhbGwiLCJjdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfX3N1cGVyX18iLCJoYXNPd25Qcm9wZXJ0eSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic3VwZXJDbGFzcyIsInRleHQiLCJFcnJvciIsImRlYnVnSW5mbyIsIm5hbWUiLCJ0eXBlIiwiVGV4dCIsInZhbHVlIiwic3RyaW5naWZ5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJuZXh0IiwicHJldiIsInN0ciIsInByZXZpb3VzU2libGluZyIsImRhdGEiLCJuZXh0U2libGluZyIsImNsb25lIiwiY3JlYXRlIiwidG9TdHJpbmciLCJvcHRpb25zIiwid3JpdGVyIiwiZmlsdGVyT3B0aW9ucyIsInNwbGl0VGV4dCIsIm9mZnNldCIsInJlcGxhY2VXaG9sZVRleHQiLCJjb250ZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLText.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLWriterBase.js":
/*!**************************************************************************!*\
  !*** ./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLWriterBase.js ***!
  \**************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, WriterState, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDummy, XMLElement, XMLProcessingInstruction, XMLRaw, XMLText, XMLWriterBase, assign, hasProp = {}.hasOwnProperty;\n    assign = (__webpack_require__(/*! ./Utility */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/Utility.js\").assign);\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/NodeType.js\");\n    XMLDeclaration = __webpack_require__(/*! ./XMLDeclaration */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDeclaration.js\");\n    XMLDocType = __webpack_require__(/*! ./XMLDocType */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDocType.js\");\n    XMLCData = __webpack_require__(/*! ./XMLCData */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLCData.js\");\n    XMLComment = __webpack_require__(/*! ./XMLComment */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLComment.js\");\n    XMLElement = __webpack_require__(/*! ./XMLElement */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLElement.js\");\n    XMLRaw = __webpack_require__(/*! ./XMLRaw */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLRaw.js\");\n    XMLText = __webpack_require__(/*! ./XMLText */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLText.js\");\n    XMLProcessingInstruction = __webpack_require__(/*! ./XMLProcessingInstruction */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLProcessingInstruction.js\");\n    XMLDummy = __webpack_require__(/*! ./XMLDummy */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDummy.js\");\n    XMLDTDAttList = __webpack_require__(/*! ./XMLDTDAttList */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDTDAttList.js\");\n    XMLDTDElement = __webpack_require__(/*! ./XMLDTDElement */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDTDElement.js\");\n    XMLDTDEntity = __webpack_require__(/*! ./XMLDTDEntity */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDTDEntity.js\");\n    XMLDTDNotation = __webpack_require__(/*! ./XMLDTDNotation */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDTDNotation.js\");\n    WriterState = __webpack_require__(/*! ./WriterState */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/WriterState.js\");\n    module.exports = XMLWriterBase = function() {\n        function XMLWriterBase(options) {\n            var key, ref, value;\n            options || (options = {});\n            this.options = options;\n            ref = options.writer || {};\n            for(key in ref){\n                if (!hasProp.call(ref, key)) continue;\n                value = ref[key];\n                this[\"_\" + key] = this[key];\n                this[key] = value;\n            }\n        }\n        XMLWriterBase.prototype.filterOptions = function(options) {\n            var filteredOptions, ref, ref1, ref2, ref3, ref4, ref5, ref6;\n            options || (options = {});\n            options = assign({}, this.options, options);\n            filteredOptions = {\n                writer: this\n            };\n            filteredOptions.pretty = options.pretty || false;\n            filteredOptions.allowEmpty = options.allowEmpty || false;\n            filteredOptions.indent = (ref = options.indent) != null ? ref : \"  \";\n            filteredOptions.newline = (ref1 = options.newline) != null ? ref1 : \"\\n\";\n            filteredOptions.offset = (ref2 = options.offset) != null ? ref2 : 0;\n            filteredOptions.dontPrettyTextNodes = (ref3 = (ref4 = options.dontPrettyTextNodes) != null ? ref4 : options.dontprettytextnodes) != null ? ref3 : 0;\n            filteredOptions.spaceBeforeSlash = (ref5 = (ref6 = options.spaceBeforeSlash) != null ? ref6 : options.spacebeforeslash) != null ? ref5 : \"\";\n            if (filteredOptions.spaceBeforeSlash === true) {\n                filteredOptions.spaceBeforeSlash = \" \";\n            }\n            filteredOptions.suppressPrettyCount = 0;\n            filteredOptions.user = {};\n            filteredOptions.state = WriterState.None;\n            return filteredOptions;\n        };\n        XMLWriterBase.prototype.indent = function(node, options, level) {\n            var indentLevel;\n            if (!options.pretty || options.suppressPrettyCount) {\n                return \"\";\n            } else if (options.pretty) {\n                indentLevel = (level || 0) + options.offset + 1;\n                if (indentLevel > 0) {\n                    return new Array(indentLevel).join(options.indent);\n                }\n            }\n            return \"\";\n        };\n        XMLWriterBase.prototype.endline = function(node, options, level) {\n            if (!options.pretty || options.suppressPrettyCount) {\n                return \"\";\n            } else {\n                return options.newline;\n            }\n        };\n        XMLWriterBase.prototype.attribute = function(att, options, level) {\n            var r;\n            this.openAttribute(att, options, level);\n            r = \" \" + att.name + '=\"' + att.value + '\"';\n            this.closeAttribute(att, options, level);\n            return r;\n        };\n        XMLWriterBase.prototype.cdata = function(node, options, level) {\n            var r;\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level) + \"<![CDATA[\";\n            options.state = WriterState.InsideTag;\n            r += node.value;\n            options.state = WriterState.CloseTag;\n            r += \"]]>\" + this.endline(node, options, level);\n            options.state = WriterState.None;\n            this.closeNode(node, options, level);\n            return r;\n        };\n        XMLWriterBase.prototype.comment = function(node, options, level) {\n            var r;\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level) + \"<!-- \";\n            options.state = WriterState.InsideTag;\n            r += node.value;\n            options.state = WriterState.CloseTag;\n            r += \" -->\" + this.endline(node, options, level);\n            options.state = WriterState.None;\n            this.closeNode(node, options, level);\n            return r;\n        };\n        XMLWriterBase.prototype.declaration = function(node, options, level) {\n            var r;\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level) + \"<?xml\";\n            options.state = WriterState.InsideTag;\n            r += ' version=\"' + node.version + '\"';\n            if (node.encoding != null) {\n                r += ' encoding=\"' + node.encoding + '\"';\n            }\n            if (node.standalone != null) {\n                r += ' standalone=\"' + node.standalone + '\"';\n            }\n            options.state = WriterState.CloseTag;\n            r += options.spaceBeforeSlash + \"?>\";\n            r += this.endline(node, options, level);\n            options.state = WriterState.None;\n            this.closeNode(node, options, level);\n            return r;\n        };\n        XMLWriterBase.prototype.docType = function(node, options, level) {\n            var child, i, len, r, ref;\n            level || (level = 0);\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level);\n            r += \"<!DOCTYPE \" + node.root().name;\n            if (node.pubID && node.sysID) {\n                r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n            } else if (node.sysID) {\n                r += ' SYSTEM \"' + node.sysID + '\"';\n            }\n            if (node.children.length > 0) {\n                r += \" [\";\n                r += this.endline(node, options, level);\n                options.state = WriterState.InsideTag;\n                ref = node.children;\n                for(i = 0, len = ref.length; i < len; i++){\n                    child = ref[i];\n                    r += this.writeChildNode(child, options, level + 1);\n                }\n                options.state = WriterState.CloseTag;\n                r += \"]\";\n            }\n            options.state = WriterState.CloseTag;\n            r += options.spaceBeforeSlash + \">\";\n            r += this.endline(node, options, level);\n            options.state = WriterState.None;\n            this.closeNode(node, options, level);\n            return r;\n        };\n        XMLWriterBase.prototype.element = function(node, options, level) {\n            var att, child, childNodeCount, firstChildNode, i, j, len, len1, name, prettySuppressed, r, ref, ref1, ref2;\n            level || (level = 0);\n            prettySuppressed = false;\n            r = \"\";\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r += this.indent(node, options, level) + \"<\" + node.name;\n            ref = node.attribs;\n            for(name in ref){\n                if (!hasProp.call(ref, name)) continue;\n                att = ref[name];\n                r += this.attribute(att, options, level);\n            }\n            childNodeCount = node.children.length;\n            firstChildNode = childNodeCount === 0 ? null : node.children[0];\n            if (childNodeCount === 0 || node.children.every(function(e) {\n                return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === \"\";\n            })) {\n                if (options.allowEmpty) {\n                    r += \">\";\n                    options.state = WriterState.CloseTag;\n                    r += \"</\" + node.name + \">\" + this.endline(node, options, level);\n                } else {\n                    options.state = WriterState.CloseTag;\n                    r += options.spaceBeforeSlash + \"/>\" + this.endline(node, options, level);\n                }\n            } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && firstChildNode.value != null) {\n                r += \">\";\n                options.state = WriterState.InsideTag;\n                options.suppressPrettyCount++;\n                prettySuppressed = true;\n                r += this.writeChildNode(firstChildNode, options, level + 1);\n                options.suppressPrettyCount--;\n                prettySuppressed = false;\n                options.state = WriterState.CloseTag;\n                r += \"</\" + node.name + \">\" + this.endline(node, options, level);\n            } else {\n                if (options.dontPrettyTextNodes) {\n                    ref1 = node.children;\n                    for(i = 0, len = ref1.length; i < len; i++){\n                        child = ref1[i];\n                        if ((child.type === NodeType.Text || child.type === NodeType.Raw) && child.value != null) {\n                            options.suppressPrettyCount++;\n                            prettySuppressed = true;\n                            break;\n                        }\n                    }\n                }\n                r += \">\" + this.endline(node, options, level);\n                options.state = WriterState.InsideTag;\n                ref2 = node.children;\n                for(j = 0, len1 = ref2.length; j < len1; j++){\n                    child = ref2[j];\n                    r += this.writeChildNode(child, options, level + 1);\n                }\n                options.state = WriterState.CloseTag;\n                r += this.indent(node, options, level) + \"</\" + node.name + \">\";\n                if (prettySuppressed) {\n                    options.suppressPrettyCount--;\n                }\n                r += this.endline(node, options, level);\n                options.state = WriterState.None;\n            }\n            this.closeNode(node, options, level);\n            return r;\n        };\n        XMLWriterBase.prototype.writeChildNode = function(node, options, level) {\n            switch(node.type){\n                case NodeType.CData:\n                    return this.cdata(node, options, level);\n                case NodeType.Comment:\n                    return this.comment(node, options, level);\n                case NodeType.Element:\n                    return this.element(node, options, level);\n                case NodeType.Raw:\n                    return this.raw(node, options, level);\n                case NodeType.Text:\n                    return this.text(node, options, level);\n                case NodeType.ProcessingInstruction:\n                    return this.processingInstruction(node, options, level);\n                case NodeType.Dummy:\n                    return \"\";\n                case NodeType.Declaration:\n                    return this.declaration(node, options, level);\n                case NodeType.DocType:\n                    return this.docType(node, options, level);\n                case NodeType.AttributeDeclaration:\n                    return this.dtdAttList(node, options, level);\n                case NodeType.ElementDeclaration:\n                    return this.dtdElement(node, options, level);\n                case NodeType.EntityDeclaration:\n                    return this.dtdEntity(node, options, level);\n                case NodeType.NotationDeclaration:\n                    return this.dtdNotation(node, options, level);\n                default:\n                    throw new Error(\"Unknown XML node type: \" + node.constructor.name);\n            }\n        };\n        XMLWriterBase.prototype.processingInstruction = function(node, options, level) {\n            var r;\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level) + \"<?\";\n            options.state = WriterState.InsideTag;\n            r += node.target;\n            if (node.value) {\n                r += \" \" + node.value;\n            }\n            options.state = WriterState.CloseTag;\n            r += options.spaceBeforeSlash + \"?>\";\n            r += this.endline(node, options, level);\n            options.state = WriterState.None;\n            this.closeNode(node, options, level);\n            return r;\n        };\n        XMLWriterBase.prototype.raw = function(node, options, level) {\n            var r;\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level);\n            options.state = WriterState.InsideTag;\n            r += node.value;\n            options.state = WriterState.CloseTag;\n            r += this.endline(node, options, level);\n            options.state = WriterState.None;\n            this.closeNode(node, options, level);\n            return r;\n        };\n        XMLWriterBase.prototype.text = function(node, options, level) {\n            var r;\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level);\n            options.state = WriterState.InsideTag;\n            r += node.value;\n            options.state = WriterState.CloseTag;\n            r += this.endline(node, options, level);\n            options.state = WriterState.None;\n            this.closeNode(node, options, level);\n            return r;\n        };\n        XMLWriterBase.prototype.dtdAttList = function(node, options, level) {\n            var r;\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level) + \"<!ATTLIST\";\n            options.state = WriterState.InsideTag;\n            r += \" \" + node.elementName + \" \" + node.attributeName + \" \" + node.attributeType;\n            if (node.defaultValueType !== \"#DEFAULT\") {\n                r += \" \" + node.defaultValueType;\n            }\n            if (node.defaultValue) {\n                r += ' \"' + node.defaultValue + '\"';\n            }\n            options.state = WriterState.CloseTag;\n            r += options.spaceBeforeSlash + \">\" + this.endline(node, options, level);\n            options.state = WriterState.None;\n            this.closeNode(node, options, level);\n            return r;\n        };\n        XMLWriterBase.prototype.dtdElement = function(node, options, level) {\n            var r;\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level) + \"<!ELEMENT\";\n            options.state = WriterState.InsideTag;\n            r += \" \" + node.name + \" \" + node.value;\n            options.state = WriterState.CloseTag;\n            r += options.spaceBeforeSlash + \">\" + this.endline(node, options, level);\n            options.state = WriterState.None;\n            this.closeNode(node, options, level);\n            return r;\n        };\n        XMLWriterBase.prototype.dtdEntity = function(node, options, level) {\n            var r;\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level) + \"<!ENTITY\";\n            options.state = WriterState.InsideTag;\n            if (node.pe) {\n                r += \" %\";\n            }\n            r += \" \" + node.name;\n            if (node.value) {\n                r += ' \"' + node.value + '\"';\n            } else {\n                if (node.pubID && node.sysID) {\n                    r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n                } else if (node.sysID) {\n                    r += ' SYSTEM \"' + node.sysID + '\"';\n                }\n                if (node.nData) {\n                    r += \" NDATA \" + node.nData;\n                }\n            }\n            options.state = WriterState.CloseTag;\n            r += options.spaceBeforeSlash + \">\" + this.endline(node, options, level);\n            options.state = WriterState.None;\n            this.closeNode(node, options, level);\n            return r;\n        };\n        XMLWriterBase.prototype.dtdNotation = function(node, options, level) {\n            var r;\n            this.openNode(node, options, level);\n            options.state = WriterState.OpenTag;\n            r = this.indent(node, options, level) + \"<!NOTATION\";\n            options.state = WriterState.InsideTag;\n            r += \" \" + node.name;\n            if (node.pubID && node.sysID) {\n                r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n            } else if (node.pubID) {\n                r += ' PUBLIC \"' + node.pubID + '\"';\n            } else if (node.sysID) {\n                r += ' SYSTEM \"' + node.sysID + '\"';\n            }\n            options.state = WriterState.CloseTag;\n            r += options.spaceBeforeSlash + \">\" + this.endline(node, options, level);\n            options.state = WriterState.None;\n            this.closeNode(node, options, level);\n            return r;\n        };\n        XMLWriterBase.prototype.openNode = function(node, options, level) {};\n        XMLWriterBase.prototype.closeNode = function(node, options, level) {};\n        XMLWriterBase.prototype.openAttribute = function(att, options, level) {};\n        XMLWriterBase.prototype.closeAttribute = function(att, options, level) {};\n        return XMLWriterBase;\n    }();\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLWriterBase.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/xml2js/node_modules/xmlbuilder/lib/index.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n    var NodeType, WriterState, XMLDOMImplementation, XMLDocument, XMLDocumentCB, XMLStreamWriter, XMLStringWriter, assign, isFunction, ref;\n    ref = __webpack_require__(/*! ./Utility */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/Utility.js\"), assign = ref.assign, isFunction = ref.isFunction;\n    XMLDOMImplementation = __webpack_require__(/*! ./XMLDOMImplementation */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDOMImplementation.js\");\n    XMLDocument = __webpack_require__(/*! ./XMLDocument */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDocument.js\");\n    XMLDocumentCB = __webpack_require__(/*! ./XMLDocumentCB */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLDocumentCB.js\");\n    XMLStringWriter = __webpack_require__(/*! ./XMLStringWriter */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLStringWriter.js\");\n    XMLStreamWriter = __webpack_require__(/*! ./XMLStreamWriter */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/XMLStreamWriter.js\");\n    NodeType = __webpack_require__(/*! ./NodeType */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/NodeType.js\");\n    WriterState = __webpack_require__(/*! ./WriterState */ \"(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/WriterState.js\");\n    module.exports.create = function(name, xmldec, doctype, options) {\n        var doc, root;\n        if (name == null) {\n            throw new Error(\"Root element needs a name.\");\n        }\n        options = assign({}, xmldec, doctype, options);\n        doc = new XMLDocument(options);\n        root = doc.element(name);\n        if (!options.headless) {\n            doc.declaration(options);\n            if (options.pubID != null || options.sysID != null) {\n                doc.dtd(options);\n            }\n        }\n        return root;\n    };\n    module.exports.begin = function(options, onData, onEnd) {\n        var ref1;\n        if (isFunction(options)) {\n            ref1 = [\n                options,\n                onData\n            ], onData = ref1[0], onEnd = ref1[1];\n            options = {};\n        }\n        if (onData) {\n            return new XMLDocumentCB(options, onData, onEnd);\n        } else {\n            return new XMLDocument(options);\n        }\n    };\n    module.exports.stringWriter = function(options) {\n        return new XMLStringWriter(options);\n    };\n    module.exports.streamWriter = function(stream, options) {\n        return new XMLStreamWriter(stream, options);\n    };\n    module.exports.implementation = new XMLDOMImplementation();\n    module.exports.nodeType = NodeType;\n    module.exports.writerState = WriterState;\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveG1sMmpzL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxtQ0FBbUM7QUFDbEM7SUFDQyxJQUFJQSxVQUFVQyxhQUFhQyxzQkFBc0JDLGFBQWFDLGVBQWVDLGlCQUFpQkMsaUJBQWlCQyxRQUFRQyxZQUFZQztJQUVuSUEsTUFBTUMsbUJBQU9BLENBQUMsd0ZBQWNILFNBQVNFLElBQUlGLE1BQU0sRUFBRUMsYUFBYUMsSUFBSUQsVUFBVTtJQUU1RU4sdUJBQXVCUSxtQkFBT0EsQ0FBQztJQUUvQlAsY0FBY08sbUJBQU9BLENBQUM7SUFFdEJOLGdCQUFnQk0sbUJBQU9BLENBQUM7SUFFeEJKLGtCQUFrQkksbUJBQU9BLENBQUM7SUFFMUJMLGtCQUFrQkssbUJBQU9BLENBQUM7SUFFMUJWLFdBQVdVLG1CQUFPQSxDQUFDO0lBRW5CVCxjQUFjUyxtQkFBT0EsQ0FBQztJQUV0QkMscUJBQXFCLEdBQUcsU0FBU0csSUFBSSxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sRUFBRUMsT0FBTztRQUM3RCxJQUFJQyxLQUFLQztRQUNULElBQUlMLFFBQVEsTUFBTTtZQUNoQixNQUFNLElBQUlNLE1BQU07UUFDbEI7UUFDQUgsVUFBVVYsT0FBTyxDQUFDLEdBQUdRLFFBQVFDLFNBQVNDO1FBQ3RDQyxNQUFNLElBQUlmLFlBQVljO1FBQ3RCRSxPQUFPRCxJQUFJRyxPQUFPLENBQUNQO1FBQ25CLElBQUksQ0FBQ0csUUFBUUssUUFBUSxFQUFFO1lBQ3JCSixJQUFJSyxXQUFXLENBQUNOO1lBQ2hCLElBQUksUUFBU08sS0FBSyxJQUFJLFFBQVVQLFFBQVFRLEtBQUssSUFBSSxNQUFPO2dCQUN0RFAsSUFBSVEsR0FBRyxDQUFDVDtZQUNWO1FBQ0Y7UUFDQSxPQUFPRTtJQUNUO0lBRUFSLG9CQUFvQixHQUFHLFNBQVNNLE9BQU8sRUFBRVcsTUFBTSxFQUFFQyxLQUFLO1FBQ3BELElBQUlDO1FBQ0osSUFBSXRCLFdBQVdTLFVBQVU7WUFDdkJhLE9BQU87Z0JBQUNiO2dCQUFTVzthQUFPLEVBQUVBLFNBQVNFLElBQUksQ0FBQyxFQUFFLEVBQUVELFFBQVFDLElBQUksQ0FBQyxFQUFFO1lBQzNEYixVQUFVLENBQUM7UUFDYjtRQUNBLElBQUlXLFFBQVE7WUFDVixPQUFPLElBQUl4QixjQUFjYSxTQUFTVyxRQUFRQztRQUM1QyxPQUFPO1lBQ0wsT0FBTyxJQUFJMUIsWUFBWWM7UUFDekI7SUFDRjtJQUVBTiwyQkFBMkIsR0FBRyxTQUFTTSxPQUFPO1FBQzVDLE9BQU8sSUFBSVgsZ0JBQWdCVztJQUM3QjtJQUVBTiwyQkFBMkIsR0FBRyxTQUFTc0IsTUFBTSxFQUFFaEIsT0FBTztRQUNwRCxPQUFPLElBQUlaLGdCQUFnQjRCLFFBQVFoQjtJQUNyQztJQUVBTiw2QkFBNkIsR0FBRyxJQUFJVDtJQUVwQ1MsdUJBQXVCLEdBQUdYO0lBRTFCVywwQkFBMEIsR0FBR1Y7QUFFL0IsR0FBR29DLElBQUksQ0FBQyxJQUFJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHB0eC1vcHRpbWl6ZXIvLi9ub2RlX21vZHVsZXMveG1sMmpzL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9pbmRleC5qcz83OWJiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi43XG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgV3JpdGVyU3RhdGUsIFhNTERPTUltcGxlbWVudGF0aW9uLCBYTUxEb2N1bWVudCwgWE1MRG9jdW1lbnRDQiwgWE1MU3RyZWFtV3JpdGVyLCBYTUxTdHJpbmdXcml0ZXIsIGFzc2lnbiwgaXNGdW5jdGlvbiwgcmVmO1xuXG4gIHJlZiA9IHJlcXVpcmUoJy4vVXRpbGl0eScpLCBhc3NpZ24gPSByZWYuYXNzaWduLCBpc0Z1bmN0aW9uID0gcmVmLmlzRnVuY3Rpb247XG5cbiAgWE1MRE9NSW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL1hNTERPTUltcGxlbWVudGF0aW9uJyk7XG5cbiAgWE1MRG9jdW1lbnQgPSByZXF1aXJlKCcuL1hNTERvY3VtZW50Jyk7XG5cbiAgWE1MRG9jdW1lbnRDQiA9IHJlcXVpcmUoJy4vWE1MRG9jdW1lbnRDQicpO1xuXG4gIFhNTFN0cmluZ1dyaXRlciA9IHJlcXVpcmUoJy4vWE1MU3RyaW5nV3JpdGVyJyk7XG5cbiAgWE1MU3RyZWFtV3JpdGVyID0gcmVxdWlyZSgnLi9YTUxTdHJlYW1Xcml0ZXInKTtcblxuICBOb2RlVHlwZSA9IHJlcXVpcmUoJy4vTm9kZVR5cGUnKTtcblxuICBXcml0ZXJTdGF0ZSA9IHJlcXVpcmUoJy4vV3JpdGVyU3RhdGUnKTtcblxuICBtb2R1bGUuZXhwb3J0cy5jcmVhdGUgPSBmdW5jdGlvbihuYW1lLCB4bWxkZWMsIGRvY3R5cGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZG9jLCByb290O1xuICAgIGlmIChuYW1lID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJvb3QgZWxlbWVudCBuZWVkcyBhIG5hbWUuXCIpO1xuICAgIH1cbiAgICBvcHRpb25zID0gYXNzaWduKHt9LCB4bWxkZWMsIGRvY3R5cGUsIG9wdGlvbnMpO1xuICAgIGRvYyA9IG5ldyBYTUxEb2N1bWVudChvcHRpb25zKTtcbiAgICByb290ID0gZG9jLmVsZW1lbnQobmFtZSk7XG4gICAgaWYgKCFvcHRpb25zLmhlYWRsZXNzKSB7XG4gICAgICBkb2MuZGVjbGFyYXRpb24ob3B0aW9ucyk7XG4gICAgICBpZiAoKG9wdGlvbnMucHViSUQgIT0gbnVsbCkgfHwgKG9wdGlvbnMuc3lzSUQgIT0gbnVsbCkpIHtcbiAgICAgICAgZG9jLmR0ZChvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJvb3Q7XG4gIH07XG5cbiAgbW9kdWxlLmV4cG9ydHMuYmVnaW4gPSBmdW5jdGlvbihvcHRpb25zLCBvbkRhdGEsIG9uRW5kKSB7XG4gICAgdmFyIHJlZjE7XG4gICAgaWYgKGlzRnVuY3Rpb24ob3B0aW9ucykpIHtcbiAgICAgIHJlZjEgPSBbb3B0aW9ucywgb25EYXRhXSwgb25EYXRhID0gcmVmMVswXSwgb25FbmQgPSByZWYxWzFdO1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICBpZiAob25EYXRhKSB7XG4gICAgICByZXR1cm4gbmV3IFhNTERvY3VtZW50Q0Iob3B0aW9ucywgb25EYXRhLCBvbkVuZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgWE1MRG9jdW1lbnQob3B0aW9ucyk7XG4gICAgfVxuICB9O1xuXG4gIG1vZHVsZS5leHBvcnRzLnN0cmluZ1dyaXRlciA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IFhNTFN0cmluZ1dyaXRlcihvcHRpb25zKTtcbiAgfTtcblxuICBtb2R1bGUuZXhwb3J0cy5zdHJlYW1Xcml0ZXIgPSBmdW5jdGlvbihzdHJlYW0sIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IFhNTFN0cmVhbVdyaXRlcihzdHJlYW0sIG9wdGlvbnMpO1xuICB9O1xuXG4gIG1vZHVsZS5leHBvcnRzLmltcGxlbWVudGF0aW9uID0gbmV3IFhNTERPTUltcGxlbWVudGF0aW9uKCk7XG5cbiAgbW9kdWxlLmV4cG9ydHMubm9kZVR5cGUgPSBOb2RlVHlwZTtcblxuICBtb2R1bGUuZXhwb3J0cy53cml0ZXJTdGF0ZSA9IFdyaXRlclN0YXRlO1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm5hbWVzIjpbIk5vZGVUeXBlIiwiV3JpdGVyU3RhdGUiLCJYTUxET01JbXBsZW1lbnRhdGlvbiIsIlhNTERvY3VtZW50IiwiWE1MRG9jdW1lbnRDQiIsIlhNTFN0cmVhbVdyaXRlciIsIlhNTFN0cmluZ1dyaXRlciIsImFzc2lnbiIsImlzRnVuY3Rpb24iLCJyZWYiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImNyZWF0ZSIsIm5hbWUiLCJ4bWxkZWMiLCJkb2N0eXBlIiwib3B0aW9ucyIsImRvYyIsInJvb3QiLCJFcnJvciIsImVsZW1lbnQiLCJoZWFkbGVzcyIsImRlY2xhcmF0aW9uIiwicHViSUQiLCJzeXNJRCIsImR0ZCIsImJlZ2luIiwib25EYXRhIiwib25FbmQiLCJyZWYxIiwic3RyaW5nV3JpdGVyIiwic3RyZWFtV3JpdGVyIiwic3RyZWFtIiwiaW1wbGVtZW50YXRpb24iLCJub2RlVHlwZSIsIndyaXRlclN0YXRlIiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xml2js/node_modules/xmlbuilder/lib/index.js\n");

/***/ })

};
;